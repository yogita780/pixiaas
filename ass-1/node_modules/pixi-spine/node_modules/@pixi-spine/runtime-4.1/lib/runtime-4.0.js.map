{"version":3,"file":"runtime-4.0.js","sources":["../../../common/temp/node_modules/.pnpm/registry.npmjs.org/tslib/2.2.0/node_modules/tslib/tslib.es6.js","../src/core/attachments/Attachment.ts","../src/core/attachments/BoundingBoxAttachment.ts","../src/core/attachments/ClippingAttachment.ts","../src/core/attachments/MeshAttachment.ts","../src/core/attachments/PathAttachment.ts","../src/core/attachments/PointAttachment.ts","../src/core/attachments/RegionAttachment.ts","../src/core/vertexeffects/JitterEffect.ts","../src/core/vertexeffects/SwirlEffect.ts","../src/core/Animation.ts","../src/core/AnimationState.ts","../src/core/AnimationStateData.ts","../src/core/AtlasAttachmentLoader.ts","../src/core/Bone.ts","../src/core/BoneData.ts","../src/core/ConstraintData.ts","../src/core/Event.ts","../src/core/EventData.ts","../src/core/IkConstraint.ts","../src/core/IkConstraintData.ts","../src/core/PathConstraintData.ts","../src/core/PathConstraint.ts","../src/core/Slot.ts","../src/core/TransformConstraint.ts","../src/core/Skeleton.ts","../src/core/SkeletonData.ts","../src/core/SlotData.ts","../src/core/TransformConstraintData.ts","../src/core/Skin.ts","../src/core/SkeletonBinary.ts","../src/core/SkeletonBounds.ts","../src/core/SkeletonJson.ts","../src/Spine.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import {AttachmentType, Utils} from '@pixi-spine/base';\r\nimport type {IAttachment, ArrayLike} from '@pixi-spine/base';\r\n\r\nimport type {Slot} from '../Slot';\r\n\r\n/**\r\n * The base class for all attachments.\r\n * @public\r\n */\r\nexport abstract class Attachment implements IAttachment {\r\n    name: string;\r\n    type: AttachmentType;\r\n\r\n    constructor (name: string) {\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        this.name = name;\r\n    }\r\n\r\n    abstract copy (): Attachment;\r\n}\r\n\r\n/**\r\n * Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\r\n * {@link Slot#deform}.\r\n * @public\r\n */\r\nexport abstract class VertexAttachment extends Attachment {\r\n    private static nextID = 0;\r\n\r\n    /** The unique ID for this attachment. */\r\n    id = VertexAttachment.nextID++;\r\n\r\n    /** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\r\n     * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\r\n     * if this attachment has no weights. */\r\n    bones: Array<number>;\r\n\r\n    /** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\r\n     * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\r\n     * each vertex. */\r\n    vertices: ArrayLike<number>;\r\n\r\n    /** The maximum number of world vertex values that can be output by\r\n     * {@link #computeWorldVertices()} using the `count` parameter. */\r\n    worldVerticesLength = 0;\r\n\r\n    /** Deform keys for the deform attachment are also applied to this attachment. May be null if no deform keys should be applied. */\r\n    deformAttachment: VertexAttachment = this;\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    computeWorldVerticesOld(slot: Slot, worldVertices: ArrayLike<number>) {\r\n        this.computeWorldVertices(slot, 0, this.worldVerticesLength, worldVertices, 0, 2);\r\n    }\r\n    /** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\r\n     * not empty, it is used to deform the vertices.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide.\r\n     * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\r\n     * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\r\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\r\n     *           `stride` / 2.\r\n     * @param offset The `worldVertices` index to begin writing values.\r\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\r\n    computeWorldVertices (slot: Slot, start: number, count: number, worldVertices: ArrayLike<number>, offset: number, stride: number) {\r\n        count = offset + (count >> 1) * stride;\r\n        let skeleton = slot.bone.skeleton;\r\n        let deformArray = slot.deform;\r\n        let vertices = this.vertices;\r\n        let bones = this.bones;\r\n        if (!bones) {\r\n            if (deformArray.length > 0) vertices = deformArray;\r\n            let mat = slot.bone.matrix;\r\n            let x = mat.tx;\r\n            let y = mat.ty;\r\n            let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n            for (let v = start, w = offset; w < count; v += 2, w += stride) {\r\n                let vx = vertices[v], vy = vertices[v + 1];\r\n                worldVertices[w] = vx * a + vy * b + x;\r\n                worldVertices[w + 1] = vx * c + vy * d + y;\r\n            }\r\n            return;\r\n        }\r\n        let v = 0, skip = 0;\r\n        for (let i = 0; i < start; i += 2) {\r\n            let n = bones[v];\r\n            v += n + 1;\r\n            skip += n;\r\n        }\r\n        let skeletonBones = skeleton.bones;\r\n        if (deformArray.length == 0) {\r\n            for (let w = offset, b = skip * 3; w < count; w += stride) {\r\n                let wx = 0, wy = 0;\r\n                let n = bones[v++];\r\n                n += v;\r\n                for (; v < n; v++, b += 3) {\r\n                    let mat = skeletonBones[bones[v]].matrix;\r\n                    let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\r\n                    wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\r\n                    wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\r\n                }\r\n                worldVertices[w] = wx;\r\n                worldVertices[w + 1] = wy;\r\n            }\r\n        } else {\r\n            let deform = deformArray;\r\n            for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\r\n                let wx = 0, wy = 0;\r\n                let n = bones[v++];\r\n                n += v;\r\n                for (; v < n; v++, b += 3, f += 2) {\r\n                    let mat = skeletonBones[bones[v]].matrix;\r\n                    let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\r\n                    wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\r\n                    wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\r\n                }\r\n                worldVertices[w] = wx;\r\n                worldVertices[w + 1] = wy;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Does not copy id (generated) or name (set on construction). **/\r\n    copyTo (attachment: VertexAttachment) {\r\n        if (this.bones) {\r\n            attachment.bones = new Array<number>(this.bones.length);\r\n            Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\r\n        } else\r\n            attachment.bones = null;\r\n\r\n        if (this.vertices) {\r\n            attachment.vertices = Utils.newFloatArray(this.vertices.length);\r\n            Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\r\n        } else\r\n            attachment.vertices = null;\r\n\r\n        attachment.worldVerticesLength = this.worldVerticesLength;\r\n        attachment.deformAttachment = this.deformAttachment;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color} from '@pixi-spine/base';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BoundingBoxAttachment extends VertexAttachment {\r\n    type = AttachmentType.BoundingBox;\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new BoundingBoxAttachment(this.name);\r\n        this.copyTo(copy);\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color, IClippingAttachment} from '@pixi-spine/base';\r\nimport type {SlotData} from '../SlotData';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class ClippingAttachment extends VertexAttachment implements IClippingAttachment {\r\n    type = AttachmentType.Clipping;\r\n    endSlot: SlotData;\r\n\r\n    // Nonessential.\r\n    /** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\r\n     * are not usually rendered at runtime. */\r\n    color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new ClippingAttachment(this.name);\r\n        this.copyTo(copy);\r\n        copy.endSlot = this.endSlot;\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color, IMeshAttachment, TextureRegion, Utils} from '@pixi-spine/base';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class MeshAttachment extends VertexAttachment implements IMeshAttachment {\r\n    type = AttachmentType.Mesh;\r\n\r\n    region: TextureRegion;\r\n\r\n    /** The name of the texture region for this attachment. */\r\n    path: string;\r\n\r\n    /** The UV pair for each vertex, normalized within the texture region. */\r\n    regionUVs: Float32Array;\r\n\r\n    /** Triplets of vertex indices which describe the mesh's triangulation. */\r\n    triangles: Array<number>;\r\n\r\n    /** The color to tint the mesh. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The width of the mesh's image. Available only when nonessential data was exported. */\r\n    width: number;\r\n\r\n    /** The height of the mesh's image. Available only when nonessential data was exported. */\r\n    height: number;\r\n\r\n    /** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */\r\n    hullLength: number;\r\n\r\n    /** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\r\n     * nonessential data was exported. Triangulation is not performed at runtime. */\r\n    edges: Array<number>;\r\n\r\n    private parentMesh: MeshAttachment;\r\n    tempColor = new Color(0, 0, 0, 0);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    /** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\r\n     * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\r\n     * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */\r\n    getParentMesh () {\r\n        return this.parentMesh;\r\n    }\r\n\r\n    /** @param parentMesh May be null. */\r\n    setParentMesh (parentMesh: MeshAttachment) {\r\n        this.parentMesh = parentMesh;\r\n        if (parentMesh) {\r\n            this.bones = parentMesh.bones;\r\n            this.vertices = parentMesh.vertices;\r\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\r\n            this.regionUVs = parentMesh.regionUVs;\r\n            this.triangles = parentMesh.triangles;\r\n            this.hullLength = parentMesh.hullLength;\r\n            this.worldVerticesLength = parentMesh.worldVerticesLength\r\n        }\r\n    }\r\n\r\n    copy (): Attachment {\r\n        if (this.parentMesh) return this.newLinkedMesh();\r\n\r\n        let copy = new MeshAttachment(this.name);\r\n        copy.region = this.region;\r\n        copy.path = this.path;\r\n        copy.color.setFromColor(this.color);\r\n\r\n        this.copyTo(copy);\r\n        copy.regionUVs = new Float32Array(this.regionUVs.length);\r\n        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\r\n        copy.triangles = new Array<number>(this.triangles.length);\r\n        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\r\n        copy.hullLength = this.hullLength;\r\n\r\n        // Nonessential.\r\n        if (this.edges) {\r\n            copy.edges = new Array<number>(this.edges.length);\r\n            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\r\n        }\r\n        copy.width = this.width;\r\n        copy.height = this.height;\r\n\r\n        return copy;\r\n    }\r\n\r\n    /** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/\r\n    newLinkedMesh (): MeshAttachment {\r\n        let copy = new MeshAttachment(this.name);\r\n        copy.region = this.region;\r\n        copy.path = this.path;\r\n        copy.color.setFromColor(this.color);\r\n        copy.deformAttachment = this.deformAttachment;\r\n        copy.setParentMesh(this.parentMesh ? this.parentMesh : this);\r\n        // copy.updateUVs();\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from \"./Attachment\";\r\nimport {AttachmentType, Color, Utils} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class PathAttachment extends VertexAttachment {\r\n    type = AttachmentType.Path;\r\n\r\n    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\r\n    lengths: Array<number>;\r\n\r\n    /** If true, the start and end knots are connected. */\r\n    closed = false;\r\n\r\n    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\r\n     * calculations are performed but calculating positions along the path is less accurate. */\r\n    constantSpeed = false;\r\n\r\n    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\r\n     * rendered at runtime. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new PathAttachment(this.name);\r\n        this.copyTo(copy);\r\n        copy.lengths = new Array<number>(this.lengths.length);\r\n        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\r\n        copy.closed = closed;\r\n        copy.constantSpeed = this.constantSpeed;\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment, VertexAttachment} from './Attachment';\r\nimport {AttachmentType, Color, MathUtils, Vector2} from \"@pixi-spine/base\";\r\nimport type {Bone} from '../Bone';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class PointAttachment extends VertexAttachment {\r\n    type = AttachmentType.Point;\r\n\r\n    x: number; y: number; rotation: number;\r\n\r\n    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\r\n     * are not usually rendered at runtime. */\r\n    color = new Color(0.38, 0.94, 0, 1);\r\n\r\n    constructor (name: string) {\r\n        super(name);\r\n    }\r\n\r\n    computeWorldPosition (bone: Bone, point: Vector2) {\r\n        const mat = bone.matrix;\r\n        point.x = this.x * mat.a + this.y * mat.c + bone.worldX;\r\n        point.y = this.x * mat.b + this.y * mat.d + bone.worldY;\r\n        return point;\r\n    }\r\n\r\n    computeWorldRotation (bone: Bone) {\r\n        const mat = bone.matrix;\r\n        let cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\r\n        let x = cos * mat.a + sin * mat.c;\r\n        let y = cos * mat.b + sin * mat.d;\r\n        return Math.atan2(y, x) * MathUtils.radDeg;\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new PointAttachment(this.name);\r\n        copy.x = this.x;\r\n        copy.y = this.y;\r\n        copy.rotation = this.rotation;\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {Attachment} from './Attachment';\r\nimport {AttachmentType, ArrayLike, Color, TextureRegion, Utils, IRegionAttachment} from \"@pixi-spine/base\";\r\n\r\nimport type {Bone} from '../Bone';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class RegionAttachment extends Attachment implements IRegionAttachment {\r\n    type = AttachmentType.Region;\r\n\r\n    static OX1 = 0;\r\n    static OY1 = 1;\r\n    static OX2 = 2;\r\n    static OY2 = 3;\r\n    static OX3 = 4;\r\n    static OY3 = 5;\r\n    static OX4 = 6;\r\n    static OY4 = 7;\r\n\r\n    static X1 = 0;\r\n    static Y1 = 1;\r\n    static C1R = 2;\r\n    static C1G = 3;\r\n    static C1B = 4;\r\n    static C1A = 5;\r\n    static U1 = 6;\r\n    static V1 = 7;\r\n\r\n    static X2 = 8;\r\n    static Y2 = 9;\r\n    static C2R = 10;\r\n    static C2G = 11;\r\n    static C2B = 12;\r\n    static C2A = 13;\r\n    static U2 = 14;\r\n    static V2 = 15;\r\n\r\n    static X3 = 16;\r\n    static Y3 = 17;\r\n    static C3R = 18;\r\n    static C3G = 19;\r\n    static C3B = 20;\r\n    static C3A = 21;\r\n    static U3 = 22;\r\n    static V3 = 23;\r\n\r\n    static X4 = 24;\r\n    static Y4 = 25;\r\n    static C4R = 26;\r\n    static C4G = 27;\r\n    static C4B = 28;\r\n    static C4A = 29;\r\n    static U4 = 30;\r\n    static V4 = 31;\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 1;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 1;\r\n\r\n    /** The local rotation. */\r\n    rotation = 0;\r\n\r\n    /** The width of the region attachment in Spine. */\r\n    width = 0;\r\n\r\n    /** The height of the region attachment in Spine. */\r\n    height = 0;\r\n\r\n    /** The color to tint the region attachment. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The name of the texture region for this attachment. */\r\n    path: string;\r\n\r\n    rendererObject: any;\r\n    region: TextureRegion;\r\n\r\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\r\n     *\r\n     * See {@link #updateOffset()}. */\r\n    offset = Utils.newFloatArray(8);\r\n\r\n\r\n    uvs = Utils.newFloatArray(8);\r\n\r\n    tempColor = new Color(1, 1, 1, 1);\r\n\r\n    constructor (name:string) {\r\n        super(name);\r\n    }\r\n\r\n    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\r\n    updateOffset () : void {\r\n        let regionScaleX = this.width / this.region.originalWidth * this.scaleX;\r\n        let regionScaleY = this.height / this.region.originalHeight * this.scaleY;\r\n        let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\r\n        let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\r\n        let localX2 = localX + this.region.width * regionScaleX;\r\n        let localY2 = localY + this.region.height * regionScaleY;\r\n        let radians = this.rotation * Math.PI / 180;\r\n        let cos = Math.cos(radians);\r\n        let sin = Math.sin(radians);\r\n        let localXCos = localX * cos + this.x;\r\n        let localXSin = localX * sin;\r\n        let localYCos = localY * cos + this.y;\r\n        let localYSin = localY * sin;\r\n        let localX2Cos = localX2 * cos + this.x;\r\n        let localX2Sin = localX2 * sin;\r\n        let localY2Cos = localY2 * cos + this.y;\r\n        let localY2Sin = localY2 * sin;\r\n        let offset = this.offset;\r\n        offset[RegionAttachment.OX1] = localXCos - localYSin;\r\n        offset[RegionAttachment.OY1] = localYCos + localXSin;\r\n        offset[RegionAttachment.OX2] = localXCos - localY2Sin;\r\n        offset[RegionAttachment.OY2] = localY2Cos + localXSin;\r\n        offset[RegionAttachment.OX3] = localX2Cos - localY2Sin;\r\n        offset[RegionAttachment.OY3] = localY2Cos + localX2Sin;\r\n        offset[RegionAttachment.OX4] = localX2Cos - localYSin;\r\n        offset[RegionAttachment.OY4] = localYCos + localX2Sin;\r\n    }\r\n\r\n    setRegion (region: TextureRegion) : void {\r\n        this.region = region;\r\n        let uvs = this.uvs;\r\n        if (region.degrees == 90) {\r\n            uvs[2] = region.u;\r\n            uvs[3] = region.v2;\r\n            uvs[4] = region.u;\r\n            uvs[5] = region.v;\r\n            uvs[6] = region.u2;\r\n            uvs[7] = region.v;\r\n            uvs[0] = region.u2;\r\n            uvs[1] = region.v2;\r\n        } else {\r\n            uvs[0] = region.u;\r\n            uvs[1] = region.v2;\r\n            uvs[2] = region.u;\r\n            uvs[3] = region.v;\r\n            uvs[4] = region.u2;\r\n            uvs[5] = region.v;\r\n            uvs[6] = region.u2;\r\n            uvs[7] = region.v2;\r\n        }\r\n    }\r\n\r\n    /** Transforms the attachment's four vertices to world coordinates.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide.\r\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + 8.\r\n     * @param offset The `worldVertices` index to begin writing values.\r\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\r\n    computeWorldVertices (bone: Bone, worldVertices: ArrayLike<number>, offset: number, stride: number) {\r\n        let vertexOffset = this.offset;\r\n        let mat = bone.matrix;\r\n        let x = mat.tx, y = mat.ty;\r\n        let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n        let offsetX = 0, offsetY = 0;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX1];\r\n        offsetY = vertexOffset[RegionAttachment.OY1];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // br\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX2];\r\n        offsetY = vertexOffset[RegionAttachment.OY2];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX3];\r\n        offsetY = vertexOffset[RegionAttachment.OY3];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX4];\r\n        offsetY = vertexOffset[RegionAttachment.OY4];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n    }\r\n\r\n    copy (): Attachment {\r\n        let copy = new RegionAttachment(this.name);\r\n        copy.region = this.region;\r\n        copy.rendererObject = this.rendererObject;\r\n        copy.path = this.path;\r\n        copy.x = this.x;\r\n        copy.y = this.y;\r\n        copy.scaleX = this.scaleX;\r\n        copy.scaleY = this.scaleY;\r\n        copy.rotation = this.rotation;\r\n        copy.width = this.width;\r\n        copy.height = this.height;\r\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\r\n        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\r\n        copy.color.setFromColor(this.color);\r\n        return copy;\r\n    }\r\n}\r\n","import {VertexEffect} from \"../VertexEffect\";\r\nimport type {Skeleton} from \"../Skeleton\";\r\nimport {Color, MathUtils, Vector2} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class JitterEffect implements VertexEffect {\r\n    jitterX = 0;\r\n    jitterY = 0;\r\n\r\n    constructor (jitterX: number, jitterY: number) {\r\n        this.jitterX = jitterX;\r\n        this.jitterY = jitterY;\r\n    }\r\n\r\n    //@ts-ignore\r\n    begin(skeleton: Skeleton): void {\r\n    }\r\n\r\n    //@ts-ignore\r\n    transform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\r\n        position.x += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\r\n        position.y += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\r\n    }\r\n\r\n    end(): void {\r\n    }\r\n}\r\n","import {VertexEffect} from \"../VertexEffect\";\r\nimport type {Skeleton} from \"../Skeleton\";\r\nimport {Color, MathUtils, PowOut, Vector2} from \"@pixi-spine/base\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SwirlEffect implements VertexEffect {\r\n    static interpolation = new PowOut(2);\r\n    centerX = 0;\r\n    centerY = 0;\r\n    radius = 0;\r\n    angle = 0;\r\n    private worldX = 0;\r\n    private worldY = 0;\r\n\r\n    constructor (radius: number) {\r\n        this.radius = radius;\r\n    }\r\n\r\n    begin(skeleton: Skeleton): void {\r\n        this.worldX = skeleton.x + this.centerX;\r\n        this.worldY = skeleton.y + this.centerY;\r\n    }\r\n\r\n    //@ts-ignore\r\n    transform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\r\n        let radAngle = this.angle * MathUtils.degreesToRadians;\r\n        let x = position.x - this.worldX;\r\n        let y = position.y - this.worldY;\r\n        let dist = Math.sqrt(x * x + y * y);\r\n        if (dist < this.radius) {\r\n            let theta = SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);\r\n            let cos = Math.cos(theta);\r\n            let sin = Math.sin(theta);\r\n            position.x = cos * x - sin * y + this.worldX;\r\n            position.y = sin * x + cos * y + this.worldY;\r\n        }\r\n    }\r\n\r\n    end(): void {\r\n    }\r\n}\r\n","import {Event} from './Event';\r\nimport type {Skeleton} from \"./Skeleton\";\r\nimport {Attachment, VertexAttachment} from \"./attachments\";\r\nimport {NumberArrayLike, IAnimation, ITimeline, MathUtils, MixBlend, StringSet, Utils, MixDirection} from '@pixi-spine/base';\r\nimport {Slot} from \"./Slot\";\r\nimport {IkConstraint} from \"./IkConstraint\";\r\nimport {TransformConstraint} from \"./TransformConstraint\";\r\nimport {PathConstraint} from \"./PathConstraint\";\r\n/**\r\n * A simple container for a list of timelines and a name.\r\n * @public\r\n * */\r\nexport class Animation implements IAnimation<Timeline> {\r\n    /** The animation's name, which is unique across all animations in the skeleton. */\r\n    name: string;\r\n    timelines: Array<Timeline> = null;\r\n    timelineIds: StringSet = null;\r\n\r\n    /** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\r\n    duration: number;\r\n\r\n    constructor (name: string, timelines: Array<Timeline>, duration: number) {\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        this.name = name;\r\n        this.setTimelines(timelines);\r\n        this.duration = duration;\r\n    }\r\n\r\n    setTimelines (timelines: Array<Timeline>) {\r\n        if (!timelines) throw new Error(\"timelines cannot be null.\");\r\n        this.timelines = timelines;\r\n        this.timelineIds = new StringSet();\r\n        for (var i = 0; i < timelines.length; i++)\r\n            this.timelineIds.addAll(timelines[i].getPropertyIds());\r\n    }\r\n\r\n    hasTimeline (ids: string[]): boolean {\r\n        for (let i = 0; i < ids.length; i++)\r\n            if (this.timelineIds.contains(ids[i])) return true;\r\n        return false;\r\n    }\r\n\r\n    /** Applies all the animation's timelines to the specified skeleton.\r\n     *\r\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n     * @param loop If true, the animation repeats after {@link #getDuration()}.\r\n     * @param events May be null to ignore fired events. */\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, loop: boolean, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\r\n        if (loop && this.duration != 0) {\r\n            time %= this.duration;\r\n            if (lastTime > 0) lastTime %= this.duration;\r\n        }\r\n\r\n        let timelines = this.timelines;\r\n        for (let i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\r\n    }\r\n}\r\n\r\nconst Property = {\r\n    rotate: 0,\r\n    x: 1,\r\n    y: 2,\r\n    scaleX: 3,\r\n    scaleY: 4,\r\n    shearX: 5,\r\n    shearY: 6,\r\n\r\n    rgb: 7,\r\n    alpha: 8,\r\n    rgb2: 9,\r\n\r\n    attachment: 10,\r\n    deform: 11,\r\n\r\n    event: 12,\r\n    drawOrder: 13,\r\n\r\n    ikConstraint: 14,\r\n    transformConstraint: 15,\r\n\r\n    pathConstraintPosition: 16,\r\n    pathConstraintSpacing: 17,\r\n    pathConstraintMix: 18\r\n}\r\n\r\n/** The interface for all timelines.\r\n * @public\r\n * */\r\nexport abstract class Timeline implements ITimeline {\r\n    propertyIds: string[] = null;\r\n    frames: NumberArrayLike = null;\r\n\r\n    constructor (frameCount: number, propertyIds: string[]) {\r\n        this.propertyIds = propertyIds;\r\n        this.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\r\n    }\r\n\r\n    getPropertyIds () {\r\n        return this.propertyIds;\r\n    }\r\n\r\n    getFrameEntries (): number {\r\n        return 1;\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length / this.getFrameEntries();\r\n    }\r\n\r\n    getDuration (): number {\r\n        return this.frames[this.frames.length - this.getFrameEntries()];\r\n    }\r\n\r\n    abstract apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection): void;\r\n\r\n    static search1 (frames: NumberArrayLike, time: number) {\r\n        let n = frames.length;\r\n        for (let i = 1; i < n; i++)\r\n            if (frames[i] > time) return i - 1;\r\n        return n - 1;\r\n    }\r\n\r\n    static search (frames: NumberArrayLike, time: number, step: number) {\r\n        let n = frames.length;\r\n        for (let i = step; i < n; i += step)\r\n            if (frames[i] > time) return i - step;\r\n        return n - step;\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface BoneTimeline {\r\n    /** The index of the bone in {@link Skeleton#bones} that will be changed. */\r\n    boneIndex: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface SlotTimeline {\r\n    /** The index of the slot in {@link Skeleton#slots} that will be changed. */\r\n    slotIndex: number;\r\n}\r\n\r\n/** The base class for timelines that use interpolation between key frame values.\r\n * @public\r\n * */\r\nexport abstract class CurveTimeline extends Timeline {\r\n    protected curves: NumberArrayLike = null; // type, x, y, ...\r\n\r\n    constructor (frameCount: number, bezierCount: number, propertyIds: string[]) {\r\n        super(frameCount, propertyIds);\r\n        this.curves = Utils.newFloatArray(frameCount + bezierCount * 18/*BEZIER_SIZE*/);\r\n        this.curves[frameCount - 1] = 1/*STEPPED*/;\r\n    }\r\n\r\n    /** Sets the specified key frame to linear interpolation. */\r\n    setLinear (frame: number) {\r\n        this.curves[frame] = 0/*LINEAR*/;\r\n    }\r\n\r\n    /** Sets the specified key frame to stepped interpolation. */\r\n    setStepped (frame: number) {\r\n        this.curves[frame] = 1/*STEPPED*/;\r\n    }\r\n\r\n    /** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\r\n     * than the actual number of Bezier curves. */\r\n    shrink (bezierCount: number) {\r\n        let size = this.getFrameCount() + bezierCount * 18/*BEZIER_SIZE*/;\r\n        if (this.curves.length > size) {\r\n            let newCurves = Utils.newFloatArray(size);\r\n            Utils.arrayCopy(this.curves, 0, newCurves, 0, size);\r\n            this.curves = newCurves;\r\n        }\r\n    }\r\n\r\n    /** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\r\n     * one curve per frame.\r\n     * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\r\n     *           in the constructor), inclusive.\r\n     * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\r\n     * @param value The index of the value for this frame that this curve is used for.\r\n     * @param time1 The time for the first key.\r\n     * @param value1 The value for the first key.\r\n     * @param cx1 The time for the first Bezier handle.\r\n     * @param cy1 The value for the first Bezier handle.\r\n     * @param cx2 The time of the second Bezier handle.\r\n     * @param cy2 The value for the second Bezier handle.\r\n     * @param time2 The time for the second key.\r\n     * @param value2 The value for the second key. */\r\n    setBezier (bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\r\n               cy2: number, time2: number, value2: number) {\r\n        let curves = this.curves;\r\n        let i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\r\n        if (value == 0) curves[frame] = 2/*BEZIER*/ + i;\r\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\r\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\r\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\r\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\r\n        let x = time1 + dx, y = value1 + dy;\r\n        for (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dx += ddx;\r\n            dy += ddy;\r\n            ddx += dddx;\r\n            ddy += dddy;\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    /** Returns the Bezier interpolated value for the specified time.\r\n     * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\r\n     * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\r\n     * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\r\n    getBezierValue (time: number, frameIndex: number, valueOffset: number, i: number) {\r\n        let curves = this.curves;\r\n        if (curves[i] > time) {\r\n            let x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];\r\n            return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n        }\r\n        let n = i + 18/*BEZIER_SIZE*/;\r\n        for (i += 2; i < n; i += 2) {\r\n            if (curves[i] >= time) {\r\n                let x = curves[i - 2], y = curves[i - 1];\r\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n            }\r\n        }\r\n        frameIndex += this.getFrameEntries();\r\n        let x = curves[n - 2], y = curves[n - 1];\r\n        return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\r\n    }\r\n}\r\n/**\r\n * @public\r\n */\r\nexport abstract class CurveTimeline1 extends CurveTimeline {\r\n    constructor (frameCount: number, bezierCount: number, propertyId: string) {\r\n        super(frameCount, bezierCount, [propertyId]);\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 2/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time and value for the specified frame.\r\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n     * @param time The frame time in seconds. */\r\n    setFrame (frame: number, time: number, value: number) {\r\n        frame <<= 1;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*VALUE*/] = value;\r\n    }\r\n\r\n    /** Returns the interpolated value for the specified time. */\r\n    getCurveValue (time: number) {\r\n        let frames = this.frames;\r\n        let i = frames.length - 2;\r\n        for (let ii = 2; ii <= i; ii += 2) {\r\n            if (frames[ii] > time) {\r\n                i = ii - 2;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let curveType = this.curves[i >> 1];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i], value = frames[i + 1/*VALUE*/];\r\n                return value + (time - before) / (frames[i + 2/*ENTRIES*/] - before) * (frames[i + 2/*ENTRIES*/ + 1/*VALUE*/] - value);\r\n            case 1/*STEPPED*/:\r\n                return frames[i + 1/*VALUE*/];\r\n        }\r\n        return this.getBezierValue(time, i, 1/*VALUE*/, curveType - 2/*BEZIER*/);\r\n    }\r\n}\r\n\r\n/** The base class for a {@link CurveTimeline} which sets two properties.\r\n * @public\r\n * */\r\nexport abstract class CurveTimeline2 extends CurveTimeline {\r\n    /** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\r\n     * @param propertyIds Unique identifiers for the properties the timeline modifies. */\r\n    constructor (frameCount: number, bezierCount: number, propertyId1: string, propertyId2: string) {\r\n        super(frameCount, bezierCount, [propertyId1, propertyId2]);\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 3/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time and values for the specified frame.\r\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n     * @param time The frame time in seconds. */\r\n    setFrame (frame: number, time: number, value1: number, value2: number) {\r\n        frame *= 3/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*VALUE1*/] = value1;\r\n        this.frames[frame + 2/*VALUE2*/] = value2;\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#rotation}.\r\n * @public\r\n * */\r\nexport class RotateTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.rotation = bone.data.rotation;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.rotation += (bone.data.rotation - bone.rotation) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.rotation = bone.data.rotation + r * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                r += bone.data.rotation - bone.rotation;\r\n            case MixBlend.add:\r\n                bone.rotation += r * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}.\r\n * @public\r\n * */\r\nexport class TranslateTimeline extends CurveTimeline2 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount,\r\n            Property.x + \"|\" + boneIndex,\r\n            Property.y + \"|\" + boneIndex,\r\n        );\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.x = bone.data.x;\r\n                    bone.y = bone.data.y;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.x += (bone.data.x - bone.x) * alpha;\r\n                    bone.y += (bone.data.y - bone.y) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = 0, y = 0;\r\n        let i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n        let curveType = this.curves[i / 3/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                let t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n                x += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n                y += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                break;\r\n            default:\r\n                x = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.x = bone.data.x + x * alpha;\r\n                bone.y = bone.data.y + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.x += (bone.data.x + x - bone.x) * alpha;\r\n                bone.y += (bone.data.y + y - bone.y) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.x += x * alpha;\r\n                bone.y += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x}.\r\n * @public\r\n * */\r\nexport class TranslateXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.x = bone.data.x;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.x += (bone.data.x - bone.x) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.x = bone.data.x + x * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.x += (bone.data.x + x - bone.x) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.x += x * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x}.\r\n * @public\r\n * */\r\nexport class TranslateYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.y = bone.data.y;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.y += (bone.data.y - bone.y) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let y = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.y = bone.data.y + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.y += (bone.data.y + y - bone.y) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.y += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.\r\n * @public\r\n * */\r\nexport class ScaleTimeline extends CurveTimeline2 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount,\r\n            Property.scaleX + \"|\" + boneIndex,\r\n            Property.scaleY + \"|\" + boneIndex\r\n        );\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.scaleX = bone.data.scaleX;\r\n                    bone.scaleY = bone.data.scaleY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\r\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x, y;\r\n        let i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n        let curveType = this.curves[i / 3/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                let t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n                x += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n                y += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                break;\r\n            default:\r\n                x = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n        x *= bone.data.scaleX;\r\n        y *= bone.data.scaleY;\r\n\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add) {\r\n                bone.scaleX += x - bone.data.scaleX;\r\n                bone.scaleY += y - bone.data.scaleY;\r\n            } else {\r\n                bone.scaleX = x;\r\n                bone.scaleY = y;\r\n            }\r\n        } else {\r\n            let bx = 0, by = 0;\r\n            if (direction == MixDirection.mixOut) {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = bone.data.scaleX;\r\n                        by = bone.data.scaleY;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = bone.scaleX;\r\n                        by = bone.scaleY;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\r\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\r\n                }\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\r\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\r\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\r\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.\r\n * @public\r\n * */\r\nexport class ScaleXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.scaleX = bone.data.scaleX;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = this.getCurveValue(time) * bone.data.scaleX;\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add)\r\n                bone.scaleX += x - bone.data.scaleX;\r\n            else\r\n                bone.scaleX = x;\r\n        } else {\r\n            // Mixing out uses sign of setup or current pose, else use sign of key.\r\n            let bx = 0;\r\n            if (direction == MixDirection.mixOut) {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = bone.data.scaleX;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = bone.scaleX;\r\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\r\n                }\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\r\n                        bone.scaleX = bx + (x - bx) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}.\r\n * @public\r\n * */\r\nexport class ScaleYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.scaleY = bone.data.scaleY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let y = this.getCurveValue(time) * bone.data.scaleY;\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add)\r\n                bone.scaleY += y - bone.data.scaleY;\r\n            else\r\n                bone.scaleY = y;\r\n        } else {\r\n            // Mixing out uses sign of setup or current pose, else use sign of key.\r\n            let by = 0;\r\n            if (direction == MixDirection.mixOut) {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        by = bone.data.scaleY;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        by = bone.scaleY;\r\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\r\n                }\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup:\r\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\r\n                        bone.scaleY = by + (y - by) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class ShearTimeline extends CurveTimeline2 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount,\r\n            Property.shearX + \"|\" + boneIndex,\r\n            Property.shearY + \"|\" + boneIndex\r\n        );\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.shearX = bone.data.shearX;\r\n                    bone.shearY = bone.data.shearY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\r\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = 0, y = 0;\r\n        let i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n        let curveType = this.curves[i / 3/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                let t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n                x += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n                y += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                x = frames[i + 1/*VALUE1*/];\r\n                y = frames[i + 2/*VALUE2*/];\r\n                break;\r\n            default:\r\n                x = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.shearX = bone.data.shearX + x * alpha;\r\n                bone.shearY = bone.data.shearY + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\r\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.shearX += x * alpha;\r\n                bone.shearY += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class ShearXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.shearX = bone.data.shearX;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let x = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.shearX = bone.data.shearX + x * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.shearX += x * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class ShearYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n    boneIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n        super(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\r\n        this.boneIndex = boneIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let bone = skeleton.bones[this.boneIndex];\r\n        if (!bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.shearY = bone.data.shearY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let y = this.getCurveValue(time);\r\n        switch (blend) {\r\n            case MixBlend.setup:\r\n                bone.shearY = bone.data.shearY + y * alpha;\r\n                break;\r\n            case MixBlend.first:\r\n            case MixBlend.replace:\r\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\r\n                break;\r\n            case MixBlend.add:\r\n                bone.shearY += y * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color}.\r\n * @public\r\n * */\r\nexport class RGBATimeline extends CurveTimeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex,\r\n            Property.alpha + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 5/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number, a: number) {\r\n        frame *= 5/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n        this.frames[frame + 4/*A*/] = a;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let color = slot.color;\r\n        if (time < frames[0]) {\r\n            let setup = slot.data.color;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    color.setFromColor(setup);\r\n                    return;\r\n                case MixBlend.first:\r\n                    color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha,\r\n                        (setup.a - color.a) * alpha);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0, a = 0;\r\n        let i = Timeline.search(frames, time, 5/*ENTRIES*/);\r\n        let curveType = this.curves[i / 5/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                let t = (time - before) / (frames[i + 5/*ENTRIES*/] - before);\r\n                r += (frames[i + 5/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 5/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 5/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                a += (frames[i + 5/*ENTRIES*/ + 4/*A*/] - a) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                a = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n        }\r\n        if (alpha == 1)\r\n            color.set(r, g, b, a);\r\n        else {\r\n            if (blend == MixBlend.setup) color.setFromColor(slot.data.color);\r\n            color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color}.\r\n * @public\r\n * */\r\nexport class RGBTimeline extends CurveTimeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 4/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number) {\r\n        frame <<= 2;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let color = slot.color;\r\n        if (time < frames[0]) {\r\n            let setup = slot.data.color;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    color.r = setup.r;\r\n                    color.g = setup.g;\r\n                    color.b = setup.b;\r\n                    return;\r\n                case MixBlend.first:\r\n                    color.r += (setup.r - color.r) * alpha;\r\n                    color.g += (setup.g - color.g) * alpha;\r\n                    color.b += (setup.b - color.b) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0;\r\n        let i = Timeline.search(frames, time, 4/*ENTRIES*/);\r\n        let curveType = this.curves[i >> 2];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                let t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\r\n                r += (frames[i + 4/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 4/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 4/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n        }\r\n        if (alpha == 1) {\r\n            color.r = r;\r\n            color.g = g;\r\n            color.b = b;\r\n        } else {\r\n            if (blend == MixBlend.setup) {\r\n                let setup = slot.data.color;\r\n                color.r = setup.r;\r\n                color.g = setup.g;\r\n                color.b = setup.b;\r\n            }\r\n            color.r += (r - color.r) * alpha;\r\n            color.g += (g - color.g) * alpha;\r\n            color.b += (b - color.b) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}.\r\n * @public\r\n * */\r\nexport class AlphaTimeline extends CurveTimeline1 implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let color = slot.color;\r\n        if (time < this.frames[0]) { // Time is before first frame.\r\n            let setup = slot.data.color;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    color.a = setup.a;\r\n                    return;\r\n                case MixBlend.first:\r\n                    color.a += (setup.a - color.a) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let a = this.getCurveValue(time);\r\n        if (alpha == 1)\r\n            color.a = a;\r\n        else {\r\n            if (blend == MixBlend.setup) color.a = slot.data.color.a;\r\n            color.a += (a - color.a) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting.\r\n * @public\r\n * */\r\nexport class RGBA2Timeline extends CurveTimeline implements SlotTimeline{\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex,\r\n            Property.alpha + \"|\" + slotIndex,\r\n            Property.rgb2 + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 8/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number, a: number, r2: number, g2: number, b2: number) {\r\n        frame <<= 3;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n        this.frames[frame + 4/*A*/] = a;\r\n        this.frames[frame + 5/*R2*/] = r2;\r\n        this.frames[frame + 6/*G2*/] = g2;\r\n        this.frames[frame + 7/*B2*/] = b2;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let light = slot.color, dark = slot.darkColor;\r\n        if (time < frames[0]) {\r\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    light.setFromColor(setupLight);\r\n                    dark.r = setupDark.r;\r\n                    dark.g = setupDark.g;\r\n                    dark.b = setupDark.b;\r\n                    return;\r\n                case MixBlend.first:\r\n                    light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha,\r\n                        (setupLight.a - light.a) * alpha);\r\n                    dark.r += (setupDark.r - dark.r) * alpha;\r\n                    dark.g += (setupDark.g - dark.g) * alpha;\r\n                    dark.b += (setupDark.b - dark.b) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\r\n        let i = Timeline.search(frames, time, 8/*ENTRIES*/);\r\n        let curveType = this.curves[i >> 3];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                r2 = frames[i + 5/*R2*/];\r\n                g2 = frames[i + 6/*G2*/];\r\n                b2 = frames[i + 7/*B2*/];\r\n                let t = (time - before) / (frames[i + 8/*ENTRIES*/] - before);\r\n                r += (frames[i + 8/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 8/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 8/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                a += (frames[i + 8/*ENTRIES*/ + 4/*A*/] - a) * t;\r\n                r2 += (frames[i + 8/*ENTRIES*/ + 5/*R2*/] - r2) * t;\r\n                g2 += (frames[i + 8/*ENTRIES*/ + 6/*G2*/] - g2) * t;\r\n                b2 += (frames[i + 8/*ENTRIES*/ + 7/*B2*/] - b2) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                a = frames[i + 4/*A*/];\r\n                r2 = frames[i + 5/*R2*/];\r\n                g2 = frames[i + 6/*G2*/];\r\n                b2 = frames[i + 7/*B2*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                a = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n                r2 = this.getBezierValue(time, i, 5/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n                g2 = this.getBezierValue(time, i, 6/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n                b2 = this.getBezierValue(time, i, 7/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 6 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (alpha == 1) {\r\n            light.set(r, g, b, a);\r\n            dark.r = r2;\r\n            dark.g = g2;\r\n            dark.b = b2;\r\n        } else {\r\n            if (blend == MixBlend.setup) {\r\n                light.setFromColor(slot.data.color);\r\n                let setupDark = slot.data.darkColor;\r\n                dark.r = setupDark.r;\r\n                dark.g = setupDark.g;\r\n                dark.b = setupDark.b;\r\n            }\r\n            light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\r\n            dark.r += (r2 - dark.r) * alpha;\r\n            dark.g += (g2 - dark.g) * alpha;\r\n            dark.b += (b2 - dark.b) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting.\r\n * @public\r\n * */\r\nexport class RGB2Timeline extends CurveTimeline implements SlotTimeline{\r\n    slotIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.rgb + \"|\" + slotIndex,\r\n            Property.rgb2 + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 7/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\r\n    setFrame (frame: number, time: number, r: number, g: number, b: number, r2: number, g2: number, b2: number) {\r\n        frame *= 7/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*R*/] = r;\r\n        this.frames[frame + 2/*G*/] = g;\r\n        this.frames[frame + 3/*B*/] = b;\r\n        this.frames[frame + 4/*R2*/] = r2;\r\n        this.frames[frame + 5/*G2*/] = g2;\r\n        this.frames[frame + 6/*B2*/] = b2;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        let frames = this.frames;\r\n        let light = slot.color, dark = slot.darkColor;\r\n        if (time < frames[0]) {\r\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    light.r = setupLight.r;\r\n                    light.g = setupLight.g;\r\n                    light.b = setupLight.b;\r\n                    dark.r = setupDark.r;\r\n                    dark.g = setupDark.g;\r\n                    dark.b = setupDark.b;\r\n                    return;\r\n                case MixBlend.first:\r\n                    light.r += (setupLight.r - light.r) * alpha;\r\n                    light.g += (setupLight.g - light.g) * alpha;\r\n                    light.b += (setupLight.b - light.b) * alpha;\r\n                    dark.r += (setupDark.r - dark.r) * alpha;\r\n                    dark.g += (setupDark.g - dark.g) * alpha;\r\n                    dark.b += (setupDark.b - dark.b) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let r = 0, g = 0, b = 0, r2 = 0, g2 = 0, b2 = 0;\r\n        let i = Timeline.search(frames, time, 7/*ENTRIES*/);\r\n        let curveType = this.curves[i / 7/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                r2 = frames[i + 4/*R2*/];\r\n                g2 = frames[i + 5/*G2*/];\r\n                b2 = frames[i + 6/*B2*/];\r\n                let t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\r\n                r += (frames[i + 7/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n                g += (frames[i + 7/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n                b += (frames[i + 7/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n                r2 += (frames[i + 7/*ENTRIES*/ + 4/*R2*/] - r2) * t;\r\n                g2 += (frames[i + 7/*ENTRIES*/ + 5/*G2*/] - g2) * t;\r\n                b2 += (frames[i + 7/*ENTRIES*/ + 6/*B2*/] - b2) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                r = frames[i + 1/*R*/];\r\n                g = frames[i + 2/*G*/];\r\n                b = frames[i + 3/*B*/];\r\n                r2 = frames[i + 4/*R2*/];\r\n                g2 = frames[i + 5/*G2*/];\r\n                b2 = frames[i + 6/*B2*/];\r\n                break;\r\n            default:\r\n                r = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n                g = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                b = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                r2 = this.getBezierValue(time, i, 4/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n                g2 = this.getBezierValue(time, i, 5/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n                b2 = this.getBezierValue(time, i, 6/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (alpha == 1) {\r\n            light.r = r;\r\n            light.g = g;\r\n            light.b = b;\r\n            dark.r = r2;\r\n            dark.g = g2;\r\n            dark.b = b2;\r\n        } else {\r\n            if (blend == MixBlend.setup) {\r\n                let setupLight = slot.data.color, setupDark = slot.data.darkColor;\r\n                light.r = setupLight.r;\r\n                light.g = setupLight.g;\r\n                light.b = setupLight.b;\r\n                dark.r = setupDark.r;\r\n                dark.g = setupDark.g;\r\n                dark.b = setupDark.b;\r\n            }\r\n            light.r += (r - light.r) * alpha;\r\n            light.g += (g - light.g) * alpha;\r\n            light.b += (b - light.b) * alpha;\r\n            dark.r += (r2 - dark.r) * alpha;\r\n            dark.g += (g2 - dark.g) * alpha;\r\n            dark.b += (b2 - dark.b) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#attachment}.\r\n * @public\r\n * */\r\nexport class AttachmentTimeline extends Timeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    /** The attachment name for each key frame. May contain null values to clear the attachment. */\r\n    attachmentNames: Array<string>;\r\n\r\n    constructor (frameCount: number, slotIndex: number) {\r\n        super(frameCount, [\r\n            Property.attachment + \"|\" + slotIndex\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n        this.attachmentNames = new Array<string>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the attachment name for the specified key frame. */\r\n    setFrame (frame: number, time: number, attachmentName: string) {\r\n        this.frames[frame] = time;\r\n        this.attachmentNames[frame] = attachmentName;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        if (direction == MixDirection.mixOut) {\r\n            if (blend == MixBlend.setup) this.setAttachment(skeleton, slot, slot.data.attachmentName);\r\n            return;\r\n        }\r\n\r\n        if (time < this.frames[0]) {\r\n            if (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName);\r\n            return;\r\n        }\r\n\r\n        this.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\r\n    }\r\n\r\n    setAttachment (skeleton: Skeleton, slot: Slot, attachmentName: string) {\r\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\r\n    }\r\n}\r\n\r\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}.\r\n * @public\r\n * */\r\nexport class DeformTimeline extends CurveTimeline implements SlotTimeline {\r\n    slotIndex = 0;\r\n\r\n    /** The attachment that will be deformed. */\r\n    attachment: VertexAttachment = null;\r\n\r\n    /** The vertices for each key frame. */\r\n    vertices: Array<NumberArrayLike> = null;\r\n\r\n    constructor (frameCount: number, bezierCount: number, slotIndex: number, attachment: VertexAttachment) {\r\n        super(frameCount, bezierCount, [\r\n            Property.deform + \"|\" + slotIndex + \"|\" + attachment.id\r\n        ]);\r\n        this.slotIndex = slotIndex;\r\n        this.attachment = attachment;\r\n        this.vertices = new Array<NumberArrayLike>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the vertices for the specified key frame.\r\n     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\r\n    setFrame (frame: number, time: number, vertices: NumberArrayLike) {\r\n        this.frames[frame] = time;\r\n        this.vertices[frame] = vertices;\r\n    }\r\n\r\n    /** @param value1 Ignored (0 is used for a deform timeline).\r\n     * @param value2 Ignored (1 is used for a deform timeline). */\r\n    setBezier (bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\r\n               cy2: number, time2: number, value2: number) {\r\n        let curves = this.curves;\r\n        let i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\r\n        if (value == 0) curves[frame] = 2/*BEZIER*/ + i;\r\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;\r\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;\r\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\r\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\r\n        let x = time1 + dx, y = dy;\r\n        for (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dx += ddx;\r\n            dy += ddy;\r\n            ddx += dddx;\r\n            ddy += dddy;\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    getCurvePercent (time: number, frame: number) {\r\n        let curves = this.curves;\r\n        let i = curves[frame];\r\n        switch (i) {\r\n            case 0/*LINEAR*/:\r\n                let x = this.frames[frame];\r\n                return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\r\n            case 1/*STEPPED*/:\r\n                return 0;\r\n        }\r\n        i -= 2/*BEZIER*/;\r\n        if (curves[i] > time) {\r\n            let x = this.frames[frame];\r\n            return curves[i + 1] * (time - x) / (curves[i] - x);\r\n        }\r\n        let n = i + 18/*BEZIER_SIZE*/;\r\n        for (i += 2; i < n; i += 2) {\r\n            if (curves[i] >= time) {\r\n                let x = curves[i - 2], y = curves[i - 1];\r\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n            }\r\n        }\r\n        let x = curves[n - 2], y = curves[n - 1];\r\n        return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let slot: Slot = skeleton.slots[this.slotIndex];\r\n        if (!slot.bone.active) return;\r\n        let slotAttachment: Attachment = slot.getAttachment();\r\n        if (!(slotAttachment instanceof VertexAttachment) || (<VertexAttachment>slotAttachment).deformAttachment != this.attachment) return;\r\n\r\n        let deform: Array<number> = slot.deform;\r\n        if (deform.length == 0) blend = MixBlend.setup;\r\n\r\n        let vertices = this.vertices;\r\n        let vertexCount = vertices[0].length;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            let vertexAttachment = <VertexAttachment>slotAttachment;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    deform.length = 0;\r\n                    return;\r\n                case MixBlend.first:\r\n                    if (alpha == 1) {\r\n                        deform.length = 0;\r\n                        return;\r\n                    }\r\n                    deform.length = vertexCount;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (var i = 0; i < vertexCount; i++)\r\n                            deform[i] += (setupVertices[i] - deform[i]) * alpha;\r\n                    } else {\r\n                        // Weighted deform offsets.\r\n                        alpha = 1 - alpha;\r\n                        for (var i = 0; i < vertexCount; i++)\r\n                            deform[i] *= alpha;\r\n                    }\r\n            }\r\n            return;\r\n        }\r\n\r\n        deform.length = vertexCount;\r\n        if (time >= frames[frames.length - 1]) { // Time is after last frame.\r\n            let lastVertices = vertices[frames.length - 1];\r\n            if (alpha == 1) {\r\n                if (blend == MixBlend.add) {\r\n                    let vertexAttachment = slotAttachment as VertexAttachment;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions, with alpha.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (let i = 0; i < vertexCount; i++)\r\n                            deform[i] += lastVertices[i] - setupVertices[i];\r\n                    } else {\r\n                        // Weighted deform offsets, with alpha.\r\n                        for (let i = 0; i < vertexCount; i++)\r\n                            deform[i] += lastVertices[i];\r\n                    }\r\n                } else\r\n                    Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\r\n            } else {\r\n                switch (blend) {\r\n                    case MixBlend.setup: {\r\n                        let vertexAttachment = slotAttachment as VertexAttachment;\r\n                        if (!vertexAttachment.bones) {\r\n                            // Unweighted vertex positions, with alpha.\r\n                            let setupVertices = vertexAttachment.vertices;\r\n                            for (let i = 0; i < vertexCount; i++) {\r\n                                let setup = setupVertices[i];\r\n                                deform[i] = setup + (lastVertices[i] - setup) * alpha;\r\n                            }\r\n                        } else {\r\n                            // Weighted deform offsets, with alpha.\r\n                            for (let i = 0; i < vertexCount; i++)\r\n                                deform[i] = lastVertices[i] * alpha;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MixBlend.first:\r\n                    case MixBlend.replace:\r\n                        for (let i = 0; i < vertexCount; i++)\r\n                            deform[i] += (lastVertices[i] - deform[i]) * alpha;\r\n                        break;\r\n                    case MixBlend.add:\r\n                        let vertexAttachment = slotAttachment as VertexAttachment;\r\n                        if (!vertexAttachment.bones) {\r\n                            // Unweighted vertex positions, with alpha.\r\n                            let setupVertices = vertexAttachment.vertices;\r\n                            for (let i = 0; i < vertexCount; i++)\r\n                                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\r\n                        } else {\r\n                            // Weighted deform offsets, with alpha.\r\n                            for (let i = 0; i < vertexCount; i++)\r\n                                deform[i] += lastVertices[i] * alpha;\r\n                        }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        let frame = Timeline.search1(frames, time);\r\n        let percent = this.getCurvePercent(time, frame);\r\n        let prevVertices = vertices[frame];\r\n        let nextVertices = vertices[frame + 1];\r\n\r\n        if (alpha == 1) {\r\n            if (blend == MixBlend.add) {\r\n                let vertexAttachment = slotAttachment as VertexAttachment;\r\n                if (!vertexAttachment.bones) {\r\n                    // Unweighted vertex positions, with alpha.\r\n                    let setupVertices = vertexAttachment.vertices;\r\n                    for (let i = 0; i < vertexCount; i++) {\r\n                        let prev = prevVertices[i];\r\n                        deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\r\n                    }\r\n                } else {\r\n                    // Weighted deform offsets, with alpha.\r\n                    for (let i = 0; i < vertexCount; i++) {\r\n                        let prev = prevVertices[i];\r\n                        deform[i] += prev + (nextVertices[i] - prev) * percent;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < vertexCount; i++) {\r\n                    let prev = prevVertices[i];\r\n                    deform[i] = prev + (nextVertices[i] - prev) * percent;\r\n                }\r\n            }\r\n        } else {\r\n            switch (blend) {\r\n                case MixBlend.setup: {\r\n                    let vertexAttachment = slotAttachment as VertexAttachment;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions, with alpha.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i], setup = setupVertices[i];\r\n                            deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\r\n                        }\r\n                    } else {\r\n                        // Weighted deform offsets, with alpha.\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i];\r\n                            deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case MixBlend.first:\r\n                case MixBlend.replace:\r\n                    for (let i = 0; i < vertexCount; i++) {\r\n                        let prev = prevVertices[i];\r\n                        deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\r\n                    }\r\n                    break;\r\n                case MixBlend.add:\r\n                    let vertexAttachment = slotAttachment as VertexAttachment;\r\n                    if (!vertexAttachment.bones) {\r\n                        // Unweighted vertex positions, with alpha.\r\n                        let setupVertices = vertexAttachment.vertices;\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i];\r\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\r\n                        }\r\n                    } else {\r\n                        // Weighted deform offsets, with alpha.\r\n                        for (let i = 0; i < vertexCount; i++) {\r\n                            let prev = prevVertices[i];\r\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Fires an {@link Event} when specific animation times are reached.\r\n * @public\r\n * */\r\nexport class EventTimeline extends Timeline {\r\n    static propertyIds = [\"\" + Property.event];\r\n\r\n    /** The event for each key frame. */\r\n    events: Array<Event> = null;\r\n\r\n    constructor (frameCount: number) {\r\n        super(frameCount, EventTimeline.propertyIds);\r\n\r\n        this.events = new Array<Event>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the event for the specified key frame. */\r\n    setFrame (frame: number, event: Event) {\r\n        this.frames[frame] = event.time;\r\n        this.events[frame] = event;\r\n    }\r\n\r\n    /** Fires events for frames > `lastTime` and <= `time`. */\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        if (!firedEvents) return;\r\n\r\n        let frames = this.frames;\r\n        let frameCount = this.frames.length;\r\n\r\n        if (lastTime > time) { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        let i = 0;\r\n        if (lastTime < frames[0])\r\n            i = 0;\r\n        else {\r\n            i = Timeline.search1(frames, lastTime) + 1;\r\n            let frameTime = frames[i];\r\n            while (i > 0) { // Fire multiple events with the same frame.\r\n                if (frames[i - 1] != frameTime) break;\r\n                i--;\r\n            }\r\n        }\r\n        for (; i < frameCount && time >= frames[i]; i++)\r\n            firedEvents.push(this.events[i]);\r\n    }\r\n}\r\n\r\n/** Changes a skeleton's {@link Skeleton#drawOrder}.\r\n * @public\r\n * */\r\nexport class DrawOrderTimeline extends Timeline {\r\n    static propertyIds = [\"\" + Property.drawOrder];\r\n\r\n    /** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\r\n    drawOrders: Array<Array<number>> = null;\r\n\r\n    constructor (frameCount: number) {\r\n        super(frameCount, DrawOrderTimeline.propertyIds);\r\n        this.drawOrders = new Array<Array<number>>(frameCount);\r\n    }\r\n\r\n    getFrameCount () {\r\n        return this.frames.length;\r\n    }\r\n\r\n    /** Sets the time in seconds and the draw order for the specified key frame.\r\n     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\r\n     *           draw order. */\r\n    setFrame (frame: number, time: number, drawOrder: Array<number>) {\r\n        this.frames[frame] = time;\r\n        this.drawOrders[frame] = drawOrder;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        if (direction == MixDirection.mixOut) {\r\n            if (blend == MixBlend.setup) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n            return;\r\n        }\r\n\r\n        if (time < this.frames[0]) {\r\n            if (blend == MixBlend.setup || blend == MixBlend.first) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n            return;\r\n        }\r\n\r\n        let drawOrderToSetupIndex = this.drawOrders[Timeline.search1(this.frames, time)];\r\n        if (!drawOrderToSetupIndex)\r\n            Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n        else {\r\n            let drawOrder: Array<Slot> = skeleton.drawOrder;\r\n            let slots: Array<Slot> = skeleton.slots;\r\n            for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n                drawOrder[i] = slots[drawOrderToSetupIndex[i]];\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\r\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}.\r\n * @public\r\n * */\r\nexport class IkConstraintTimeline extends CurveTimeline {\r\n    /** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */\r\n    ikConstraintIndex: number = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, ikConstraintIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.ikConstraint + \"|\" + ikConstraintIndex\r\n        ]);\r\n        this.ikConstraintIndex = ikConstraintIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 6/*ENTRIES*/;\r\n    }\r\n\r\n    /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\r\n    setFrame (frame: number, time: number, mix: number, softness: number, bendDirection: number, compress: boolean, stretch: boolean) {\r\n        frame *= 6/*ENTRIES*/;\r\n        this.frames[frame] = time;\r\n        this.frames[frame + 1/*MIX*/] = mix;\r\n        this.frames[frame + 2/*SOFTNESS*/] = softness;\r\n        this.frames[frame + 3/*BEND_DIRECTION*/] = bendDirection;\r\n        this.frames[frame + 4/*COMPRESS*/] = compress ? 1 : 0;\r\n        this.frames[frame + 5/*STRETCH*/] = stretch ? 1 : 0;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: IkConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.mix = constraint.data.mix;\r\n                    constraint.softness = constraint.data.softness;\r\n                    constraint.bendDirection = constraint.data.bendDirection;\r\n                    constraint.compress = constraint.data.compress;\r\n                    constraint.stretch = constraint.data.stretch;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\r\n                    constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\r\n                    constraint.bendDirection = constraint.data.bendDirection;\r\n                    constraint.compress = constraint.data.compress;\r\n                    constraint.stretch = constraint.data.stretch;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let mix = 0, softness = 0;\r\n        let i = Timeline.search(frames, time, 6/*ENTRIES*/)\r\n        let curveType = this.curves[i / 6/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                mix = frames[i + 1/*MIX*/];\r\n                softness = frames[i + 2/*SOFTNESS*/];\r\n                let t = (time - before) / (frames[i + 6/*ENTRIES*/] - before);\r\n                mix += (frames[i + 6/*ENTRIES*/ + 1/*MIX*/] - mix) * t;\r\n                softness += (frames[i + 6/*ENTRIES*/ + 2/*SOFTNESS*/] - softness) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                mix = frames[i + 1/*MIX*/];\r\n                softness = frames[i + 2/*SOFTNESS*/];\r\n                break;\r\n            default:\r\n                mix = this.getBezierValue(time, i, 1/*MIX*/, curveType - 2/*BEZIER*/);\r\n                softness = this.getBezierValue(time, i, 2/*SOFTNESS*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (blend == MixBlend.setup) {\r\n            constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\r\n            constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\r\n\r\n            if (direction == MixDirection.mixOut) {\r\n                constraint.bendDirection = constraint.data.bendDirection;\r\n                constraint.compress = constraint.data.compress;\r\n                constraint.stretch = constraint.data.stretch;\r\n            } else {\r\n                constraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\r\n                constraint.compress = frames[i + 4/*COMPRESS*/] != 0;\r\n                constraint.stretch = frames[i + 5/*STRETCH*/] != 0;\r\n            }\r\n        } else {\r\n            constraint.mix += (mix - constraint.mix) * alpha;\r\n            constraint.softness += (softness - constraint.softness) * alpha;\r\n            if (direction == MixDirection.mixIn) {\r\n                constraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\r\n                constraint.compress = frames[i + 4/*COMPRESS*/] != 0;\r\n                constraint.stretch = frames[i + 5/*STRETCH*/] != 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\r\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}.\r\n * @public\r\n * */\r\nexport class TransformConstraintTimeline extends CurveTimeline {\r\n    /** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\r\n    transformConstraintIndex: number = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, transformConstraintIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.transformConstraint + \"|\" + transformConstraintIndex\r\n        ]);\r\n        this.transformConstraintIndex = transformConstraintIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 7/*ENTRIES*/;\r\n    }\r\n\r\n    /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\r\n    setFrame (frame: number, time: number, mixRotate: number, mixX: number, mixY: number, mixScaleX: number, mixScaleY: number,\r\n              mixShearY: number) {\r\n        let frames = this.frames;\r\n        frame *= 7/*ENTRIES*/;\r\n        frames[frame] = time;\r\n        frames[frame + 1/*ROTATE*/] = mixRotate;\r\n        frames[frame + 2/*X*/] = mixX;\r\n        frames[frame + 3/*Y*/] = mixY;\r\n        frames[frame + 4/*SCALEX*/] = mixScaleX;\r\n        frames[frame + 5/*SCALEY*/] = mixScaleY;\r\n        frames[frame + 6/*SHEARY*/] = mixShearY;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: TransformConstraint = skeleton.transformConstraints[this.transformConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            let data = constraint.data;\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.mixRotate = data.mixRotate;\r\n                    constraint.mixX = data.mixX;\r\n                    constraint.mixY = data.mixY;\r\n                    constraint.mixScaleX = data.mixScaleX;\r\n                    constraint.mixScaleY = data.mixScaleY;\r\n                    constraint.mixShearY = data.mixShearY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\r\n                    constraint.mixX += (data.mixX - constraint.mixX) * alpha;\r\n                    constraint.mixY += (data.mixY - constraint.mixY) * alpha;\r\n                    constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\r\n                    constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\r\n                    constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let rotate, x, y, scaleX, scaleY, shearY;\r\n        let i = Timeline.search(frames, time, 7/*ENTRIES*/);\r\n        let curveType = this.curves[i / 7/*ENTRIES*/];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                scaleX = frames[i + 4/*SCALEX*/];\r\n                scaleY = frames[i + 5/*SCALEY*/];\r\n                shearY = frames[i + 6/*SHEARY*/];\r\n                let t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\r\n                rotate += (frames[i + 7/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\r\n                x += (frames[i + 7/*ENTRIES*/ + 2/*X*/] - x) * t;\r\n                y += (frames[i + 7/*ENTRIES*/ + 3/*Y*/] - y) * t;\r\n                scaleX += (frames[i + 7/*ENTRIES*/ + 4/*SCALEX*/] - scaleX) * t;\r\n                scaleY += (frames[i + 7/*ENTRIES*/ + 5/*SCALEY*/] - scaleY) * t;\r\n                shearY += (frames[i + 7/*ENTRIES*/ + 6/*SHEARY*/] - shearY) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                scaleX = frames[i + 4/*SCALEX*/];\r\n                scaleY = frames[i + 5/*SCALEY*/];\r\n                shearY = frames[i + 6/*SHEARY*/];\r\n                break;\r\n            default:\r\n                rotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\r\n                x = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n                scaleX = this.getBezierValue(time, i, 4/*SCALEX*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n                scaleY = this.getBezierValue(time, i, 5/*SCALEY*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n                shearY = this.getBezierValue(time, i, 6/*SHEARY*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (blend == MixBlend.setup) {\r\n            let data = constraint.data;\r\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\r\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\r\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\r\n            constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\r\n            constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\r\n            constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\r\n        } else {\r\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\r\n            constraint.mixX += (x - constraint.mixX) * alpha;\r\n            constraint.mixY += (y - constraint.mixY) * alpha;\r\n            constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\r\n            constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\r\n            constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\r\n        }\r\n    }\r\n}\r\n\r\n/** Changes a path constraint's {@link PathConstraint#position}.\r\n * @public\r\n * */\r\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\r\n    /** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */\r\n    pathConstraintIndex: number = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n        super(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\r\n        this.pathConstraintIndex = pathConstraintIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.position = constraint.data.position;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.position += (constraint.data.position - constraint.position) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let position = this.getCurveValue(time);\r\n\r\n        if (blend == MixBlend.setup)\r\n            constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\r\n        else\r\n            constraint.position += (position - constraint.position) * alpha;\r\n    }\r\n}\r\n\r\n/** Changes a path constraint's {@link PathConstraint#spacing}.\r\n * @public\r\n * */\r\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\r\n    /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\r\n    pathConstraintIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n        super(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\r\n        this.pathConstraintIndex = pathConstraintIndex;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.spacing = constraint.data.spacing;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let spacing = this.getCurveValue(time);\r\n\r\n        if (blend == MixBlend.setup)\r\n            constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\r\n        else\r\n            constraint.spacing += (spacing - constraint.spacing) * alpha;\r\n    }\r\n}\r\n\r\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\r\n * {@link PathConstraint#getMixY()}.\r\n * @public\r\n * */\r\nexport class PathConstraintMixTimeline extends CurveTimeline {\r\n    /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\r\n    pathConstraintIndex = 0;\r\n\r\n    constructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n        super(frameCount, bezierCount, [\r\n            Property.pathConstraintMix + \"|\" + pathConstraintIndex\r\n        ]);\r\n        this.pathConstraintIndex = pathConstraintIndex;\r\n    }\r\n\r\n    getFrameEntries () {\r\n        return 4/*ENTRIES*/;\r\n    }\r\n\r\n    setFrame (frame: number, time: number, mixRotate: number, mixX: number, mixY: number) {\r\n        let frames = this.frames;\r\n        frame <<= 2;\r\n        frames[frame] = time;\r\n        frames[frame + 1/*ROTATE*/] = mixRotate;\r\n        frames[frame + 2/*X*/] = mixX;\r\n        frames[frame + 3/*Y*/] = mixY;\r\n    }\r\n\r\n    apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n        let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n        if (!constraint.active) return;\r\n\r\n        let frames = this.frames;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    constraint.mixRotate = constraint.data.mixRotate;\r\n                    constraint.mixX = constraint.data.mixX;\r\n                    constraint.mixY = constraint.data.mixY;\r\n                    return;\r\n                case MixBlend.first:\r\n                    constraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\r\n                    constraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\r\n                    constraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let rotate, x, y;\r\n        let i = Timeline.search(frames, time, 4/*ENTRIES*/);\r\n        let curveType = this.curves[i >> 2];\r\n        switch (curveType) {\r\n            case 0/*LINEAR*/:\r\n                let before = frames[i];\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                let t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\r\n                rotate += (frames[i + 4/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\r\n                x += (frames[i + 4/*ENTRIES*/ + 2/*X*/] - x) * t;\r\n                y += (frames[i + 4/*ENTRIES*/ + 3/*Y*/] - y) * t;\r\n                break;\r\n            case 1/*STEPPED*/:\r\n                rotate = frames[i + 1/*ROTATE*/];\r\n                x = frames[i + 2/*X*/];\r\n                y = frames[i + 3/*Y*/];\r\n                break;\r\n            default:\r\n                rotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\r\n                x = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n                y = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n        }\r\n\r\n        if (blend == MixBlend.setup) {\r\n            let data = constraint.data;\r\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\r\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\r\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\r\n        } else {\r\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\r\n            constraint.mixX += (x - constraint.mixX) * alpha;\r\n            constraint.mixY += (y - constraint.mixY) * alpha;\r\n        }\r\n    }\r\n}\r\n","import {\r\n    IAnimationState,\r\n    IAnimationStateListener,\r\n    ITrackEntry,\r\n    MathUtils,\r\n    MixBlend,\r\n    MixDirection,\r\n    Pool,\r\n    StringSet,\r\n    Utils\r\n} from \"@pixi-spine/base\";\r\nimport {\r\n    Animation,\r\n    AttachmentTimeline,\r\n    DrawOrderTimeline,\r\n    EventTimeline,\r\n    RotateTimeline, Timeline\r\n} from './Animation';\r\nimport {AnimationStateData} from \"./AnimationStateData\";\r\nimport {Event} from './Event';\r\nimport type {Skeleton} from \"./Skeleton\";\r\nimport type {Slot} from \"./Slot\";\r\n\r\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\r\n * multiple animations on top of each other (layering).\r\n *\r\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide.\r\n * @public\r\n * */\r\nexport class AnimationState implements IAnimationState<AnimationStateData> {\r\n    private static emptyAnimation (): Animation {\r\n        if (!_emptyAnimation) _emptyAnimation = new Animation(\"<empty>\", [], 0);\r\n        return _emptyAnimation;\r\n    }\r\n\r\n    /** The AnimationStateData to look up mix durations. */\r\n    data: AnimationStateData = null;\r\n\r\n    /** The list of tracks that currently have animations, which may contain null entries. */\r\n    tracks = new Array<TrackEntry>();\r\n\r\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\r\n     * or faster. Defaults to 1.\r\n     *\r\n     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\r\n    timeScale = 1;\r\n    unkeyedState = 0;\r\n\r\n    events = new Array<Event>();\r\n    listeners = new Array<AnimationStateListener>();\r\n    queue = new EventQueue(this);\r\n    propertyIDs = new StringSet();\r\n    animationsChanged = false;\r\n\r\n    trackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\r\n\r\n    constructor (data: AnimationStateData) {\r\n        this.data = data;\r\n    }\r\n\r\n    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\r\n    update (delta: number) {\r\n        delta *= this.timeScale;\r\n        let tracks = this.tracks;\r\n        for (let i = 0, n = tracks.length; i < n; i++) {\r\n            let current = tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.animationLast = current.nextAnimationLast;\r\n            current.trackLast = current.nextTrackLast;\r\n\r\n            let currentDelta = delta * current.timeScale;\r\n\r\n            if (current.delay > 0) {\r\n                current.delay -= currentDelta;\r\n                if (current.delay > 0) continue;\r\n                currentDelta = -current.delay;\r\n                current.delay = 0;\r\n            }\r\n\r\n            let next = current.next;\r\n            if (next) {\r\n                // When the next entry's delay is passed, change to the next entry, preserving leftover time.\r\n                let nextTime = current.trackLast - next.delay;\r\n                if (nextTime >= 0) {\r\n                    next.delay = 0;\r\n                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\r\n                    current.trackTime += currentDelta;\r\n                    this.setCurrent(i, next, true);\r\n                    while (next.mixingFrom) {\r\n                        next.mixTime += delta;\r\n                        next = next.mixingFrom;\r\n                    }\r\n                    continue;\r\n                }\r\n            } else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\r\n                tracks[i] = null;\r\n                this.queue.end(current);\r\n                this.clearNext(current);\r\n                continue;\r\n            }\r\n            if (current.mixingFrom && this.updateMixingFrom(current, delta)) {\r\n                // End mixing from entries once all have completed.\r\n                let from = current.mixingFrom;\r\n                current.mixingFrom = null;\r\n                if (from) from.mixingTo = null;\r\n                while (from) {\r\n                    this.queue.end(from);\r\n                    from = from.mixingFrom;\r\n                }\r\n            }\r\n\r\n            current.trackTime += currentDelta;\r\n        }\r\n\r\n        this.queue.drain();\r\n    }\r\n\r\n    /** Returns true when all mixing from entries are complete. */\r\n    updateMixingFrom (to: TrackEntry, delta: number): boolean {\r\n        let from = to.mixingFrom;\r\n        if (!from) return true;\r\n\r\n        let finished = this.updateMixingFrom(from, delta);\r\n\r\n        from.animationLast = from.nextAnimationLast;\r\n        from.trackLast = from.nextTrackLast;\r\n\r\n        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\r\n        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\r\n            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\r\n            if (from.totalAlpha == 0 || to.mixDuration == 0) {\r\n                to.mixingFrom = from.mixingFrom;\r\n                if (from.mixingFrom) from.mixingFrom.mixingTo = to;\r\n                to.interruptAlpha = from.interruptAlpha;\r\n                this.queue.end(from);\r\n            }\r\n            return finished;\r\n        }\r\n\r\n        from.trackTime += delta * from.timeScale;\r\n        to.mixTime += delta;\r\n        return false;\r\n    }\r\n\r\n    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\r\n     * animation state can be applied to multiple skeletons to pose them identically.\r\n     * @returns True if any animations were applied. */\r\n    apply (skeleton: Skeleton): boolean {\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        if (this.animationsChanged) this._animationsChanged();\r\n\r\n        let events = this.events;\r\n        let tracks = this.tracks;\r\n        let applied = false;\r\n\r\n        for (let i = 0, n = tracks.length; i < n; i++) {\r\n            let current = tracks[i];\r\n            if (!current || current.delay > 0) continue;\r\n            applied = true;\r\n            let blend: MixBlend = i == 0 ? MixBlend.first : current.mixBlend;\r\n\r\n            // Apply mixing from entries first.\r\n            let mix = current.alpha;\r\n            if (current.mixingFrom)\r\n                mix *= this.applyMixingFrom(current, skeleton, blend);\r\n            else if (current.trackTime >= current.trackEnd && !current.next)\r\n                mix = 0;\r\n\r\n            // Apply current entry.\r\n            let animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;\r\n            let applyEvents = events;\r\n            if (current.reverse) {\r\n                applyTime = current.animation.duration - applyTime;\r\n                applyEvents = null;\r\n            }\r\n            let timelines = current.animation.timelines;\r\n            let timelineCount = timelines.length;\r\n            if ((i == 0 && mix == 1) || blend == MixBlend.add) {\r\n                for (let ii = 0; ii < timelineCount; ii++) {\r\n                    // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\r\n                    // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\r\n                    // (https://github.com/pixijs/pixi-spine/issues/302)\r\n                    Utils.webkit602BugfixHelper(mix, blend);\r\n                    var timeline = timelines[ii];\r\n                    if (timeline instanceof AttachmentTimeline)\r\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\r\n                    else\r\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\r\n                }\r\n            } else {\r\n                let timelineMode = current.timelineMode;\r\n\r\n                let firstFrame = current.timelinesRotation.length != timelineCount << 1;\r\n                if (firstFrame) current.timelinesRotation.length = timelineCount << 1;\r\n\r\n                for (let ii = 0; ii < timelineCount; ii++) {\r\n                    let timeline = timelines[ii];\r\n                    let timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\r\n                    if (timeline instanceof RotateTimeline) {\r\n                        this.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\r\n                    } else if (timeline instanceof AttachmentTimeline) {\r\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\r\n                    } else {\r\n                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n                        Utils.webkit602BugfixHelper(mix, blend);\r\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\r\n                    }\r\n                }\r\n            }\r\n            this.queueEvents(current, animationTime);\r\n            events.length = 0;\r\n            current.nextAnimationLast = animationTime;\r\n            current.nextTrackLast = current.trackTime;\r\n        }\r\n\r\n        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\r\n        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\r\n        // the time is before the first key).\r\n        var setupState = this.unkeyedState + SETUP;\r\n        var slots = skeleton.slots;\r\n        for (var i = 0, n = skeleton.slots.length; i < n; i++) {\r\n            var slot = slots[i];\r\n            if (slot.attachmentState == setupState) {\r\n                var attachmentName = slot.data.attachmentName;\r\n                slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\r\n            }\r\n        }\r\n        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\r\n\r\n        this.queue.drain();\r\n        return applied;\r\n    }\r\n\r\n    applyMixingFrom (to: TrackEntry, skeleton: Skeleton, blend: MixBlend) {\r\n        let from = to.mixingFrom;\r\n        if (from.mixingFrom) this.applyMixingFrom(from, skeleton, blend);\r\n\r\n        let mix = 0;\r\n        if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\r\n            mix = 1;\r\n            if (blend == MixBlend.first) blend = MixBlend.setup;\r\n        } else {\r\n            mix = to.mixTime / to.mixDuration;\r\n            if (mix > 1) mix = 1;\r\n            if (blend != MixBlend.first) blend = from.mixBlend;\r\n        }\r\n\r\n        let attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\r\n        let timelines = from.animation.timelines;\r\n        let timelineCount = timelines.length;\r\n        let alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\r\n        let animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;\r\n        let events = null;\r\n        if (from.reverse)\r\n            applyTime = from.animation.duration - applyTime;\r\n        else if (mix < from.eventThreshold)\r\n            events = this.events;\r\n\r\n        if (blend == MixBlend.add) {\r\n            for (let i = 0; i < timelineCount; i++)\r\n                timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\r\n        } else {\r\n            let timelineMode = from.timelineMode;\r\n            let timelineHoldMix = from.timelineHoldMix;\r\n\r\n            let firstFrame = from.timelinesRotation.length != timelineCount << 1;\r\n            if (firstFrame) from.timelinesRotation.length = timelineCount << 1;\r\n\r\n            from.totalAlpha = 0;\r\n            for (let i = 0; i < timelineCount; i++) {\r\n                let timeline = timelines[i];\r\n                let direction = MixDirection.mixOut;\r\n                let timelineBlend: MixBlend;\r\n                let alpha = 0;\r\n                switch (timelineMode[i]) {\r\n                    case SUBSEQUENT:\r\n                        if (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\r\n                        timelineBlend = blend;\r\n                        alpha = alphaMix;\r\n                        break;\r\n                    case FIRST:\r\n                        timelineBlend = MixBlend.setup;\r\n                        alpha = alphaMix;\r\n                        break;\r\n                    case HOLD_SUBSEQUENT:\r\n                        timelineBlend = blend;\r\n                        alpha = alphaHold;\r\n                        break;\r\n                    case HOLD_FIRST:\r\n                        timelineBlend = MixBlend.setup;\r\n                        alpha = alphaHold;\r\n                        break;\r\n                    default:\r\n                        timelineBlend = MixBlend.setup;\r\n                        let holdMix = timelineHoldMix[i];\r\n                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\r\n                        break;\r\n                }\r\n                from.totalAlpha += alpha;\r\n\r\n                if (timeline instanceof RotateTimeline)\r\n                    this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\r\n                else if (timeline instanceof AttachmentTimeline)\r\n                    this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);\r\n                else {\r\n                    // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n                    Utils.webkit602BugfixHelper(alpha, blend);\r\n                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\r\n                        direction = MixDirection.mixIn;\r\n                    timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (to.mixDuration > 0) this.queueEvents(from, animationTime);\r\n        this.events.length = 0;\r\n        from.nextAnimationLast = animationTime;\r\n        from.nextTrackLast = from.trackTime;\r\n\r\n        return mix;\r\n    }\r\n\r\n    applyAttachmentTimeline (timeline: AttachmentTimeline, skeleton: Skeleton, time: number, blend: MixBlend, attachments: boolean) {\r\n        var slot = skeleton.slots[timeline.slotIndex];\r\n        if (!slot.bone.active) return;\r\n\r\n        if (time < timeline.frames[0]) { // Time is before first frame.\r\n            if (blend == MixBlend.setup || blend == MixBlend.first)\r\n                this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\r\n        } else\r\n            this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\r\n\r\n        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\r\n        if (slot.attachmentState <= this.unkeyedState) slot.attachmentState = this.unkeyedState + SETUP;\r\n    }\r\n\r\n    setAttachment (skeleton: Skeleton, slot: Slot, attachmentName: string, attachments: boolean) {\r\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\r\n        if (attachments) slot.attachmentState = this.unkeyedState + CURRENT;\r\n    }\r\n\r\n    applyRotateTimeline (timeline: RotateTimeline, skeleton: Skeleton, time: number, alpha: number, blend: MixBlend,\r\n                         timelinesRotation: Array<number>, i: number, firstFrame: boolean) {\r\n\r\n        if (firstFrame) timelinesRotation[i] = 0;\r\n\r\n        if (alpha == 1) {\r\n            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\r\n            return;\r\n        }\r\n\r\n        let bone = skeleton.bones[timeline.boneIndex];\r\n        if (!bone.active) return;\r\n        let frames = timeline.frames;\r\n        let r1 = 0, r2 = 0;\r\n        if (time < frames[0]) {\r\n            switch (blend) {\r\n                case MixBlend.setup:\r\n                    bone.rotation = bone.data.rotation;\r\n                default:\r\n                    return;\r\n                case MixBlend.first:\r\n                    r1 = bone.rotation;\r\n                    r2 = bone.data.rotation;\r\n            }\r\n        } else {\r\n            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\r\n            r2 = bone.data.rotation + timeline.getCurveValue(time);\r\n        }\r\n\r\n        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\r\n        let total = 0, diff = r2 - r1;\r\n        diff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\r\n        if (diff == 0) {\r\n            total = timelinesRotation[i];\r\n        } else {\r\n            let lastTotal = 0, lastDiff = 0;\r\n            if (firstFrame) {\r\n                lastTotal = 0;\r\n                lastDiff = diff;\r\n            } else {\r\n                lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\r\n                lastDiff = timelinesRotation[i + 1]; // Difference between bones.\r\n            }\r\n            let current = diff > 0, dir = lastTotal >= 0;\r\n            // Detect cross at 0 (not 180).\r\n            if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\r\n                // A cross after a 360 rotation is a loop.\r\n                if (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\r\n                dir = current;\r\n            }\r\n            total = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\r\n            if (dir != current) total += 360 * MathUtils.signum(lastTotal);\r\n            timelinesRotation[i] = total;\r\n        }\r\n        timelinesRotation[i + 1] = diff;\r\n        bone.rotation = r1 + total * alpha;\r\n    }\r\n\r\n    queueEvents (entry: TrackEntry, animationTime: number) {\r\n        let animationStart = entry.animationStart, animationEnd = entry.animationEnd;\r\n        let duration = animationEnd - animationStart;\r\n        let trackLastWrapped = entry.trackLast % duration;\r\n\r\n        // Queue events before complete.\r\n        let events = this.events;\r\n        let i = 0, n = events.length;\r\n        for (; i < n; i++) {\r\n            let event = events[i];\r\n            if (event.time < trackLastWrapped) break;\r\n            if (event.time > animationEnd) continue; // Discard events outside animation start/end.\r\n            this.queue.event(entry, event);\r\n        }\r\n\r\n        // Queue complete if completed a loop iteration or the animation.\r\n        let complete = false;\r\n        if (entry.loop)\r\n            complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\r\n        else\r\n            complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\r\n        if (complete) this.queue.complete(entry);\r\n\r\n        // Queue events after complete.\r\n        for (; i < n; i++) {\r\n            let event = events[i];\r\n            if (event.time < animationStart) continue; // Discard events outside animation start/end.\r\n            this.queue.event(entry, event);\r\n        }\r\n    }\r\n\r\n    /** Removes all animations from all tracks, leaving skeletons in their current pose.\r\n     *\r\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\r\n     * rather than leaving them in their current pose. */\r\n    clearTracks () {\r\n        let oldDrainDisabled = this.queue.drainDisabled;\r\n        this.queue.drainDisabled = true;\r\n        for (let i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n        this.queue.drainDisabled = oldDrainDisabled;\r\n        this.queue.drain();\r\n    }\r\n\r\n    /** Removes all animations from the track, leaving skeletons in their current pose.\r\n     *\r\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\r\n     * rather than leaving them in their current pose. */\r\n    clearTrack (trackIndex: number) {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        let current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        this.queue.end(current);\r\n\r\n        this.clearNext(current);\r\n\r\n        let entry = current;\r\n        while (true) {\r\n            let from = entry.mixingFrom;\r\n            if (!from) break;\r\n            this.queue.end(from);\r\n            entry.mixingFrom = null;\r\n            entry.mixingTo = null;\r\n            entry = from;\r\n        }\r\n\r\n        this.tracks[current.trackIndex] = null;\r\n\r\n        this.queue.drain();\r\n    }\r\n\r\n    setCurrent (index: number, current: TrackEntry, interrupt: boolean) {\r\n        let from = this.expandToIndex(index);\r\n        this.tracks[index] = current;\r\n        current.previous = null;\r\n\r\n        if (from) {\r\n            if (interrupt) this.queue.interrupt(from);\r\n            current.mixingFrom = from;\r\n            from.mixingTo = current;\r\n            current.mixTime = 0;\r\n\r\n            // Store the interrupted mix percentage.\r\n            if (from.mixingFrom && from.mixDuration > 0)\r\n                current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\r\n\r\n            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\r\n        }\r\n\r\n        this.queue.start(current);\r\n    }\r\n\r\n    /** Sets an animation by name.\r\n     *\r\n     * See {@link #setAnimationWith()}. */\r\n    setAnimation (trackIndex: number, animationName: string, loop: boolean = false) {\r\n        let animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw new Error(\"Animation not found: \" + animationName);\r\n        return this.setAnimationWith(trackIndex, animation, loop);\r\n    }\r\n\r\n    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\r\n     * applied to a skeleton, it is replaced (not mixed from).\r\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\r\n     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\r\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n    setAnimationWith (trackIndex: number, animation: Animation, loop: boolean = false) {\r\n        if (!animation) throw new Error(\"animation cannot be null.\");\r\n        let interrupt = true;\r\n        let current = this.expandToIndex(trackIndex);\r\n        if (current) {\r\n            if (current.nextTrackLast == -1) {\r\n                // Don't mix from an entry that was never applied.\r\n                this.tracks[trackIndex] = current.mixingFrom;\r\n                this.queue.interrupt(current);\r\n                this.queue.end(current);\r\n                this.clearNext(current);\r\n                current = current.mixingFrom;\r\n                interrupt = false;\r\n            } else\r\n                this.clearNext(current);\r\n        }\r\n        let entry = this.trackEntry(trackIndex, animation, loop, current);\r\n        this.setCurrent(trackIndex, entry, interrupt);\r\n        this.queue.drain();\r\n        return entry;\r\n    }\r\n\r\n    /** Queues an animation by name.\r\n     *\r\n     * See {@link #addAnimationWith()}. */\r\n    addAnimation (trackIndex: number, animationName: string, loop: boolean = false, delay: number = 0) {\r\n        let animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw new Error(\"Animation not found: \" + animationName);\r\n        return this.addAnimationWith(trackIndex, animation, loop, delay);\r\n    }\r\n\r\n    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\r\n     * equivalent to calling {@link #setAnimationWith()}.\r\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\r\n     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\r\n     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\r\n     *           previous entry is looping, its next loop completion is used instead of its duration.\r\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n    addAnimationWith (trackIndex: number, animation: Animation, loop: boolean = false, delay: number = 0) {\r\n        if (!animation) throw new Error(\"animation cannot be null.\");\r\n\r\n        let last = this.expandToIndex(trackIndex);\r\n        if (last) {\r\n            while (last.next)\r\n                last = last.next;\r\n        }\r\n\r\n        let entry = this.trackEntry(trackIndex, animation, loop, last);\r\n\r\n        if (!last) {\r\n            this.setCurrent(trackIndex, entry, true);\r\n            this.queue.drain();\r\n        } else {\r\n            last.next = entry;\r\n            entry.previous = last;\r\n            if (delay <= 0) delay += last.getTrackComplete() - entry.mixDuration;\r\n        }\r\n\r\n        entry.delay = delay;\r\n        return entry;\r\n    }\r\n\r\n    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\r\n     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\r\n     *\r\n     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\r\n     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\r\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\r\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\r\n     * 0 still mixes out over one frame.\r\n     *\r\n     * Mixing in is done by first setting an empty animation, then adding an animation using\r\n     * {@link #addAnimation()} and on the returned track entry, set the\r\n     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\r\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\r\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\r\n    setEmptyAnimation (trackIndex: number, mixDuration: number = 0) {\r\n        let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\r\n        entry.mixDuration = mixDuration;\r\n        entry.trackEnd = mixDuration;\r\n        return entry;\r\n    }\r\n\r\n    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\r\n     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\r\n     * {@link #setEmptyAnimation()}.\r\n     *\r\n     * See {@link #setEmptyAnimation()}.\r\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\r\n     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\r\n     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\r\n     *           loop completion is used instead of its duration.\r\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n    addEmptyAnimation (trackIndex: number, mixDuration: number = 0, delay: number = 0) {\r\n        let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\r\n        if (delay <= 0) entry.delay += entry.mixDuration - mixDuration;\r\n        entry.mixDuration = mixDuration;\r\n        entry.trackEnd = mixDuration;\r\n        return entry;\r\n    }\r\n\r\n    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\r\n     * duration. */\r\n    setEmptyAnimations (mixDuration: number = 0) {\r\n        let oldDrainDisabled = this.queue.drainDisabled;\r\n        this.queue.drainDisabled = true;\r\n        for (let i = 0, n = this.tracks.length; i < n; i++) {\r\n            let current = this.tracks[i];\r\n            if (current) this.setEmptyAnimation(current.trackIndex, mixDuration);\r\n        }\r\n        this.queue.drainDisabled = oldDrainDisabled;\r\n        this.queue.drain();\r\n    }\r\n\r\n    expandToIndex (index: number) {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        Utils.ensureArrayCapacity(this.tracks, index + 1, null);\r\n        this.tracks.length = index + 1;\r\n        return null;\r\n    }\r\n\r\n    /** @param last May be null. */\r\n    trackEntry (trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry) {\r\n        let entry = this.trackEntryPool.obtain();\r\n        entry.reset();\r\n        entry.trackIndex = trackIndex;\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.holdPrevious = false;\r\n\r\n        entry.eventThreshold = 0;\r\n        entry.attachmentThreshold = 0;\r\n        entry.drawOrderThreshold = 0;\r\n\r\n        entry.animationStart = 0;\r\n        entry.animationEnd = animation.duration;\r\n        entry.animationLast = -1;\r\n        entry.nextAnimationLast = -1;\r\n\r\n        entry.delay = 0;\r\n        entry.trackTime = 0;\r\n        entry.trackLast = -1;\r\n        entry.nextTrackLast = -1;\r\n        entry.trackEnd = Number.MAX_VALUE;\r\n        entry.timeScale = 1;\r\n\r\n        entry.alpha = 1;\r\n        entry.interruptAlpha = 1;\r\n        entry.mixTime = 0;\r\n        entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\r\n        entry.mixBlend = MixBlend.replace;\r\n        return entry;\r\n    }\r\n\r\n    /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\r\n    clearNext (entry: TrackEntry) {\r\n        let next = entry.next;\r\n        while (next) {\r\n            this.queue.dispose(next);\r\n            next = next.next;\r\n        }\r\n        entry.next = null;\r\n    }\r\n\r\n    _animationsChanged () {\r\n        this.animationsChanged = false;\r\n\r\n        this.propertyIDs.clear();\r\n        let tracks = this.tracks;\r\n        for (let i = 0, n = tracks.length; i < n; i++) {\r\n            let entry = tracks[i];\r\n            if (!entry) continue;\r\n            while (entry.mixingFrom)\r\n                entry = entry.mixingFrom;\r\n            do {\r\n                if (!entry.mixingTo || entry.mixBlend != MixBlend.add) this.computeHold(entry);\r\n                entry = entry.mixingTo;\r\n            } while (entry);\r\n        }\r\n    }\r\n\r\n    computeHold (entry: TrackEntry) {\r\n        let to = entry.mixingTo;\r\n        let timelines = entry.animation.timelines;\r\n        let timelinesCount = entry.animation.timelines.length;\r\n        let timelineMode = entry.timelineMode;\r\n        timelineMode.length = timelinesCount;\r\n        let timelineHoldMix = entry.timelineHoldMix;\r\n        timelineHoldMix.length = 0;\r\n        let propertyIDs = this.propertyIDs;\r\n\r\n        if (to && to.holdPrevious) {\r\n            for (let i = 0; i < timelinesCount; i++)\r\n                timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\r\n            return;\r\n        }\r\n\r\n        outer:\r\n            for (let i = 0; i < timelinesCount; i++) {\r\n                let timeline = timelines[i];\r\n                let ids = timeline.getPropertyIds();\r\n                if (!propertyIDs.addAll(ids))\r\n                    timelineMode[i] = SUBSEQUENT;\r\n                else if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\r\n                    || timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {\r\n                    timelineMode[i] = FIRST;\r\n                } else {\r\n                    for (let next = to.mixingTo; next; next = next.mixingTo) {\r\n                        if (next.animation.hasTimeline(ids)) continue;\r\n                        if (entry.mixDuration > 0) {\r\n                            timelineMode[i] = HOLD_MIX;\r\n                            timelineHoldMix[i] = next;\r\n                            continue outer;\r\n                        }\r\n                        break;\r\n                    }\r\n                    timelineMode[i] = HOLD_FIRST;\r\n                }\r\n            }\r\n    }\r\n\r\n    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\r\n    getCurrent (trackIndex: number) {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n\r\n    /** Adds a listener to receive events for all track entries. */\r\n    addListener (listener: AnimationStateListener) {\r\n        if (!listener) throw new Error(\"listener cannot be null.\");\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    /** Removes the listener added with {@link #addListener()}. */\r\n    removeListener (listener: AnimationStateListener) {\r\n        let index = this.listeners.indexOf(listener);\r\n        if (index >= 0) this.listeners.splice(index, 1);\r\n    }\r\n\r\n    /** Removes all listeners added with {@link #addListener()}. */\r\n    clearListeners () {\r\n        this.listeners.length = 0;\r\n    }\r\n\r\n    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\r\n     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\r\n     * are not wanted because new animations are being set. */\r\n    clearListenerNotifications () {\r\n        this.queue.clear();\r\n    }\r\n\r\n    //deprecated stuff\r\n    onComplete: (trackIndex: number, loopCount: number) => any;\r\n    onEvent: (trackIndex: number, event: Event) => any;\r\n    onStart: (trackIndex: number) => any;\r\n    onEnd: (trackIndex: number) => any;\r\n\r\n    private static deprecatedWarning1: boolean = false;\r\n\r\n    setAnimationByName(trackIndex: number, animationName: string, loop: boolean) {\r\n        if (!AnimationState.deprecatedWarning1) {\r\n            AnimationState.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.\");\r\n        }\r\n        this.setAnimation(trackIndex, animationName, loop);\r\n    }\r\n\r\n    private static deprecatedWarning2: boolean = false;\r\n\r\n    addAnimationByName(trackIndex: number, animationName: string, loop: boolean, delay: number) {\r\n        if (!AnimationState.deprecatedWarning2) {\r\n            AnimationState.deprecatedWarning2 = true;\r\n            console.warn(\"Spine Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.\");\r\n        }\r\n        this.addAnimation(trackIndex, animationName, loop, delay);\r\n    }\r\n\r\n    private static deprecatedWarning3: boolean = false;\r\n\r\n    hasAnimation(animationName: string): boolean {\r\n        let animation = this.data.skeletonData.findAnimation(animationName);\r\n        return animation !== null;\r\n    }\r\n\r\n    hasAnimationByName(animationName: string): boolean {\r\n        if (!AnimationState.deprecatedWarning3) {\r\n            AnimationState.deprecatedWarning3 = true;\r\n            console.warn(\"Spine Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.\");\r\n        }\r\n        return this.hasAnimation(animationName);\r\n    }\r\n}\r\n\r\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\r\n *\r\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs.\r\n * @public\r\n * */\r\nexport class TrackEntry implements ITrackEntry {\r\n    /** The animation to apply for this track entry. */\r\n    animation: Animation = null;\r\n\r\n    previous: TrackEntry = null;\r\n\r\n    /** The animation queued to start after this animation, or null. `next` makes up a linked list. */\r\n    next: TrackEntry = null;\r\n\r\n    /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\r\n     * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\r\n    mixingFrom: TrackEntry = null;\r\n\r\n    /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\r\n     * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\r\n    mixingTo: TrackEntry = null;\r\n\r\n    /** The listener for events generated by this track entry, or null.\r\n     *\r\n     * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\r\n     * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\r\n    listener: AnimationStateListener = null;\r\n\r\n    /** The index of the track where this track entry is either current or queued.\r\n     *\r\n     * See {@link AnimationState#getCurrent()}. */\r\n    trackIndex: number = 0;\r\n\r\n    /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\r\n     * duration. */\r\n    loop: boolean = false;\r\n\r\n    /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\r\n     * of being mixed out.\r\n     *\r\n     * When mixing between animations that key the same property, if a lower track also keys that property then the value will\r\n     * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\r\n     * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\r\n     * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\r\n     * keys the property, only when a higher track also keys the property.\r\n     *\r\n     * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\r\n     * previous animation. */\r\n    holdPrevious: boolean = false;\r\n\r\n    reverse: boolean = false;\r\n\r\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\r\n     * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\r\n     * timelines are not applied while this animation is being mixed out. */\r\n    eventThreshold: number = 0;\r\n\r\n    /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\r\n     * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\r\n     * 0, so attachment timelines are not applied while this animation is being mixed out. */\r\n    attachmentThreshold: number = 0;\r\n\r\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\r\n     * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\r\n     * so draw order timelines are not applied while this animation is being mixed out. */\r\n    drawOrderThreshold: number = 0;\r\n\r\n    /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\r\n     *\r\n     * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\r\n     * value to prevent timeline keys before the start time from triggering. */\r\n    animationStart: number = 0;\r\n\r\n    /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\r\n     * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\r\n    animationEnd: number = 0;\r\n\r\n\r\n    /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\r\n     * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\r\n     * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\r\n     * is applied. */\r\n    animationLast: number = 0;\r\n\r\n    nextAnimationLast: number = 0;\r\n\r\n    /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\r\n     * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\r\n     * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\r\n     * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\r\n     *\r\n     * {@link #timeScale} affects the delay. */\r\n    delay: number = 0;\r\n\r\n    /** Current time in seconds this track entry has been the current track entry. The track time determines\r\n     * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\r\n     * looping. */\r\n    trackTime: number = 0;\r\n\r\n    trackLast: number = 0; nextTrackLast: number = 0;\r\n\r\n    /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\r\n     * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\r\n     * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\r\n     * properties keyed by the animation are set to the setup pose and the track is cleared.\r\n     *\r\n     * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\r\n     * abruptly cease being applied. */\r\n    trackEnd: number = 0;\r\n\r\n    /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\r\n     * faster. Defaults to 1.\r\n     *\r\n     * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\r\n     * match the animation speed.\r\n     *\r\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\r\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\r\n     * the time scale is not 1, the delay may need to be adjusted.\r\n     *\r\n     * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\r\n    timeScale: number = 0;\r\n\r\n    /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\r\n     * to 1, which overwrites the skeleton's current pose with this animation.\r\n     *\r\n     * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\r\n     * use alpha on track 0 if the skeleton pose is from the last frame render. */\r\n    alpha: number = 0;\r\n\r\n    /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\r\n     * slightly more than `mixDuration` when the mix is complete. */\r\n    mixTime: number = 0;\r\n\r\n    /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\r\n     * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\r\n     *\r\n     * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\r\n     * properties it was animating.\r\n     *\r\n     * The `mixDuration` can be set manually rather than use the value from\r\n     * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\r\n     * track entry only before {@link AnimationState#update(float)} is first called.\r\n     *\r\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\r\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\r\n     * afterward. */\r\n    mixDuration: number = 0; interruptAlpha: number = 0; totalAlpha: number = 0;\r\n\r\n    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\r\n     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\r\n     * the values from the lower tracks.\r\n     *\r\n     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\r\n     * called. */\r\n    mixBlend = MixBlend.replace;\r\n    timelineMode = new Array<number>();\r\n    timelineHoldMix = new Array<TrackEntry>();\r\n    timelinesRotation = new Array<number>();\r\n\r\n    reset () {\r\n        this.next = null;\r\n        this.previous = null;\r\n        this.mixingFrom = null;\r\n        this.mixingTo = null;\r\n        this.animation = null;\r\n        this.listener = null;\r\n        this.timelineMode.length = 0;\r\n        this.timelineHoldMix.length = 0;\r\n        this.timelinesRotation.length = 0;\r\n    }\r\n\r\n    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\r\n     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\r\n     * `animationStart` time. */\r\n    getAnimationTime () {\r\n        if (this.loop) {\r\n            let duration = this.animationEnd - this.animationStart;\r\n            if (duration == 0) return this.animationStart;\r\n            return (this.trackTime % duration) + this.animationStart;\r\n        }\r\n        return Math.min(this.trackTime + this.animationStart, this.animationEnd);\r\n    }\r\n\r\n    setAnimationLast (animationLast: number) {\r\n        this.animationLast = animationLast;\r\n        this.nextAnimationLast = animationLast;\r\n    }\r\n\r\n    /** Returns true if at least one loop has been completed.\r\n     *\r\n     * See {@link AnimationStateListener#complete()}. */\r\n    isComplete () {\r\n        return this.trackTime >= this.animationEnd - this.animationStart;\r\n    }\r\n\r\n    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\r\n     * long way around when using {@link #alpha} and starting animations on other tracks.\r\n     *\r\n     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\r\n     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\r\n     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\r\n     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\r\n    resetRotationDirections () {\r\n        this.timelinesRotation.length = 0;\r\n    }\r\n\r\n    getTrackComplete () {\r\n        let duration = this.animationEnd - this.animationStart;\r\n        if (duration != 0) {\r\n            if (this.loop) return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\r\n            if (this.trackTime < duration) return duration; // Before duration.\r\n        }\r\n        return this.trackTime; // Next update.\r\n    }\r\n\r\n    //deprecated stuff\r\n    onComplete: (trackIndex: number, loopCount: number) => any;\r\n    onEvent: (trackIndex: number, event: Event) => any;\r\n    onStart: (trackIndex: number) => any;\r\n    onEnd: (trackIndex: number) => any;\r\n\r\n    private static deprecatedWarning1: Boolean = false;\r\n    private static deprecatedWarning2: Boolean = false;\r\n\r\n    get time() {\r\n        if (!TrackEntry.deprecatedWarning1) {\r\n            TrackEntry.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\r\n        }\r\n        return this.trackTime;\r\n    }\r\n\r\n    set time(value: number) {\r\n        if (!TrackEntry.deprecatedWarning1) {\r\n            TrackEntry.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\r\n        }\r\n        this.trackTime = value;\r\n    }\r\n\r\n    get endTime() {\r\n        if (!TrackEntry.deprecatedWarning2) {\r\n            TrackEntry.deprecatedWarning2 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\r\n        }\r\n        return this.trackTime;\r\n    }\r\n\r\n    set endTime(value: number) {\r\n        if (!TrackEntry.deprecatedWarning2) {\r\n            TrackEntry.deprecatedWarning2 = true;\r\n            console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\r\n        }\r\n        this.trackTime = value;\r\n    }\r\n\r\n    loopsCount() {\r\n        return Math.floor(this.trackTime / this.trackEnd);\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class EventQueue {\r\n    objects: Array<any> = [];\r\n    drainDisabled = false;\r\n    animState: AnimationState = null;\r\n\r\n    constructor (animState: AnimationState) {\r\n        this.animState = animState;\r\n    }\r\n\r\n    start (entry: TrackEntry) {\r\n        this.objects.push(EventType.start);\r\n        this.objects.push(entry);\r\n        this.animState.animationsChanged = true;\r\n    }\r\n\r\n    interrupt (entry: TrackEntry) {\r\n        this.objects.push(EventType.interrupt);\r\n        this.objects.push(entry);\r\n    }\r\n\r\n    end (entry: TrackEntry) {\r\n        this.objects.push(EventType.end);\r\n        this.objects.push(entry);\r\n        this.animState.animationsChanged = true;\r\n    }\r\n\r\n    dispose (entry: TrackEntry) {\r\n        this.objects.push(EventType.dispose);\r\n        this.objects.push(entry);\r\n    }\r\n\r\n    complete (entry: TrackEntry) {\r\n        this.objects.push(EventType.complete);\r\n        this.objects.push(entry);\r\n    }\r\n\r\n    event (entry: TrackEntry, event: Event) {\r\n        this.objects.push(EventType.event);\r\n        this.objects.push(entry);\r\n        this.objects.push(event);\r\n    }\r\n\r\n    drain () {\r\n        if (this.drainDisabled) return;\r\n        this.drainDisabled = true;\r\n\r\n        let objects = this.objects;\r\n        let listeners = this.animState.listeners;\r\n\r\n        for (let i = 0; i < objects.length; i += 2) {\r\n            let type = objects[i] as EventType;\r\n            let entry = objects[i + 1] as TrackEntry;\r\n            switch (type) {\r\n                case EventType.start:\r\n                    if (entry.listener && entry.listener.start) entry.listener.start(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].start) listeners[ii].start(entry);\r\n                    break;\r\n                case EventType.interrupt:\r\n                    if (entry.listener && entry.listener.interrupt) entry.listener.interrupt(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].interrupt) listeners[ii].interrupt(entry);\r\n                    break;\r\n                case EventType.end:\r\n                    if (entry.listener && entry.listener.end) entry.listener.end(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].end) listeners[ii].end(entry);\r\n                // Fall through.\r\n                case EventType.dispose:\r\n                    if (entry.listener && entry.listener.dispose) entry.listener.dispose(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].dispose) listeners[ii].dispose(entry);\r\n                    this.animState.trackEntryPool.free(entry);\r\n                    break;\r\n                case EventType.complete:\r\n                    if (entry.listener && entry.listener.complete) entry.listener.complete(entry);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].complete) listeners[ii].complete(entry);\r\n                    break;\r\n                case EventType.event:\r\n                    let event = objects[i++ + 2] as Event;\r\n                    if (entry.listener && entry.listener.event) entry.listener.event(entry, event);\r\n                    for (let ii = 0; ii < listeners.length; ii++)\r\n                        if (listeners[ii].event) listeners[ii].event(entry, event);\r\n                    break;\r\n            }\r\n        }\r\n        this.clear();\r\n\r\n        this.drainDisabled = false;\r\n    }\r\n\r\n    clear () {\r\n        this.objects.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport enum EventType {\r\n    start, interrupt, end, dispose, complete, event\r\n}\r\n\r\n/** The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\r\n * events.\r\n *\r\n * See TrackEntry {@link TrackEntry#listener} and AnimationState\r\n * {@link AnimationState#addListener()}.\r\n * @public\r\n * */\r\nexport interface AnimationStateListener extends IAnimationStateListener {\r\n    /** Invoked when this entry has been set as the current entry. */\r\n    start?(entry: TrackEntry): void;\r\n\r\n    /** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\r\n     * mixing. */\r\n    interrupt?(entry: TrackEntry): void;\r\n\r\n    /** Invoked when this entry is no longer the current entry and will never be applied again. */\r\n    end?(entry: TrackEntry): void;\r\n\r\n    /** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\r\n     * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\r\n    dispose?(entry: TrackEntry): void;\r\n\r\n    /** Invoked every time this entry's animation completes a loop. */\r\n    complete?(entry: TrackEntry): void;\r\n\r\n    /** Invoked when this entry's animation triggers an event. */\r\n    event?(entry: TrackEntry, event: Event): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport abstract class AnimationStateAdapter implements AnimationStateListener {\r\n    start (entry: TrackEntry) {\r\n    }\r\n\r\n    interrupt (entry: TrackEntry) {\r\n    }\r\n\r\n    end (entry: TrackEntry) {\r\n    }\r\n\r\n    dispose (entry: TrackEntry) {\r\n    }\r\n\r\n    complete (entry: TrackEntry) {\r\n    }\r\n\r\n    event (entry: TrackEntry, event: Event) {\r\n    }\r\n}\r\n\r\n/** 1. A previously applied timeline has set this property.\r\n *\r\n * Result: Mix from the current pose to the timeline pose. */\r\nconst SUBSEQUENT = 0;\r\n/** 1. This is the first timeline to set this property.\r\n * 2. The next track entry applied after this one does not have a timeline to set this property.\r\n *\r\n * Result: Mix from the setup pose to the timeline pose. */\r\nconst FIRST = 1;\r\n/** 1) A previously applied timeline has set this property.<br>\r\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\r\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\r\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\r\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\r\nconst HOLD_SUBSEQUENT = 2;\r\n/** 1) This is the first timeline to set this property.<br>\r\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\r\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\r\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\r\n * that key the same property. A subsequent timeline will set this property using a mix. */\r\nconst HOLD_FIRST = 3;\r\n/** 1. This is the first timeline to set this property.\r\n * 2. The next track entry to be applied does have a timeline to set this property.\r\n * 3. The next track entry after that one does have a timeline to set this property.\r\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\r\n *\r\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\r\n * 2 track entries in a row have a timeline that sets the same property.\r\n *\r\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\r\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\r\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\r\n * place. */\r\nconst HOLD_MIX = 4;\r\n\r\nconst SETUP = 1;\r\nconst CURRENT = 2;\r\n\r\nlet _emptyAnimation: Animation = null;\r\n","import {SkeletonData} from \"./SkeletonData\";\r\nimport {IAnimationStateData, Map} from '@pixi-spine/base';\r\nimport type {Animation} from './Animation';\r\n\r\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed.\r\n * @public\r\n * */\r\nexport class AnimationStateData implements IAnimationStateData<SkeletonData, Animation> {\r\n    /** The SkeletonData to look up animations when they are specified by name. */\r\n    skeletonData: SkeletonData;\r\n\r\n    animationToMixTime: Map<number> = { };\r\n\r\n    /** The mix duration to use when no mix duration has been defined between two animations. */\r\n    defaultMix = 0;\r\n\r\n    constructor (skeletonData: SkeletonData) {\r\n        if (skeletonData == null) throw new Error(\"skeletonData cannot be null.\");\r\n        this.skeletonData = skeletonData;\r\n    }\r\n\r\n    /** Sets a mix duration by animation name.\r\n     *\r\n     * See {@link #setMixWith()}. */\r\n    setMix (fromName: string, toName: string, duration: number) {\r\n        let from = this.skeletonData.findAnimation(fromName);\r\n        if (from == null) throw new Error(\"Animation not found: \" + fromName);\r\n        let to = this.skeletonData.findAnimation(toName);\r\n        if (to == null) throw new Error(\"Animation not found: \" + toName);\r\n        this.setMixWith(from, to, duration);\r\n    }\r\n\r\n    /** Sets the mix duration when changing from the specified animation to the other.\r\n     *\r\n     * See {@link TrackEntry#mixDuration}. */\r\n    setMixWith (from: Animation, to: Animation, duration: number) {\r\n        if (from == null) throw new Error(\"from cannot be null.\");\r\n        if (to == null) throw new Error(\"to cannot be null.\");\r\n        let key = from.name + \".\" + to.name;\r\n        this.animationToMixTime[key] = duration;\r\n    }\r\n\r\n    /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\r\n     * no mix duration has been set. */\r\n    getMix (from: Animation, to: Animation) {\r\n        let key = from.name + \".\" + to.name;\r\n        let value = this.animationToMixTime[key];\r\n        return value === undefined ? this.defaultMix : value;\r\n    }\r\n}\r\n","\r\nimport {AttachmentLoader, RegionAttachment, MeshAttachment, BoundingBoxAttachment,\r\n    PathAttachment, PointAttachment, ClippingAttachment} from './attachments';\r\nimport type {TextureAtlas} from \"@pixi-spine/base\";\r\nimport type {Skin} from \"./Skin\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class AtlasAttachmentLoader implements AttachmentLoader {\r\n    atlas: TextureAtlas;\r\n\r\n    constructor(atlas: TextureAtlas) {\r\n        this.atlas = atlas;\r\n    }\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    // @ts-ignore\r\n    newRegionAttachment(skin: Skin, name: string, path: string): RegionAttachment {\r\n        let region = this.atlas.findRegion(path);\r\n        if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\r\n        let attachment = new RegionAttachment(name);\r\n        attachment.region = region;\r\n        return attachment;\r\n    }\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    // @ts-ignore\r\n    newMeshAttachment(skin: Skin, name: string, path: string): MeshAttachment {\r\n        let region = this.atlas.findRegion(path);\r\n        if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\r\n        let attachment = new MeshAttachment(name);\r\n        attachment.region = region;\r\n        return attachment;\r\n    }\r\n\r\n    /** @return May be null to not load an attachment. */\r\n    // @ts-ignore\r\n    newBoundingBoxAttachment(skin: Skin, name: string): BoundingBoxAttachment {\r\n        return new BoundingBoxAttachment(name);\r\n    }\r\n\r\n    /** @return May be null to not load an attachment */\r\n    // @ts-ignore\r\n    newPathAttachment(skin: Skin, name: string): PathAttachment {\r\n        return new PathAttachment(name);\r\n    }\r\n\r\n    // @ts-ignore\r\n    newPointAttachment(skin: Skin, name: string): PointAttachment {\r\n        return new PointAttachment(name);\r\n    }\r\n\r\n    // @ts-ignore\r\n    newClippingAttachment(skin: Skin, name: string): ClippingAttachment {\r\n        return new ClippingAttachment(name);\r\n    }\r\n}\r\n","import {Matrix} from '@pixi/math';\r\nimport {Updatable} from \"./Updatable\";\r\nimport {BoneData} from \"./BoneData\";\r\nimport {Skeleton} from \"./Skeleton\";\r\nimport {IBone, MathUtils, settings, TransformMode, Vector2} from \"@pixi-spine/base\";\r\n\r\n/** Stores a bone's current pose.\r\n *\r\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\r\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\r\n * constraint or application code modifies the world transform after it was computed from the local transform.\r\n * @public\r\n * */\r\nexport class Bone implements Updatable, IBone {\r\n    //be careful! Spine b,c is c,b in pixi matrix\r\n    matrix = new Matrix();\r\n\r\n    get worldX(): number {\r\n        return this.matrix.tx;\r\n    }\r\n\r\n    get worldY(): number {\r\n        return this.matrix.ty;\r\n    }\r\n\r\n    /** The bone's setup pose data. */\r\n    data: BoneData = null;\r\n\r\n    /** The skeleton this bone belongs to. */\r\n    skeleton: Skeleton = null;\r\n\r\n    /** The parent bone, or null if this is the root bone. */\r\n    parent: Bone = null;\r\n\r\n    /** The immediate children of this bone. */\r\n    children = new Array<Bone>();\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local rotation in degrees, counter clockwise. */\r\n    rotation = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 0;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 0;\r\n\r\n    /** The local shearX. */\r\n    shearX = 0;\r\n\r\n    /** The local shearY. */\r\n    shearY = 0;\r\n\r\n    /** The applied local x translation. */\r\n    ax = 0;\r\n\r\n    /** The applied local y translation. */\r\n    ay = 0;\r\n\r\n    /** The applied local rotation in degrees, counter clockwise. */\r\n    arotation = 0;\r\n\r\n    /** The applied local scaleX. */\r\n    ascaleX = 0;\r\n\r\n    /** The applied local scaleY. */\r\n    ascaleY = 0;\r\n\r\n    /** The applied local shearX. */\r\n    ashearX = 0;\r\n\r\n    /** The applied local shearY. */\r\n    ashearY = 0;\r\n\r\n    sorted = false;\r\n    active = false;\r\n\r\n    /** @param parent May be null. */\r\n    constructor (data: BoneData, skeleton: Skeleton, parent: Bone) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.skeleton = skeleton;\r\n        this.parent = parent;\r\n        this.setToSetupPose();\r\n    }\r\n\r\n    /** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\r\n     * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\r\n    isActive () {\r\n        return this.active;\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and this bone's local applied transform. */\r\n    update () {\r\n        this.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and this bone's local transform.\r\n     *\r\n     * See {@link #updateWorldTransformWith()}. */\r\n    updateWorldTransform () {\r\n        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\r\n     * specified local transform. Child bones are not updated.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide. */\r\n    updateWorldTransformWith (x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\r\n        this.ax = x;\r\n        this.ay = y;\r\n        this.arotation = rotation;\r\n        this.ascaleX = scaleX;\r\n        this.ascaleY = scaleY;\r\n        this.ashearX = shearX;\r\n        this.ashearY = shearY;\r\n\r\n        let parent = this.parent;\r\n        let m = this.matrix;\r\n\r\n        let sx = this.skeleton.scaleX;\r\n        let sy = settings.yDown? -this.skeleton.scaleY : this.skeleton.scaleY;\r\n        if (!parent) { // Root bone.\r\n            let skeleton = this.skeleton;\r\n            let rotationY = rotation + 90 + shearY;\r\n            m.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\r\n            m.c = MathUtils.cosDeg(rotationY) * scaleY * sx;\r\n            m.b = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\r\n            m.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\r\n            m.tx = x * sx + skeleton.x;\r\n            m.ty = y * sy + skeleton.y;\r\n            return;\r\n        }\r\n\r\n        let pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\r\n        m.tx = pa * x + pb * y + parent.matrix.tx;\r\n        m.ty = pc * x + pd * y + parent.matrix.ty;\r\n\r\n        switch (this.data.transformMode) {\r\n            case TransformMode.Normal: {\r\n                let rotationY = rotation + 90 + shearY;\r\n                let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n                let lb = MathUtils.cosDeg(rotationY) * scaleY;\r\n                let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n                let ld = MathUtils.sinDeg(rotationY) * scaleY;\r\n                m.a = pa * la + pb * lc;\r\n                m.c = pa * lb + pb * ld;\r\n                m.b = pc * la + pd * lc;\r\n                m.d = pc * lb + pd * ld;\r\n                return;\r\n            }\r\n            case TransformMode.OnlyTranslation: {\r\n                let rotationY = rotation + 90 + shearY;\r\n                m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n                m.c = MathUtils.cosDeg(rotationY) * scaleY;\r\n                m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n                m.d = MathUtils.sinDeg(rotationY) * scaleY;\r\n                break;\r\n            }\r\n            case TransformMode.NoRotationOrReflection: {\r\n                let s = pa * pa + pc * pc;\r\n                let prx = 0;\r\n                if (s > 0.0001) {\r\n                    s = Math.abs(pa * pd - pb * pc) / s;\r\n                    pa /= sx;\r\n                    pc /= sy;\r\n                    pb = pc * s;\r\n                    pd = pa * s;\r\n                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;\r\n                } else {\r\n                    pa = 0;\r\n                    pc = 0;\r\n                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\r\n                }\r\n                let rx = rotation + shearX - prx;\r\n                let ry = rotation + shearY - prx + 90;\r\n                let la = MathUtils.cosDeg(rx) * scaleX;\r\n                let lb = MathUtils.cosDeg(ry) * scaleY;\r\n                let lc = MathUtils.sinDeg(rx) * scaleX;\r\n                let ld = MathUtils.sinDeg(ry) * scaleY;\r\n                m.a = pa * la - pb * lc;\r\n                m.c = pa * lb - pb * ld;\r\n                m.b = pc * la + pd * lc;\r\n                m.d = pc * lb + pd * ld;\r\n                break;\r\n            }\r\n            case TransformMode.NoScale:\r\n            case TransformMode.NoScaleOrReflection: {\r\n                let cos = MathUtils.cosDeg(rotation);\r\n                let sin = MathUtils.sinDeg(rotation);\r\n                let za = (pa * cos + pb * sin) / sx;\r\n                let zc = (pc * cos + pd * sin) / sy;\r\n                let s = Math.sqrt(za * za + zc * zc);\r\n                if (s > 0.00001) s = 1 / s;\r\n                za *= s;\r\n                zc *= s;\r\n                s = Math.sqrt(za * za + zc * zc);\r\n                if (this.data.transformMode == TransformMode.NoScale\r\n                    && (pa * pd - pb * pc < 0) != (sx < 0 != sy < 0)) s = -s;\r\n                let r = Math.PI / 2 + Math.atan2(zc, za);\r\n                let zb = Math.cos(r) * s;\r\n                let zd = Math.sin(r) * s;\r\n                let la = MathUtils.cosDeg(shearX) * scaleX;\r\n                let lb = MathUtils.cosDeg(90 + shearY) * scaleY;\r\n                let lc = MathUtils.sinDeg(shearX) * scaleX;\r\n                let ld = MathUtils.sinDeg(90 + shearY) * scaleY;\r\n                m.a = za * la + zb * lc;\r\n                m.c = za * lb + zb * ld;\r\n                m.b = zc * la + zd * lc;\r\n                m.d = zc * lb + zd * ld;\r\n                break;\r\n            }\r\n        }\r\n        m.a *= sx;\r\n        m.c *= sx;\r\n        m.b *= sy;\r\n        m.d *= sy;\r\n    }\r\n\r\n    /** Sets this bone's local transform to the setup pose. */\r\n    setToSetupPose () {\r\n        let data = this.data;\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.rotation = data.rotation;\r\n        this.scaleX = data.scaleX;\r\n        this.scaleY = data.scaleY;\r\n        this.shearX = data.shearX;\r\n        this.shearY = data.shearY;\r\n    }\r\n\r\n    /** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\r\n    getWorldRotationX () {\r\n        return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\r\n    getWorldRotationY () {\r\n        return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\r\n    getWorldScaleX () {\r\n        let m = this.matrix;\r\n        return Math.sqrt(m.a * m.a + m.b * m.b);\r\n    }\r\n\r\n    /** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\r\n    getWorldScaleY () {\r\n        let m = this.matrix;\r\n        return Math.sqrt(m.c * m.c + m.d * m.d);\r\n    }\r\n\r\n    /** Computes the applied transform values from the world transform.\r\n     *\r\n     * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\r\n     * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\r\n     * constraints).\r\n     *\r\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\r\n     * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\r\n    updateAppliedTransform () {\r\n        let parent = this.parent;\r\n        let m = this.matrix;\r\n        if (!parent) {\r\n            this.ax = m.tx;\r\n            this.ay = m.ty;\r\n            this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;\r\n            this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);\r\n            this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);\r\n            this.ashearX = 0;\r\n            this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;\r\n            return;\r\n        }\r\n        let pm = parent.matrix;\r\n        let pid = 1 / (pm.a * pm.d - pm.b * pm.c);\r\n        let dx = m.tx - pm.tx, dy = m.ty - pm.ty;\r\n        this.ax = (dx * pm.d * pid - dy * pm.c * pid);\r\n        this.ay = (dy * pm.a * pid - dx * pm.b * pid);\r\n        let ia = pid * pm.d;\r\n        let id = pid * pm.a;\r\n        let ib = pid * pm.c;\r\n        let ic = pid * pm.b;\r\n        let ra = ia * m.a - ib * m.b;\r\n        let rb = ia * m.c - ib * m.d;\r\n        let rc = id * m.b - ic * m.a;\r\n        let rd = id * m.d - ic * m.c;\r\n        this.ashearX = 0;\r\n        this.ascaleX = Math.sqrt(ra * ra + rc * rc);\r\n        if (this.ascaleX > 0.0001) {\r\n            let det = ra * rd - rb * rc;\r\n            this.ascaleY = det / this.ascaleX;\r\n            this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\r\n            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\r\n        } else {\r\n            this.ascaleX = 0;\r\n            this.ascaleY = Math.sqrt(rb * rb + rd * rd);\r\n            this.ashearY = 0;\r\n            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\r\n        }\r\n    }\r\n\r\n    /** Transforms a point from world coordinates to the bone's local coordinates. */\r\n    worldToLocal(world: Vector2) {\r\n        let m = this.matrix;\r\n        let a = m.a, b = m.c, c = m.b, d = m.d;\r\n        let invDet = 1 / (a * d - b * c);\r\n        let x = world.x - m.tx, y = world.y - m.ty;\r\n        world.x = (x * d * invDet - y * b * invDet);\r\n        world.y = (y * a * invDet - x * c * invDet);\r\n        return world;\r\n    }\r\n\r\n    /** Transforms a point from the bone's local coordinates to world coordinates. */\r\n    localToWorld(local: Vector2) {\r\n        let m = this.matrix;\r\n        let x = local.x, y = local.y;\r\n        local.x = x * m.a + y * m.c + m.tx;\r\n        local.y = x * m.b + y * m.d + m.ty;\r\n        return local;\r\n    }\r\n\r\n    /** Transforms a world rotation to a local rotation. */\r\n    worldToLocalRotation (worldRotation: number) {\r\n        let sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\r\n        let mat = this.matrix;\r\n        return Math.atan2(mat.a * sin - mat.b * cos, mat.d * cos - mat.c * sin) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** Transforms a local rotation to a world rotation. */\r\n    localToWorldRotation (localRotation: number) {\r\n        localRotation -= this.rotation - this.shearX;\r\n        let sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\r\n        let mat = this.matrix;\r\n        return Math.atan2(cos * mat.b + sin * mat.d, cos * mat.a + sin * mat.c) * MathUtils.radDeg;\r\n    }\r\n\r\n    /** Rotates the world transform the specified amount.\r\n     * <p>\r\n     * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\r\n     * need to be called on any child bones, recursively. */\r\n    rotateWorld (degrees: number) {\r\n        let mat = this.matrix;\r\n        let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n        let cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\r\n        mat.a = cos * a - sin * c;\r\n        mat.c = cos * b - sin * d;\r\n        mat.b = sin * a + cos * c;\r\n        mat.d = sin * b + cos * d;\r\n    }\r\n}\r\n","import {Color, TransformMode} from '@pixi-spine/base';\r\n\r\n/** Stores the setup pose for a {@link Bone}.\r\n * @public\r\n * */\r\nexport class BoneData {\r\n    /** The index of the bone in {@link Skeleton#getBones()}. */\r\n    index: number;\r\n\r\n    /** The name of the bone, which is unique across all bones in the skeleton. */\r\n    name: string;\r\n\r\n    /** @returns May be null. */\r\n    parent: BoneData;\r\n\r\n    /** The bone's length. */\r\n    length: number;\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local rotation. */\r\n    rotation = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 1;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 1;\r\n\r\n    /** The local shearX. */\r\n    shearX = 0;\r\n\r\n    /** The local shearX. */\r\n    shearY = 0;\r\n\r\n    /** The transform mode for how parent world transforms affect this bone. */\r\n    transformMode = TransformMode.Normal;\r\n\r\n    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\r\n     * bone.\r\n     * @see Skin#bones */\r\n    skinRequired = false;\r\n\r\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\r\n     * rendered at runtime. */\r\n    color = new Color();\r\n\r\n    constructor (index: number, name: string, parent: BoneData) {\r\n        if (index < 0) throw new Error(\"index must be >= 0.\");\r\n        if (name == null) throw new Error(\"name cannot be null.\");\r\n        this.index = index;\r\n        this.name = name;\r\n        this.parent = parent;\r\n    }\r\n}\r\n","/** The base class for all constraint datas.\r\n * @public\r\n * */\r\nexport abstract class ConstraintData {\r\n    constructor(public name: string, public order: number, public skinRequired: boolean) { }\r\n}\r\n","import {EventData} from \"./EventData\";\r\nimport {IEvent} from \"@pixi-spine/base\";\r\n\r\n/** Stores the current pose values for an {@link Event}.\r\n *\r\n * See Timeline {@link Timeline#apply()},\r\n * AnimationStateListener {@link AnimationStateListener#event()}, and\r\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class Event implements IEvent {\r\n    data: EventData;\r\n    intValue: number;\r\n    floatValue: number;\r\n    stringValue: string;\r\n    time: number;\r\n    volume: number;\r\n    balance: number;\r\n\r\n    constructor (time: number, data: EventData) {\r\n        if (data == null) throw new Error(\"data cannot be null.\");\r\n        this.time = time;\r\n        this.data = data;\r\n    }\r\n}\r\n","import {IEventData} from \"@pixi-spine/base\";\r\n\r\n/** Stores the setup pose values for an {@link Event}.\r\n *\r\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class EventData implements IEventData {\r\n    name: string;\r\n    intValue: number;\r\n    floatValue: number;\r\n    stringValue: string;\r\n    audioPath: string;\r\n    volume: number;\r\n    balance: number;\r\n\r\n    constructor (name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import {Updatable} from \"./Updatable\";\r\nimport {IkConstraintData} from \"./IkConstraintData\";\r\nimport {Bone} from \"./Bone\";\r\nimport {Skeleton} from \"./Skeleton\";\r\nimport {MathUtils, settings, TransformMode} from \"@pixi-spine/base\";\r\n\r\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\r\n * the last bone is as close to the target bone as possible.\r\n *\r\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class IkConstraint implements Updatable {\r\n    /** The IK constraint's setup pose data. */\r\n    data: IkConstraintData;\r\n\r\n    /** The bones that will be modified by this IK constraint. */\r\n    bones: Array<Bone>;\r\n\r\n    /** The bone that is the IK target. */\r\n    target: Bone;\r\n\r\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\r\n    bendDirection = 0;\r\n\r\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\r\n    compress = false;\r\n\r\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\r\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\r\n    stretch = false;\r\n\r\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\r\n    mix = 1;\r\n\r\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\r\n    softness = 0;\r\n    active = false;\r\n\r\n    constructor (data: IkConstraintData, skeleton: Skeleton) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.mix = data.mix;\r\n        this.softness = data.softness;\r\n        this.bendDirection = data.bendDirection;\r\n        this.compress = data.compress;\r\n        this.stretch = data.stretch;\r\n\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0; i < data.bones.length; i++)\r\n            this.bones.push(skeleton.findBone(data.bones[i].name));\r\n        this.target = skeleton.findBone(data.target.name);\r\n    }\r\n\r\n    isActive () {\r\n        return this.active;\r\n    }\r\n\r\n    update () {\r\n        if (this.mix == 0) return;\r\n        let target = this.target;\r\n        let bones = this.bones;\r\n        switch (bones.length) {\r\n            case 1:\r\n                this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\r\n                break;\r\n            case 2:\r\n                this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** Applies 1 bone IK. The target is specified in the world coordinate system. */\r\n    apply1 (bone: Bone, targetX: number, targetY: number, compress: boolean, stretch: boolean, uniform: boolean, alpha: number) {\r\n        let p = bone.parent.matrix;\r\n\r\n        let pa = p.a, pb = p.c, pc = p.b, pd = p.d;\r\n        let rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\r\n\r\n        let skelX = bone.skeleton.scaleX;\r\n        let skelY = settings.yDown? -bone.skeleton.scaleY : bone.skeleton.scaleY;\r\n\r\n        switch(bone.data.transformMode) {\r\n            case TransformMode.OnlyTranslation:\r\n                tx = targetX - bone.worldX;\r\n                ty = targetY - bone.worldY;\r\n                //TODO: possible bug in spine-ts runtime!\r\n                if (settings.yDown) {\r\n                    ty = -ty;\r\n                }\r\n                break;\r\n            case TransformMode.NoRotationOrReflection:\r\n                let s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\r\n                let sa = pa / skelX;\r\n                let sc = pc / skelY;\r\n                pb = -sc * s * skelX;\r\n                pd = sa * s * skelY;\r\n                rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\r\n            // Fall through\r\n            default:\r\n                let x = targetX - p.tx, y = targetY - p.ty;\r\n                let d = pa * pd - pb * pc;\r\n                tx = (x * pd - y * pb) / d - bone.ax;\r\n                ty = (y * pa - x * pc) / d - bone.ay;\r\n        }\r\n        rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\r\n        if (bone.ascaleX < 0) rotationIK += 180;\r\n        if (rotationIK > 180)\r\n            rotationIK -= 360;\r\n        else if (rotationIK < -180)\r\n            rotationIK += 360;\r\n        let sx = bone.ascaleX, sy = bone.ascaleY;\r\n        if (compress || stretch) {\r\n            switch (bone.data.transformMode) {\r\n                case TransformMode.NoScale:\r\n                case TransformMode.NoScaleOrReflection:\r\n                    tx = targetX - bone.worldX;\r\n                    ty = targetY - bone.worldY;\r\n            }\r\n            let b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);\r\n            if ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {\r\n                let s = (dd / b - 1) * alpha + 1;\r\n                sx *= s;\r\n                if (uniform) sy *= s;\r\n            }\r\n        }\r\n        bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX,\r\n            bone.ashearY);\r\n    }\r\n\r\n    /** Applies 2 bone IK. The target is specified in the world coordinate system.\r\n     * @param child A direct descendant of the parent bone. */\r\n    apply2 (parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, stretch: boolean, uniform: boolean, softness: number, alpha: number) {\r\n        let px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;\r\n        let pmat = parent.matrix;\r\n        let os1 = 0, os2 = 0, s2 = 0;\r\n        if (psx < 0) {\r\n            psx = -psx;\r\n            os1 = 180;\r\n            s2 = -1;\r\n        } else {\r\n            os1 = 0;\r\n            s2 = 1;\r\n        }\r\n        if (psy < 0) {\r\n            psy = -psy;\r\n            s2 = -s2;\r\n        }\r\n        if (csx < 0) {\r\n            csx = -csx;\r\n            os2 = 180;\r\n        } else\r\n            os2 = 0;\r\n        let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = pmat.a, b = pmat.c, c = pmat.b, d = pmat.d;\r\n        let u = Math.abs(psx - psy) <= 0.0001;\r\n        if (!u || stretch) {\r\n            cy = 0;\r\n            cwx = a * cx + pmat.tx;\r\n            cwy = c * cx + pmat.ty;\r\n        } else {\r\n            cy = child.ay;\r\n            cwx = a * cx + b * cy + pmat.tx;\r\n            cwy = c * cx + d * cy + pmat.ty;\r\n        }\r\n        let pp = parent.parent.matrix;\r\n        a = pp.a;\r\n        b = pp.c;\r\n        c = pp.b;\r\n        d = pp.d;\r\n        let id = 1 / (a * d - b * c), x = cwx - pp.tx, y = cwy - pp.ty;\r\n        let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\r\n        let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\r\n        if (l1 < 0.0001) {\r\n            this.apply1(parent, targetX, targetY, false, stretch, false, alpha);\r\n            child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\r\n            return;\r\n        }\r\n        x = targetX - pp.tx;\r\n        y = targetY - pp.ty;\r\n        let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\r\n        let dd = tx * tx + ty * ty;\r\n        if (softness != 0) {\r\n            softness *= psx * (csx + 1) * 0.5;\r\n            let td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\r\n            if (sd > 0) {\r\n                let p = Math.min(1, sd / (softness * 2)) - 1;\r\n                p = (sd - softness * (1 - p * p)) / td;\r\n                tx -= p * tx;\r\n                ty -= p * ty;\r\n                dd = tx * tx + ty * ty;\r\n            }\r\n        }\r\n        outer:\r\n            if (u) {\r\n                l2 *= psx;\r\n                let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\r\n                if (cos < -1) {\r\n                    cos = -1;\r\n                    a2 = Math.PI * bendDir;\r\n                } else if (cos > 1) {\r\n                    cos = 1;\r\n                    a2 = 0;\r\n                    if (stretch) {\r\n                        a = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\r\n                        sx *= a;\r\n                        if (uniform) sy *= a;\r\n                    }\r\n                } else\r\n                    a2 = Math.acos(cos) * bendDir;\r\n                a = l1 + l2 * cos;\r\n                b = l2 * Math.sin(a2);\r\n                a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\r\n            } else {\r\n                a = psx * l2;\r\n                b = psy * l2;\r\n                let aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\r\n                c = bb * l1 * l1 + aa * dd - aa * bb;\r\n                let c1 = -2 * bb * l1, c2 = bb - aa;\r\n                d = c1 * c1 - 4 * c2 * c;\r\n                if (d >= 0) {\r\n                    let q = Math.sqrt(d);\r\n                    if (c1 < 0) q = -q;\r\n                    q = -(c1 + q) * 0.5;\r\n                    let r0 = q / c2, r1 = c / q;\r\n                    let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\r\n                    if (r * r <= dd) {\r\n                        y = Math.sqrt(dd - r * r) * bendDir;\r\n                        a1 = ta - Math.atan2(y, r);\r\n                        a2 = Math.atan2(y / psy, (r - l1) / psx);\r\n                        break outer;\r\n                    }\r\n                }\r\n                let minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\r\n                let maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\r\n                c = -a * l1 / (aa - bb);\r\n                if (c >= -1 && c <= 1) {\r\n                    c = Math.acos(c);\r\n                    x = a * Math.cos(c) + l1;\r\n                    y = b * Math.sin(c);\r\n                    d = x * x + y * y;\r\n                    if (d < minDist) {\r\n                        minAngle = c;\r\n                        minDist = d;\r\n                        minX = x;\r\n                        minY = y;\r\n                    }\r\n                    if (d > maxDist) {\r\n                        maxAngle = c;\r\n                        maxDist = d;\r\n                        maxX = x;\r\n                        maxY = y;\r\n                    }\r\n                }\r\n                if (dd <= (minDist + maxDist) * 0.5) {\r\n                    a1 = ta - Math.atan2(minY * bendDir, minX);\r\n                    a2 = minAngle * bendDir;\r\n                } else {\r\n                    a1 = ta - Math.atan2(maxY * bendDir, maxX);\r\n                    a2 = maxAngle * bendDir;\r\n                }\r\n            }\r\n        let os = Math.atan2(cy, cx) * s2;\r\n        let rotation = parent.arotation;\r\n        a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\r\n        if (a1 > 180)\r\n            a1 -= 360;\r\n        else if (a1 < -180) //\r\n            a1 += 360;\r\n        parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);\r\n        rotation = child.arotation;\r\n        a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\r\n        if (a2 > 180)\r\n            a2 -= 360;\r\n        else if (a2 < -180) //\r\n            a2 += 360;\r\n        child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\r\n    }\r\n}\r\n","import {ConstraintData} from \"./ConstraintData\";\r\nimport {BoneData} from \"./BoneData\";\r\n\r\n/** Stores the setup pose for an {@link IkConstraint}.\r\n * <p>\r\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class IkConstraintData extends ConstraintData {\r\n    /** The bones that are constrained by this IK constraint. */\r\n    bones = new Array<BoneData>();\r\n\r\n    /** The bone that is the IK target. */\r\n    target: BoneData;\r\n\r\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\r\n    bendDirection = 1;\r\n\r\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\r\n    compress = false;\r\n\r\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\r\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\r\n    stretch = false;\r\n\r\n    /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\r\n     * is scaled on both the X and Y axes. */\r\n    uniform = false;\r\n\r\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\r\n    mix = 1;\r\n\r\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\r\n    softness = 0;\r\n\r\n    constructor (name: string) {\r\n        super(name, 0, false);\r\n    }\r\n}\r\n","import {ConstraintData} from \"./ConstraintData\";\r\nimport type {SlotData} from \"./SlotData\";\r\nimport type {BoneData} from \"./BoneData\";\r\nimport { PositionMode, RotateMode } from \"@pixi-spine/base\";\r\n\r\n/** Stores the setup pose for a {@link PathConstraint}.\r\n *\r\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class PathConstraintData extends ConstraintData {\r\n\r\n    /** The bones that will be modified by this path constraint. */\r\n    bones = new Array<BoneData>();\r\n\r\n    /** The slot whose path attachment will be used to constrained the bones. */\r\n    target: SlotData;\r\n\r\n    /** The mode for positioning the first bone on the path. */\r\n    positionMode: PositionMode;\r\n\r\n    /** The mode for positioning the bones after the first bone on the path. */\r\n    spacingMode: SpacingMode;\r\n\r\n    /** The mode for adjusting the rotation of the bones. */\r\n    rotateMode: RotateMode;\r\n\r\n    /** An offset added to the constrained bone rotation. */\r\n    offsetRotation: number;\r\n\r\n    /** The position along the path. */\r\n    position: number;\r\n\r\n    /** The spacing between bones. */\r\n    spacing: number;\r\n\r\n    mixRotate = 0;\r\n    mixX = 0;\r\n    mixY = 0;\r\n\r\n    constructor (name: string) {\r\n        super(name, 0, false);\r\n    }\r\n}\r\n\r\n/** Controls how bones after the first bone are positioned along the path.\r\n *\r\n * [Spacing mode](http://esotericsoftware.com/spine-path-constraints#Spacing-mode) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport enum SpacingMode {\r\n    Length, Fixed, Percent, Proportional\r\n}\r\n","import {PathAttachment} from \"./attachments\";\r\nimport {Updatable} from \"./Updatable\";\r\nimport {PathConstraintData, SpacingMode} from \"./PathConstraintData\";\r\nimport {Bone} from \"./Bone\";\r\nimport {Slot} from \"./Slot\";\r\nimport {Skeleton} from \"./Skeleton\";\r\nimport {MathUtils, PositionMode, RotateMode, Utils} from \"@pixi-spine/base\";\r\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\r\n * constrained bones so they follow a {@link PathAttachment}.\r\n *\r\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class PathConstraint implements Updatable {\r\n    static NONE = -1;\r\n    static BEFORE = -2;\r\n    static AFTER = -3;\r\n    static epsilon = 0.00001;\r\n\r\n    /** The path constraint's setup pose data. */\r\n    data: PathConstraintData = null;\r\n\r\n    /** The bones that will be modified by this path constraint. */\r\n    bones: Array<Bone> = null;\r\n\r\n    /** The slot whose path attachment will be used to constrained the bones. */\r\n    target: Slot = null;\r\n\r\n    /** The position along the path. */\r\n    position = 0;\r\n\r\n    /** The spacing between bones. */\r\n    spacing = 0;\r\n\r\n    mixRotate = 0;\r\n\r\n    mixX = 0;\r\n\r\n    mixY = 0;\r\n\r\n    spaces = new Array<number>();\r\n    positions = new Array<number>();\r\n    world = new Array<number>();\r\n    curves = new Array<number>();\r\n    lengths = new Array<number>();\r\n    segments = new Array<number>();\r\n\r\n    active = false;\r\n\r\n    constructor(data: PathConstraintData, skeleton: Skeleton) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0, n = data.bones.length; i < n; i++)\r\n            this.bones.push(skeleton.findBone(data.bones[i].name));\r\n        this.target = skeleton.findSlot(data.target.name);\r\n        this.position = data.position;\r\n        this.spacing = data.spacing;\r\n        this.mixRotate = data.mixRotate;\r\n        this.mixX = data.mixX;\r\n        this.mixY = data.mixY;\r\n    }\r\n\r\n    isActive() {\r\n        return this.active;\r\n    }\r\n\r\n    update() {\r\n        let attachment = this.target.getAttachment();\r\n        if (!(attachment instanceof PathAttachment)) return;\r\n\r\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;\r\n        if (mixRotate == 0 && mixX == 0 && mixY == 0) return;\r\n\r\n        let data = this.data;\r\n        let tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;\r\n\r\n        let bones = this.bones;\r\n        let boneCount = bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\r\n        let spaces = Utils.setArraySize(this.spaces, spacesCount),\r\n            lengths: Array<number> = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : null;\r\n        let spacing = this.spacing;\r\n\r\n        switch (data.spacingMode) {\r\n            case SpacingMode.Percent:\r\n                if (scale) {\r\n                    for (let i = 0, n = spacesCount - 1; i < n; i++) {\r\n                        let bone = bones[i];\r\n                        let setupLength = bone.data.length;\r\n                        if (setupLength < PathConstraint.epsilon)\r\n                            lengths[i] = 0;\r\n                        else {\r\n                            let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\r\n                            lengths[i] = Math.sqrt(x * x + y * y);\r\n                        }\r\n                    }\r\n                }\r\n                Utils.arrayFill(spaces, 1, spacesCount, spacing);\r\n                break;\r\n            case SpacingMode.Proportional:\r\n                let sum = 0;\r\n                for (let i = 0, n = spacesCount - 1; i < n;) {\r\n                    let bone = bones[i];\r\n                    let setupLength = bone.data.length;\r\n                    if (setupLength < PathConstraint.epsilon) {\r\n                        if (scale) lengths[i] = 0;\r\n                        spaces[++i] = spacing;\r\n                    } else {\r\n                        let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\r\n                        let length = Math.sqrt(x * x + y * y);\r\n                        if (scale) lengths[i] = length;\r\n                        spaces[++i] = length;\r\n                        sum += length;\r\n                    }\r\n                }\r\n                if (sum > 0) {\r\n                    sum = spacesCount / sum * spacing;\r\n                    for (let i = 1; i < spacesCount; i++)\r\n                        spaces[i] *= sum;\r\n                }\r\n                break;\r\n            default:\r\n                let lengthSpacing = data.spacingMode == SpacingMode.Length;\r\n                for (let i = 0, n = spacesCount - 1; i < n;) {\r\n                    let bone = bones[i];\r\n                    let setupLength = bone.data.length;\r\n                    if (setupLength < PathConstraint.epsilon) {\r\n                        if (scale) lengths[i] = 0;\r\n                        spaces[++i] = spacing;\r\n                    } else {\r\n                        let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\r\n                        let length = Math.sqrt(x * x + y * y);\r\n                        if (scale) lengths[i] = length;\r\n                        spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\r\n                    }\r\n                }\r\n        }\r\n\r\n        let positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents);\r\n        let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\r\n        let tip = false;\r\n        if (offsetRotation == 0)\r\n            tip = data.rotateMode == RotateMode.Chain;\r\n        else {\r\n            tip = false;\r\n            let p = this.target.bone.matrix;\r\n            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n        }\r\n        for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\r\n            let bone = bones[i];\r\n            let mat = bone.matrix;\r\n            mat.tx += (boneX - mat.tx) * mixX;\r\n            mat.ty += (boneY - mat.ty) * mixY;\r\n            let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\r\n            if (scale) {\r\n                let length = lengths[i];\r\n                if (length != 0) {\r\n                    let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\r\n                    mat.a *= s;\r\n                    mat.b *= s;\r\n                }\r\n            }\r\n            boneX = x;\r\n            boneY = y;\r\n            if (mixRotate > 0) {\r\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d, r = 0, cos = 0, sin = 0;\r\n                if (tangents)\r\n                    r = positions[p - 1];\r\n                else if (spaces[i + 1] == 0)\r\n                    r = positions[p + 2];\r\n                else\r\n                    r = Math.atan2(dy, dx);\r\n                r -= Math.atan2(c, a);\r\n                if (tip) {\r\n                    cos = Math.cos(r);\r\n                    sin = Math.sin(r);\r\n                    let length = bone.data.length;\r\n                    boneX += (length * (cos * a - sin * c) - dx) * mixRotate;\r\n                    boneY += (length * (sin * a + cos * c) - dy) * mixRotate;\r\n                } else {\r\n                    r += offsetRotation;\r\n                }\r\n                if (r > MathUtils.PI)\r\n                    r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI) //\r\n                    r += MathUtils.PI2;\r\n                r *= mixRotate;\r\n                cos = Math.cos(r);\r\n                sin = Math.sin(r);\r\n                mat.a = cos * a - sin * c;\r\n                mat.c = cos * b - sin * d;\r\n                mat.b = sin * a + cos * c;\r\n                mat.d = sin * b + cos * d;\r\n            }\r\n            bone.updateAppliedTransform();\r\n        }\r\n    }\r\n\r\n    computeWorldPositions(path: PathAttachment, spacesCount: number, tangents: boolean) {\r\n        let target = this.target;\r\n        let position = this.position;\r\n        let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2),\r\n            world: Array<number> = null;\r\n        let closed = path.closed;\r\n        let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\r\n\r\n        if (!path.constantSpeed) {\r\n            let lengths = path.lengths;\r\n            curveCount -= closed ? 1 : 2;\r\n            let pathLength = lengths[curveCount];\r\n            if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\r\n\r\n            let multiplier;\r\n            switch (this.data.spacingMode) {\r\n                case SpacingMode.Percent:\r\n                    multiplier = pathLength;\r\n                    break;\r\n                case SpacingMode.Proportional:\r\n                    multiplier = pathLength / spacesCount;\r\n                    break;\r\n                default:\r\n                    multiplier = 1;\r\n            }\r\n            world = Utils.setArraySize(this.world, 8);\r\n            for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\r\n                let space = spaces[i] * multiplier;\r\n                position += space;\r\n                let p = position;\r\n\r\n                if (closed) {\r\n                    p %= pathLength;\r\n                    if (p < 0) p += pathLength;\r\n                    curve = 0;\r\n                } else if (p < 0) {\r\n                    if (prevCurve != PathConstraint.BEFORE) {\r\n                        prevCurve = PathConstraint.BEFORE;\r\n                        path.computeWorldVertices(target, 2, 4, world, 0, 2);\r\n                    }\r\n                    this.addBeforePosition(p, world, 0, out, o);\r\n                    continue;\r\n                } else if (p > pathLength) {\r\n                    if (prevCurve != PathConstraint.AFTER) {\r\n                        prevCurve = PathConstraint.AFTER;\r\n                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\r\n                    }\r\n                    this.addAfterPosition(p - pathLength, world, 0, out, o);\r\n                    continue;\r\n                }\r\n\r\n                // Determine curve containing position.\r\n                for (; ; curve++) {\r\n                    let length = lengths[curve];\r\n                    if (p > length) continue;\r\n                    if (curve == 0)\r\n                        p /= length;\r\n                    else {\r\n                        let prev = lengths[curve - 1];\r\n                        p = (p - prev) / (length - prev);\r\n                    }\r\n                    break;\r\n                }\r\n                if (curve != prevCurve) {\r\n                    prevCurve = curve;\r\n                    if (closed && curve == curveCount) {\r\n                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\r\n                        path.computeWorldVertices(target, 0, 4, world, 4, 2);\r\n                    } else\r\n                        path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\r\n                }\r\n                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\r\n                    tangents || (i > 0 && space == 0));\r\n            }\r\n            return out;\r\n        }\r\n\r\n        // World vertices.\r\n        if (closed) {\r\n            verticesLength += 2;\r\n            world = Utils.setArraySize(this.world, verticesLength);\r\n            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\r\n            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\r\n            world[verticesLength - 2] = world[0];\r\n            world[verticesLength - 1] = world[1];\r\n        } else {\r\n            curveCount--;\r\n            verticesLength -= 4;\r\n            world = Utils.setArraySize(this.world, verticesLength);\r\n            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\r\n        }\r\n\r\n        // Curve lengths.\r\n        let curves = Utils.setArraySize(this.curves, curveCount);\r\n        let pathLength = 0;\r\n        let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\r\n        let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\r\n        for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\r\n            cx1 = world[w];\r\n            cy1 = world[w + 1];\r\n            cx2 = world[w + 2];\r\n            cy2 = world[w + 3];\r\n            x2 = world[w + 4];\r\n            y2 = world[w + 5];\r\n            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\r\n            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\r\n            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\r\n            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\r\n            ddfx = tmpx * 2 + dddfx;\r\n            ddfy = tmpy * 2 + dddfy;\r\n            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\r\n            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            dfx += ddfx + dddfx;\r\n            dfy += ddfy + dddfy;\r\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n            curves[i] = pathLength;\r\n            x1 = x2;\r\n            y1 = y2;\r\n        }\r\n\r\n        if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\r\n\r\n        let multiplier;\r\n        switch (this.data.spacingMode) {\r\n            case SpacingMode.Percent:\r\n                multiplier = pathLength;\r\n                break;\r\n            case SpacingMode.Proportional:\r\n                multiplier = pathLength / spacesCount;\r\n                break;\r\n            default:\r\n                multiplier = 1;\r\n        }\r\n\r\n        let segments = this.segments;\r\n        let curveLength = 0;\r\n        for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\r\n            let space = spaces[i] * multiplier;\r\n            position += space;\r\n            let p = position;\r\n\r\n            if (closed) {\r\n                p %= pathLength;\r\n                if (p < 0) p += pathLength;\r\n                curve = 0;\r\n            } else if (p < 0) {\r\n                this.addBeforePosition(p, world, 0, out, o);\r\n                continue;\r\n            } else if (p > pathLength) {\r\n                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\r\n                continue;\r\n            }\r\n\r\n            // Determine curve containing position.\r\n            for (; ; curve++) {\r\n                let length = curves[curve];\r\n                if (p > length) continue;\r\n                if (curve == 0)\r\n                    p /= length;\r\n                else {\r\n                    let prev = curves[curve - 1];\r\n                    p = (p - prev) / (length - prev);\r\n                }\r\n                break;\r\n            }\r\n\r\n            // Curve segment lengths.\r\n            if (curve != prevCurve) {\r\n                prevCurve = curve;\r\n                let ii = curve * 6;\r\n                x1 = world[ii];\r\n                y1 = world[ii + 1];\r\n                cx1 = world[ii + 2];\r\n                cy1 = world[ii + 3];\r\n                cx2 = world[ii + 4];\r\n                cy2 = world[ii + 5];\r\n                x2 = world[ii + 6];\r\n                y2 = world[ii + 7];\r\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\r\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\r\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\r\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\r\n                ddfx = tmpx * 2 + dddfx;\r\n                ddfy = tmpy * 2 + dddfy;\r\n                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\r\n                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\r\n                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\r\n                segments[0] = curveLength;\r\n                for (ii = 1; ii < 8; ii++) {\r\n                    dfx += ddfx;\r\n                    dfy += ddfy;\r\n                    ddfx += dddfx;\r\n                    ddfy += dddfy;\r\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n                    segments[ii] = curveLength;\r\n                }\r\n                dfx += ddfx;\r\n                dfy += ddfy;\r\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n                segments[8] = curveLength;\r\n                dfx += ddfx + dddfx;\r\n                dfy += ddfy + dddfy;\r\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n                segments[9] = curveLength;\r\n                segment = 0;\r\n            }\r\n\r\n            // Weight by segment length.\r\n            p *= curveLength;\r\n            for (; ; segment++) {\r\n                let length = segments[segment];\r\n                if (p > length) continue;\r\n                if (segment == 0)\r\n                    p /= length;\r\n                else {\r\n                    let prev = segments[segment - 1];\r\n                    p = segment + (p - prev) / (length - prev);\r\n                }\r\n                break;\r\n            }\r\n            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\r\n        }\r\n        return out;\r\n    }\r\n\r\n    addBeforePosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\r\n        let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\r\n        out[o] = x1 + p * Math.cos(r);\r\n        out[o + 1] = y1 + p * Math.sin(r);\r\n        out[o + 2] = r;\r\n    }\r\n\r\n    addAfterPosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\r\n        let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\r\n        out[o] = x1 + p * Math.cos(r);\r\n        out[o + 1] = y1 + p * Math.sin(r);\r\n        out[o + 2] = r;\r\n    }\r\n\r\n    addCurvePosition(p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number,\r\n                     out: Array<number>, o: number, tangents: boolean) {\r\n        if (p == 0 || isNaN(p)) {\r\n            out[o] = x1;\r\n            out[o + 1] = y1;\r\n            out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\r\n            return;\r\n        }\r\n        let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\r\n        let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\r\n        let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\r\n        out[o] = x;\r\n        out[o + 1] = y;\r\n        if (tangents) {\r\n            if (p < 0.001)\r\n                out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\r\n            else\r\n                out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\r\n        }\r\n    }\r\n}\r\n","import {Color, ISlot} from '@pixi-spine/base';\r\n\r\nimport type {Attachment} from './attachments/Attachment';\r\nimport type {Bone} from './Bone';\r\nimport type {SlotData} from './SlotData';\r\nimport type {Skeleton} from './Skeleton';\r\n\r\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\r\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\r\n * across multiple skeletons.\r\n * @public\r\n * */\r\nexport class Slot implements ISlot {\r\n    //this is canon\r\n    blendMode: number;\r\n    /** The slot's setup pose data. */\r\n    data: SlotData;\r\n\r\n    /** The bone this slot belongs to. */\r\n    bone: Bone;\r\n\r\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n     * color tinting. */\r\n    color: Color;\r\n\r\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n     * color's alpha is not used. */\r\n    darkColor: Color;\r\n\r\n    attachment: Attachment;\r\n\r\n    private attachmentTime: number;\r\n\r\n    attachmentState: number;\r\n\r\n    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\r\n     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\r\n     *\r\n     * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\r\n    deform = new Array<number>();\r\n\r\n    constructor (data: SlotData, bone: Bone) {\r\n        if (data == null) throw new Error(\"data cannot be null.\");\r\n        if (bone == null) throw new Error(\"bone cannot be null.\");\r\n        this.data = data;\r\n        this.bone = bone;\r\n        this.color = new Color();\r\n        this.darkColor = data.darkColor == null ? null : new Color();\r\n        this.setToSetupPose();\r\n\r\n        this.blendMode = this.data.blendMode;\r\n    }\r\n\r\n    /** The skeleton this slot belongs to. */\r\n    getSkeleton (): Skeleton {\r\n        return this.bone.skeleton;\r\n    }\r\n\r\n    /** The current attachment for the slot, or null if the slot has no attachment. */\r\n    getAttachment (): Attachment {\r\n        return this.attachment;\r\n    }\r\n\r\n    /** Sets the slot's attachment and, if the attachment changed, resets {@link #attachmentTime} and clears {@link #deform}.\r\n     * @param attachment May be null. */\r\n    setAttachment (attachment: Attachment) {\r\n        if (this.attachment == attachment) return;\r\n        this.attachment = attachment;\r\n        this.attachmentTime = this.bone.skeleton.time;\r\n        this.deform.length = 0;\r\n    }\r\n\r\n    setAttachmentTime (time: number) {\r\n        this.attachmentTime = this.bone.skeleton.time - time;\r\n    }\r\n\r\n    /** The time that has elapsed since the last time the attachment was set or cleared. Relies on Skeleton\r\n     * {@link Skeleton#time}. */\r\n    getAttachmentTime (): number {\r\n        return this.bone.skeleton.time - this.attachmentTime;\r\n    }\r\n\r\n    /** Sets this slot to the setup pose. */\r\n    setToSetupPose () {\r\n        this.color.setFromColor(this.data.color);\r\n        if (this.darkColor != null) this.darkColor.setFromColor(this.data.darkColor);\r\n        if (this.data.attachmentName == null)\r\n            this.attachment = null;\r\n        else {\r\n            this.attachment = null;\r\n            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\r\n        }\r\n    }\r\n}\r\n","import {Updatable} from \"./Updatable\";\r\nimport {TransformConstraintData} from \"./TransformConstraintData\";\r\nimport {Bone} from \"./Bone\";\r\nimport {MathUtils, Vector2} from \"@pixi-spine/base\";\r\nimport {Skeleton} from \"./Skeleton\";\r\n\r\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\r\n * bones to match that of the target bone.\r\n *\r\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class TransformConstraint implements Updatable {\r\n\r\n    /** The transform constraint's setup pose data. */\r\n    data: TransformConstraintData;\r\n\r\n    /** The bones that will be modified by this transform constraint. */\r\n    bones: Array<Bone>;\r\n\r\n    /** The target bone whose world transform will be copied to the constrained bones. */\r\n    target: Bone;\r\n\r\n    mixRotate = 0; mixX = 0; mixY = 0; mixScaleX = 0; mixScaleY = 0; mixShearY = 0;\r\n\r\n    temp = new Vector2();\r\n    active = false;\r\n\r\n    constructor (data: TransformConstraintData, skeleton: Skeleton) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        if (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n        this.data = data;\r\n        this.mixRotate = data.mixRotate;\r\n        this.mixX = data.mixX;\r\n        this.mixY = data.mixY;\r\n        this.mixScaleX = data.mixScaleX;\r\n        this.mixScaleY = data.mixScaleY;\r\n        this.mixShearY = data.mixShearY;\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0; i < data.bones.length; i++)\r\n            this.bones.push(skeleton.findBone(data.bones[i].name));\r\n        this.target = skeleton.findBone(data.target.name);\r\n    }\r\n\r\n    isActive () {\r\n        return this.active;\r\n    }\r\n\r\n    update () {\r\n        if (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleX == 0 && this.mixShearY == 0) return;\r\n\r\n        if (this.data.local) {\r\n            if (this.data.relative)\r\n                this.applyRelativeLocal();\r\n            else\r\n                this.applyAbsoluteLocal();\r\n        } else {\r\n            if (this.data.relative)\r\n                this.applyRelativeWorld();\r\n            else\r\n                this.applyAbsoluteWorld();\r\n        }\r\n    }\r\n\r\n    applyAbsoluteWorld () {\r\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n        let translate = mixX != 0 || mixY != 0;\r\n\r\n        let target = this.target;\r\n        const targetMat = target.matrix;\r\n        let ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;\r\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n        let offsetRotation = this.data.offsetRotation * degRadReflect;\r\n        let offsetShearY = this.data.offsetShearY * degRadReflect;\r\n\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            const mat = bone.matrix;\r\n\r\n            if (mixRotate != 0) {\r\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n                let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\r\n                if (r > MathUtils.PI)\r\n                    r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI) //\r\n                    r += MathUtils.PI2;\r\n                r *= mixRotate;\r\n                let cos = Math.cos(r), sin = Math.sin(r);\r\n                mat.a = cos * a - sin * c;\r\n                mat.c = cos * b - sin * d;\r\n                mat.b = sin * a + cos * c;\r\n                mat.d = sin * b + cos * d;\r\n            }\r\n\r\n            if (translate) {\r\n                let temp = this.temp;\r\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\r\n                mat.tx += (temp.x - mat.tx) * mixX;\r\n                mat.ty += (temp.y - mat.ty) * mixY;\r\n            }\r\n\r\n            if (mixScaleX != 0) {\r\n                let s = Math.sqrt(mat.a * mat.a + mat.b * mat.b);\r\n                if (s != 0) s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\r\n                mat.a *= s;\r\n                mat.b *= s;\r\n            }\r\n            if (mixScaleY != 0) {\r\n                let s = Math.sqrt(mat.c * mat.c + mat.d * mat.d);\r\n                if (s != 0) s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\r\n                mat.c *= s;\r\n                mat.d *= s;\r\n\r\n            }\r\n\r\n            if (mixShearY > 0) {\r\n                let b = mat.c, d = mat.d;\r\n                let by = Math.atan2(d, b);\r\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(mat.b, mat.a));\r\n                if (r > MathUtils.PI)\r\n                    r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI) //\r\n                    r += MathUtils.PI2;\r\n                r = by + (r + offsetShearY) * mixShearY;\r\n                let s = Math.sqrt(b * b + d * d);\r\n                mat.c = Math.cos(r) * s;\r\n                mat.d = Math.sin(r) * s;\r\n\r\n            }\r\n\r\n            bone.updateAppliedTransform();\r\n        }\r\n    }\r\n\r\n    applyRelativeWorld () {\r\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n        let translate = mixX != 0 || mixY != 0;\r\n\r\n        let target = this.target;\r\n        let targetMat = target.matrix;\r\n        let ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;\r\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n        let offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;\r\n\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            const mat = bone.matrix;\r\n\r\n            if (mixRotate != 0) {\r\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\r\n                let r = Math.atan2(tc, ta) + offsetRotation;\r\n                if (r > MathUtils.PI)\r\n                    r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI) //\r\n                    r += MathUtils.PI2;\r\n                r *= mixRotate;\r\n                let cos = Math.cos(r), sin = Math.sin(r);\r\n                mat.a = cos * a - sin * c;\r\n                mat.c = cos * b - sin * d;\r\n                mat.b = sin * a + cos * c;\r\n                mat.d = sin * b + cos * d;\r\n            }\r\n\r\n            if (translate) {\r\n                let temp = this.temp;\r\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\r\n                mat.tx += temp.x * mixX;\r\n                mat.ty += temp.y * mixY;\r\n            }\r\n\r\n            if (mixScaleX != 0) {\r\n                let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\r\n                mat.a *= s;\r\n                mat.b *= s;\r\n            }\r\n            if (mixScaleY != 0) {\r\n                let s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\r\n                mat.c *= s;\r\n                mat.d *= s;\r\n            }\r\n\r\n            if (mixShearY > 0) {\r\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\r\n                if (r > MathUtils.PI)\r\n                    r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI) //\r\n                    r += MathUtils.PI2;\r\n                let b = mat.c, d = mat.d;\r\n                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\r\n                let s = Math.sqrt(b * b + d * d);\r\n                mat.c = Math.cos(r) * s;\r\n                mat.d = Math.sin(r) * s;\r\n            }\r\n\r\n            bone.updateAppliedTransform();\r\n        }\r\n    }\r\n\r\n    applyAbsoluteLocal () {\r\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n\r\n        let target = this.target;\r\n\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n\r\n            let rotation = bone.arotation;\r\n            if (mixRotate != 0) {\r\n                let r = target.arotation - rotation + this.data.offsetRotation;\r\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\r\n                rotation += r * mixRotate;\r\n            }\r\n\r\n            let x = bone.ax, y = bone.ay;\r\n            x += (target.ax - x + this.data.offsetX) * mixX;\r\n            y += (target.ay - y + this.data.offsetY) * mixY;\r\n\r\n            let scaleX = bone.ascaleX, scaleY = bone.ascaleY;\r\n            if (mixScaleX != 0 && scaleX != 0)\r\n                scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\r\n            if (mixScaleY != 0 && scaleY != 0)\r\n                scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\r\n\r\n            let shearY = bone.ashearY;\r\n            if (mixShearY != 0) {\r\n                let r = target.ashearY - shearY + this.data.offsetShearY;\r\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\r\n                shearY += r * mixShearY;\r\n            }\r\n\r\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\r\n        }\r\n    }\r\n\r\n    applyRelativeLocal () {\r\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n            mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n\r\n        let target = this.target;\r\n\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n\r\n            let rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\r\n            let x = bone.ax + (target.ax + this.data.offsetX) * mixX;\r\n            let y = bone.ay + (target.ay + this.data.offsetY) * mixY;\r\n            let scaleX = bone.ascaleX * (((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);\r\n            let scaleY = bone.ascaleY * (((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);\r\n            let shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\r\n\r\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\r\n        }\r\n    }\r\n}\r\n","import {Attachment, RegionAttachment, MeshAttachment, PathAttachment} from './attachments';\r\nimport {Bone} from \"./Bone\";\r\nimport {Slot} from \"./Slot\";\r\nimport {Updatable} from \"./Updatable\";\r\nimport {SkeletonData} from \"./SkeletonData\";\r\nimport {IkConstraint} from \"./IkConstraint\";\r\nimport {TransformConstraint} from \"./TransformConstraint\";\r\nimport {PathConstraint} from \"./PathConstraint\";\r\nimport {Skin} from \"./Skin\";\r\nimport {Color, MathUtils, NumberArrayLike, settings, Utils, Vector2, ISkeleton} from \"@pixi-spine/base\";\r\n\r\n/** Stores the current pose for a skeleton.\r\n *\r\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide.\r\n * @public\r\n * */\r\nexport class Skeleton implements ISkeleton<SkeletonData, Bone, Slot, Skin> {\r\n    /** The skeleton's setup pose data. */\r\n    data: SkeletonData = null;\r\n\r\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\r\n    bones: Array<Bone> = null;\r\n\r\n    /** The skeleton's slots. */\r\n    slots: Array<Slot> = null;\r\n\r\n    /** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */\r\n    drawOrder: Array<Slot> = null;\r\n\r\n    /** The skeleton's IK constraints. */\r\n    ikConstraints: Array<IkConstraint> = null;\r\n\r\n    /** The skeleton's transform constraints. */\r\n    transformConstraints: Array<TransformConstraint> = null;\r\n\r\n    /** The skeleton's path constraints. */\r\n    pathConstraints: Array<PathConstraint> = null;\r\n\r\n    /** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\r\n    _updateCache = new Array<Updatable>();\r\n\r\n    /** The skeleton's current skin. May be null. */\r\n    skin: Skin = null;\r\n\r\n    /** The color to tint all the skeleton's attachments. */\r\n    color: Color = null;\r\n\r\n    /** Returns the skeleton's time. This can be used for tracking, such as with Slot {@link Slot#attachmentTime}.\r\n     * <p>\r\n     * See {@link #update()}. */\r\n    time = 0;\r\n\r\n    /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\r\n     * inheritance. */\r\n    scaleX = 1;\r\n\r\n    /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\r\n     * inheritance. */\r\n    scaleY = 1;\r\n\r\n    /** Sets the skeleton X position, which is added to the root bone worldX position. */\r\n    x = 0;\r\n\r\n    /** Sets the skeleton Y position, which is added to the root bone worldY position. */\r\n    y = 0;\r\n\r\n    constructor (data: SkeletonData) {\r\n        if (!data) throw new Error(\"data cannot be null.\");\r\n        this.data = data;\r\n\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0; i < data.bones.length; i++) {\r\n            let boneData = data.bones[i];\r\n            let bone: Bone;\r\n            if (!boneData.parent)\r\n                bone = new Bone(boneData, this, null);\r\n            else {\r\n                let parent = this.bones[boneData.parent.index];\r\n                bone = new Bone(boneData, this, parent);\r\n                parent.children.push(bone);\r\n            }\r\n            this.bones.push(bone);\r\n        }\r\n\r\n        this.slots = new Array<Slot>();\r\n        this.drawOrder = new Array<Slot>();\r\n        for (let i = 0; i < data.slots.length; i++) {\r\n            let slotData = data.slots[i];\r\n            let bone = this.bones[slotData.boneData.index];\r\n            let slot = new Slot(slotData, bone);\r\n            this.slots.push(slot);\r\n            this.drawOrder.push(slot);\r\n        }\r\n\r\n        this.ikConstraints = new Array<IkConstraint>();\r\n        for (let i = 0; i < data.ikConstraints.length; i++) {\r\n            let ikConstraintData = data.ikConstraints[i];\r\n            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\r\n        }\r\n\r\n        this.transformConstraints = new Array<TransformConstraint>();\r\n        for (let i = 0; i < data.transformConstraints.length; i++) {\r\n            let transformConstraintData = data.transformConstraints[i];\r\n            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\r\n        }\r\n\r\n        this.pathConstraints = new Array<PathConstraint>();\r\n        for (let i = 0; i < data.pathConstraints.length; i++) {\r\n            let pathConstraintData = data.pathConstraints[i];\r\n            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\r\n        }\r\n\r\n        this.color = new Color(1, 1, 1, 1);\r\n        this.updateCache();\r\n    }\r\n\r\n    /** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\r\n     * constraints, or weighted path attachments are added or removed. */\r\n    updateCache () {\r\n        let updateCache = this._updateCache;\r\n        updateCache.length = 0;\r\n\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            bone.sorted = bone.data.skinRequired;\r\n            bone.active = !bone.sorted;\r\n        }\r\n\r\n        if (this.skin) {\r\n            let skinBones = this.skin.bones;\r\n            for (let i = 0, n = this.skin.bones.length; i < n; i++) {\r\n                let bone = this.bones[skinBones[i].index];\r\n                do {\r\n                    bone.sorted = false;\r\n                    bone.active = true;\r\n                    bone = bone.parent;\r\n                } while (bone);\r\n            }\r\n        }\r\n\r\n        // IK first, lowest hierarchy depth first.\r\n        let ikConstraints = this.ikConstraints;\r\n        let transformConstraints = this.transformConstraints;\r\n        let pathConstraints = this.pathConstraints;\r\n        let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\r\n        let constraintCount = ikCount + transformCount + pathCount;\r\n\r\n        outer:\r\n            for (let i = 0; i < constraintCount; i++) {\r\n                for (let ii = 0; ii < ikCount; ii++) {\r\n                    let constraint = ikConstraints[ii];\r\n                    if (constraint.data.order == i) {\r\n                        this.sortIkConstraint(constraint);\r\n                        continue outer;\r\n                    }\r\n                }\r\n                for (let ii = 0; ii < transformCount; ii++) {\r\n                    let constraint = transformConstraints[ii];\r\n                    if (constraint.data.order == i) {\r\n                        this.sortTransformConstraint(constraint);\r\n                        continue outer;\r\n                    }\r\n                }\r\n                for (let ii = 0; ii < pathCount; ii++) {\r\n                    let constraint = pathConstraints[ii];\r\n                    if (constraint.data.order == i) {\r\n                        this.sortPathConstraint(constraint);\r\n                        continue outer;\r\n                    }\r\n                }\r\n            }\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++)\r\n            this.sortBone(bones[i]);\r\n    }\r\n\r\n    sortIkConstraint (constraint: IkConstraint) {\r\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\r\n        if (!constraint.active) return;\r\n\r\n        let target = constraint.target;\r\n        this.sortBone(target);\r\n\r\n        let constrained = constraint.bones;\r\n        let parent = constrained[0];\r\n        this.sortBone(parent);\r\n\r\n        if (constrained.length == 1) {\r\n            this._updateCache.push(constraint);\r\n            this.sortReset(parent.children);\r\n        } else {\r\n            let child = constrained[constrained.length - 1];\r\n            this.sortBone(child);\r\n\r\n            this._updateCache.push(constraint);\r\n\r\n            this.sortReset(parent.children);\r\n            child.sorted = true;\r\n        }\r\n    }\r\n\r\n    sortPathConstraint (constraint: PathConstraint) {\r\n        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\r\n        if (!constraint.active) return;\r\n\r\n        let slot = constraint.target;\r\n        let slotIndex = slot.data.index;\r\n        let slotBone = slot.bone;\r\n        if (this.skin) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\r\n        if (this.data.defaultSkin && this.data.defaultSkin != this.skin)\r\n            this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\r\n        for (let i = 0, n = this.data.skins.length; i < n; i++)\r\n            this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\r\n\r\n        let attachment = slot.getAttachment();\r\n        if (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\r\n\r\n        let constrained = constraint.bones;\r\n        let boneCount = constrained.length;\r\n        for (let i = 0; i < boneCount; i++)\r\n            this.sortBone(constrained[i]);\r\n\r\n        this._updateCache.push(constraint);\r\n\r\n        for (let i = 0; i < boneCount; i++)\r\n            this.sortReset(constrained[i].children);\r\n        for (let i = 0; i < boneCount; i++)\r\n            constrained[i].sorted = true;\r\n    }\r\n\r\n    sortTransformConstraint (constraint: TransformConstraint) {\r\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\r\n        if (!constraint.active) return;\r\n\r\n        this.sortBone(constraint.target);\r\n\r\n        let constrained = constraint.bones;\r\n        let boneCount = constrained.length;\r\n        if (constraint.data.local) {\r\n            for (let i = 0; i < boneCount; i++) {\r\n                let child = constrained[i];\r\n                this.sortBone(child.parent);\r\n                this.sortBone(child);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < boneCount; i++) {\r\n                this.sortBone(constrained[i]);\r\n            }\r\n        }\r\n\r\n        this._updateCache.push(constraint);\r\n\r\n        for (let i = 0; i < boneCount; i++)\r\n            this.sortReset(constrained[i].children);\r\n        for (let i = 0; i < boneCount; i++)\r\n            constrained[i].sorted = true;\r\n    }\r\n\r\n    sortPathConstraintAttachment (skin: Skin, slotIndex: number, slotBone: Bone) {\r\n        let attachments = skin.attachments[slotIndex];\r\n        if (!attachments) return;\r\n        for (let key in attachments) {\r\n            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\r\n        }\r\n    }\r\n\r\n    sortPathConstraintAttachmentWith (attachment: Attachment, slotBone: Bone) {\r\n        if (!(attachment instanceof PathAttachment)) return;\r\n        let pathBones = (<PathAttachment>attachment).bones;\r\n        if (!pathBones)\r\n            this.sortBone(slotBone);\r\n        else {\r\n            let bones = this.bones;\r\n            for (let i = 0, n = pathBones.length; i < n;) {\r\n                let nn = pathBones[i++];\r\n                nn += i;\r\n                while (i < nn)\r\n                    this.sortBone(bones[pathBones[i++]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    sortBone (bone: Bone) {\r\n        if (bone.sorted) return;\r\n        let parent = bone.parent;\r\n        if (parent) this.sortBone(parent);\r\n        bone.sorted = true;\r\n        this._updateCache.push(bone);\r\n    }\r\n\r\n    sortReset (bones: Array<Bone>) {\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            if (!bone.active) continue;\r\n            if (bone.sorted) this.sortReset(bone.children);\r\n            bone.sorted = false;\r\n        }\r\n    }\r\n\r\n    /** Updates the world transform for each bone and applies all constraints.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide. */\r\n    updateWorldTransform () {\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            bone.ax = bone.x;\r\n            bone.ay = bone.y;\r\n            bone.arotation = bone.rotation;\r\n            bone.ascaleX = bone.scaleX;\r\n            bone.ascaleY = bone.scaleY;\r\n            bone.ashearX = bone.shearX;\r\n            bone.ashearY = bone.shearY;\r\n        }\r\n\r\n        let updateCache = this._updateCache;\r\n        for (let i = 0, n = updateCache.length; i < n; i++)\r\n            updateCache[i].update();\r\n    }\r\n\r\n    updateWorldTransformWith (parent: Bone) {\r\n        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\r\n        let rootBone = this.getRootBone();\r\n        let pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\r\n        rootBone.matrix.tx = pa * this.x + pb * this.y + parent.worldX;\r\n        rootBone.matrix.ty = pc * this.x + pd * this.y + parent.worldY;\r\n\r\n        let rotationY = rootBone.rotation + 90 + rootBone.shearY;\r\n        let la = MathUtils.cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\r\n        let lb = MathUtils.cosDeg(rotationY) * rootBone.scaleY;\r\n        let lc = MathUtils.sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\r\n        let ld = MathUtils.sinDeg(rotationY) * rootBone.scaleY;\r\n\r\n        const sx = this.scaleX;\r\n        const sy = settings.yDown? -this.scaleY : this.scaleY;\r\n        rootBone.matrix.a = (pa * la + pb * lc) * sx;\r\n        rootBone.matrix.c = (pa * lb + pb * ld) * sx;\r\n        rootBone.matrix.b = (pc * la + pd * lc) * sy;\r\n        rootBone.matrix.d = (pc * lb + pd * ld) * sy;\r\n\r\n        // Update everything except root bone.\r\n        let updateCache = this._updateCache;\r\n        for (let i = 0, n = updateCache.length; i < n; i++) {\r\n            let updatable = updateCache[i];\r\n            if (updatable != rootBone) updatable.update();\r\n        }\r\n    }\r\n\r\n    /** Sets the bones, constraints, and slots to their setup pose values. */\r\n    setToSetupPose () {\r\n        this.setBonesToSetupPose();\r\n        this.setSlotsToSetupPose();\r\n    }\r\n\r\n    /** Sets the bones and constraints to their setup pose values. */\r\n    setBonesToSetupPose () {\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++)\r\n            bones[i].setToSetupPose();\r\n\r\n        let ikConstraints = this.ikConstraints;\r\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n            let constraint = ikConstraints[i];\r\n            constraint.mix = constraint.data.mix;\r\n            constraint.softness = constraint.data.softness;\r\n            constraint.bendDirection = constraint.data.bendDirection;\r\n            constraint.compress = constraint.data.compress;\r\n            constraint.stretch = constraint.data.stretch;\r\n        }\r\n\r\n        let transformConstraints = this.transformConstraints;\r\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n            let constraint = transformConstraints[i];\r\n            let data = constraint.data;\r\n            constraint.mixRotate = data.mixRotate;\r\n            constraint.mixX = data.mixX;\r\n            constraint.mixY = data.mixY;\r\n            constraint.mixScaleX = data.mixScaleX;\r\n            constraint.mixScaleY = data.mixScaleY;\r\n            constraint.mixShearY = data.mixShearY;\r\n        }\r\n\r\n        let pathConstraints = this.pathConstraints;\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n            let constraint = pathConstraints[i];\r\n            let data = constraint.data;\r\n            constraint.position = data.position;\r\n            constraint.spacing = data.spacing;\r\n            constraint.mixRotate = data.mixRotate;\r\n            constraint.mixX = data.mixX;\r\n            constraint.mixY = data.mixY;\r\n        }\r\n    }\r\n\r\n    /** Sets the slots and draw order to their setup pose values. */\r\n    setSlotsToSetupPose () {\r\n        let slots = this.slots;\r\n        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\r\n        for (let i = 0, n = slots.length; i < n; i++)\r\n            slots[i].setToSetupPose();\r\n    }\r\n\r\n    /** @returns May return null. */\r\n    getRootBone () {\r\n        if (this.bones.length == 0) return null;\r\n        return this.bones[0];\r\n    }\r\n\r\n    /** @returns May be null. */\r\n    findBone (boneName: string) {\r\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            if (bone.data.name == boneName) return bone;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** @returns -1 if the bone was not found. */\r\n    findBoneIndex (boneName: string) {\r\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return i;\r\n        return -1;\r\n    }\r\n\r\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\r\n     * repeatedly.\r\n     * @returns May be null. */\r\n    findSlot (slotName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            let slot = slots[i];\r\n            if (slot.data.name == slotName) return slot;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** @returns -1 if the bone was not found. */\r\n    findSlotIndex (slotName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return i;\r\n        return -1;\r\n    }\r\n\r\n    /** Sets a skin by name.\r\n     *\r\n     * See {@link #setSkin()}. */\r\n    setSkinByName (skinName: string) {\r\n        let skin = this.data.findSkin(skinName);\r\n        if (!skin) throw new Error(\"Skin not found: \" + skinName);\r\n        this.setSkin(skin);\r\n    }\r\n\r\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\r\n     * skin is changed, {@link #updateCache()} is called.\r\n     *\r\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\r\n     * old skin, each slot's setup mode attachment is attached from the new skin.\r\n     *\r\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\r\n     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\r\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\r\n     * @param newSkin May be null. */\r\n    setSkin (newSkin: Skin) {\r\n        if (newSkin == this.skin) return;\r\n        if (newSkin) {\r\n            if (this.skin)\r\n                newSkin.attachAll(this, this.skin);\r\n            else {\r\n                let slots = this.slots;\r\n                for (let i = 0, n = slots.length; i < n; i++) {\r\n                    let slot = slots[i];\r\n                    let name = slot.data.attachmentName;\r\n                    if (name) {\r\n                        let attachment: Attachment = newSkin.getAttachment(i, name);\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.skin = newSkin;\r\n        this.updateCache();\r\n    }\r\n\r\n\r\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\r\n     * name.\r\n     *\r\n     * See {@link #getAttachment()}.\r\n     * @returns May be null. */\r\n    getAttachmentByName (slotName: string, attachmentName: string): Attachment {\r\n        return this.getAttachment(this.data.findSlot(slotName).index, attachmentName);\r\n    }\r\n\r\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\r\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\r\n     *\r\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\r\n     * @returns May be null. */\r\n    getAttachment (slotIndex: number, attachmentName: string): Attachment {\r\n        if (!attachmentName) throw new Error(\"attachmentName cannot be null.\");\r\n        if (this.skin) {\r\n            let attachment: Attachment = this.skin.getAttachment(slotIndex, attachmentName);\r\n            if (attachment) return attachment;\r\n        }\r\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\r\n        return null;\r\n    }\r\n\r\n    /** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\r\n     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\r\n     * @param attachmentName May be null to clear the slot's attachment. */\r\n    setAttachment (slotName: string, attachmentName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            let slot = slots[i];\r\n            if (slot.data.name == slotName) {\r\n                let attachment: Attachment = null;\r\n                if (attachmentName) {\r\n                    attachment = this.getAttachment(i, attachmentName);\r\n                    if (!attachment) throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\r\n                }\r\n                slot.setAttachment(attachment);\r\n                return;\r\n            }\r\n        }\r\n        throw new Error(\"Slot not found: \" + slotName);\r\n    }\r\n\r\n\r\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it repeatedly.\r\n     * @return May be null. */\r\n    findIkConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let ikConstraints = this.ikConstraints;\r\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n            let ikConstraint = ikConstraints[i];\r\n            if (ikConstraint.data.name == constraintName) return ikConstraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\r\n     * this method than to call it repeatedly.\r\n     * @return May be null. */\r\n    findTransformConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let transformConstraints = this.transformConstraints;\r\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n            let constraint = transformConstraints[i];\r\n            if (constraint.data.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it repeatedly.\r\n     * @return May be null. */\r\n    findPathConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let pathConstraints = this.pathConstraints;\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n            let constraint = pathConstraints[i];\r\n            if (constraint.data.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as `{ x: number, y: number, width: number, height: number }`.\r\n     * Note that this method will create temporary objects which can add to garbage collection pressure. Use `getBounds()` if garbage collection is a concern. */\r\n    getBoundsRect () {\r\n        let offset = new Vector2();\r\n        let size = new Vector2();\r\n        this.getBounds(offset, size);\r\n        return { x: offset.x, y: offset.y, width: size.x, height: size.y };\r\n    }\r\n\r\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\r\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\r\n     * @param size An output value, the width and height of the AABB.\r\n     * @param temp Working memory to temporarily store attachments' computed world vertices. */\r\n    getBounds (offset: Vector2, size: Vector2, temp: Array<number> = new Array<number>(2)) {\r\n        if (!offset) throw new Error(\"offset cannot be null.\");\r\n        if (!size) throw new Error(\"size cannot be null.\");\r\n        let drawOrder = this.drawOrder;\r\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\r\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\r\n            let slot = drawOrder[i];\r\n            if (!slot.bone.active) continue;\r\n            let verticesLength = 0;\r\n            let vertices: NumberArrayLike = null;\r\n            let attachment = slot.getAttachment();\r\n            if (attachment instanceof RegionAttachment) {\r\n                verticesLength = 8;\r\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\r\n                (<RegionAttachment>attachment).computeWorldVertices(slot.bone, vertices, 0, 2);\r\n            } else if (attachment instanceof MeshAttachment) {\r\n                let mesh = (<MeshAttachment>attachment);\r\n                verticesLength = mesh.worldVerticesLength;\r\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\r\n                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\r\n            }\r\n            if (vertices) {\r\n                for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\r\n                    let x = vertices[ii], y = vertices[ii + 1];\r\n                    minX = Math.min(minX, x);\r\n                    minY = Math.min(minY, y);\r\n                    maxX = Math.max(maxX, x);\r\n                    maxY = Math.max(maxY, y);\r\n                }\r\n            }\r\n        }\r\n        offset.set(minX, minY);\r\n        size.set(maxX - minX, maxY - minY);\r\n    }\r\n\r\n    /** Increments the skeleton's {@link #time}. */\r\n    update (delta: number) {\r\n        this.time += delta;\r\n    }\r\n\r\n    get flipX(): boolean {\r\n        return this.scaleX == -1;\r\n    }\r\n\r\n    set flipX(value: boolean) {\r\n        if (!Skeleton.deprecatedWarning1) {\r\n            Skeleton.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\r\n        }\r\n        this.scaleX = value ? 1.0 : -1.0;\r\n    }\r\n\r\n    get flipY(): boolean {\r\n        return this.scaleY == -1;\r\n    }\r\n\r\n    set flipY(value: boolean) {\r\n        if (!Skeleton.deprecatedWarning1) {\r\n            Skeleton.deprecatedWarning1 = true;\r\n            console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\r\n        }\r\n        this.scaleY = value ? 1.0 : -1.0;\r\n    }\r\n\r\n    private static deprecatedWarning1: boolean = false;\r\n}\r\n","import type {ISkeletonData} from \"@pixi-spine/base\";\r\nimport type {Animation} from \"./Animation\";\r\nimport {BoneData} from \"./BoneData\";\r\nimport {SlotData} from \"./SlotData\";\r\nimport {Skin} from \"./Skin\";\r\nimport {EventData} from \"./EventData\";\r\nimport {IkConstraintData} from \"./IkConstraintData\";\r\nimport {TransformConstraintData} from \"./TransformConstraintData\";\r\nimport {PathConstraintData} from \"./PathConstraintData\";\r\n\r\n/** Stores the setup pose and all of the stateless data for a skeleton.\r\n *\r\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\r\n * Guide.\r\n * @public\r\n * */\r\nexport class SkeletonData implements ISkeletonData<BoneData, SlotData, Skin, Animation, EventData, IkConstraintData, TransformConstraintData, PathConstraintData> {\r\n\r\n    /** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\r\n    name: string = null;\r\n\r\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\r\n    bones = new Array<BoneData>(); // Ordered parents first.\r\n\r\n    /** The skeleton's slots. */\r\n    slots = new Array<SlotData>(); // Setup pose draw order.\r\n    skins = new Array<Skin>();\r\n\r\n    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\r\n     *\r\n     * See {@link Skeleton#getAttachmentByName()}.\r\n     * May be null. */\r\n    defaultSkin: Skin = null;\r\n\r\n    /** The skeleton's events. */\r\n    events = new Array<EventData>();\r\n\r\n    /** The skeleton's animations. */\r\n    animations = new Array<Animation>();\r\n\r\n    /** The skeleton's IK constraints. */\r\n    ikConstraints = new Array<IkConstraintData>();\r\n\r\n    /** The skeleton's transform constraints. */\r\n    transformConstraints = new Array<TransformConstraintData>();\r\n\r\n    /** The skeleton's path constraints. */\r\n    pathConstraints = new Array<PathConstraintData>();\r\n\r\n    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\r\n    x: number = 0;\r\n\r\n    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\r\n    y: number = 0;\r\n\r\n    /** The width of the skeleton's axis aligned bounding box in the setup pose. */\r\n    width: number = 0;\r\n\r\n    /** The height of the skeleton's axis aligned bounding box in the setup pose. */\r\n    height: number = 0;\r\n\r\n    /** The Spine version used to export the skeleton data, or null. */\r\n    version: string = null;\r\n\r\n    /** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\r\n    hash: string = null;\r\n\r\n    // Nonessential\r\n    /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\r\n    fps = 0;\r\n\r\n    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\r\n    imagesPath: string = null;\r\n\r\n    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\r\n    audioPath: string = null;\r\n\r\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findBone (boneName: string) {\r\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            let bone = bones[i];\r\n            if (bone.name == boneName) return bone;\r\n        }\r\n        return null;\r\n    }\r\n\r\n/** removed from spine-ts runtime **/\r\n    findBoneIndex (boneName: string) {\r\n        if (!boneName) throw new Error(\"boneName cannot be null.\");\r\n        let bones = this.bones;\r\n        for (let i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].name == boneName) return i;\r\n        return -1;\r\n    }\r\n\r\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findSlot (slotName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            let slot = slots[i];\r\n            if (slot.name == slotName) return slot;\r\n        }\r\n        return null;\r\n    }\r\n\r\n/** removed from spine-ts runtime **/\r\n    findSlotIndex (slotName: string) {\r\n        if (!slotName) throw new Error(\"slotName cannot be null.\");\r\n        let slots = this.slots;\r\n        for (let i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].name == slotName) return i;\r\n        return -1;\r\n    }\r\n\r\n    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findSkin (skinName: string) {\r\n        if (!skinName) throw new Error(\"skinName cannot be null.\");\r\n        let skins = this.skins;\r\n        for (let i = 0, n = skins.length; i < n; i++) {\r\n            let skin = skins[i];\r\n            if (skin.name == skinName) return skin;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\r\n     * multiple times.\r\n     * @returns May be null. */\r\n    findEvent (eventDataName: string) {\r\n        if (!eventDataName) throw new Error(\"eventDataName cannot be null.\");\r\n        let events = this.events;\r\n        for (let i = 0, n = events.length; i < n; i++) {\r\n            let event = events[i];\r\n            if (event.name == eventDataName) return event;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\r\n     * call it multiple times.\r\n     * @returns May be null. */\r\n    findAnimation (animationName: string) {\r\n        if (!animationName) throw new Error(\"animationName cannot be null.\");\r\n        let animations = this.animations;\r\n        for (let i = 0, n = animations.length; i < n; i++) {\r\n            let animation = animations[i];\r\n            if (animation.name == animationName) return animation;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it multiple times.\r\n     * @return May be null. */\r\n    findIkConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let ikConstraints = this.ikConstraints;\r\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n            let constraint = ikConstraints[i];\r\n            if (constraint.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\r\n     * this method than to call it multiple times.\r\n     * @return May be null. */\r\n    findTransformConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let transformConstraints = this.transformConstraints;\r\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n            let constraint = transformConstraints[i];\r\n            if (constraint.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it multiple times.\r\n     * @return May be null. */\r\n    findPathConstraint (constraintName: string) {\r\n        if (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n        let pathConstraints = this.pathConstraints;\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n            let constraint = pathConstraints[i];\r\n            if (constraint.name == constraintName) return constraint;\r\n        }\r\n        return null;\r\n    }\r\n\r\n/** removed from spine-ts runtime **/    findPathConstraintIndex (pathConstraintName: string) {\r\n        if (pathConstraintName == null) throw new Error(\"pathConstraintName cannot be null.\");\r\n        let pathConstraints = this.pathConstraints;\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++)\r\n            if (pathConstraints[i].name == pathConstraintName) return i;\r\n        return -1;\r\n    }\r\n}\r\n","import {Color} from '@pixi-spine/base';\r\n\r\nimport type {ISlotData} from '@pixi-spine/base';\r\nimport type {BLEND_MODES} from '@pixi/constants';\r\nimport {BoneData} from \"./BoneData\";\r\n\r\n/** Stores the setup pose for a {@link Slot}.\r\n * @public\r\n * */\r\nexport class SlotData implements ISlotData {\r\n\r\n    /** The index of the slot in {@link Skeleton#getSlots()}. */\r\n    index: number;\r\n\r\n    /** The name of the slot, which is unique across all slots in the skeleton. */\r\n    name: string;\r\n\r\n    /** The bone this slot belongs to. */\r\n    boneData: BoneData;\r\n\r\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n     * color tinting. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n     * color's alpha is not used. */\r\n    darkColor: Color;\r\n\r\n    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\r\n    attachmentName: string;\r\n\r\n    /** The blend mode for drawing the slot's attachment. */\r\n    blendMode: BLEND_MODES;\r\n\r\n    constructor (index: number, name: string, boneData: BoneData) {\r\n        if (index < 0) throw new Error(\"index must be >= 0.\");\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        if (!boneData) throw new Error(\"boneData cannot be null.\");\r\n        this.index = index;\r\n        this.name = name;\r\n        this.boneData = boneData;\r\n    }\r\n}\r\n\r\n","import {BoneData} from './BoneData';\r\nimport {ConstraintData} from './ConstraintData';\r\n\r\n/** Stores the setup pose for a {@link TransformConstraint}.\r\n *\r\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class TransformConstraintData extends ConstraintData {\r\n\r\n    /** The bones that will be modified by this transform constraint. */\r\n    bones = new Array<BoneData>();\r\n\r\n    /** The target bone whose world transform will be copied to the constrained bones. */\r\n    target: BoneData;\r\n\r\n    mixRotate = 0;\r\n    mixX = 0;\r\n    mixY = 0;\r\n    mixScaleX = 0;\r\n    mixScaleY = 0;\r\n    mixShearY = 0;\r\n\r\n    /** An offset added to the constrained bone rotation. */\r\n    offsetRotation = 0;\r\n\r\n    /** An offset added to the constrained bone X translation. */\r\n    offsetX = 0;\r\n\r\n    /** An offset added to the constrained bone Y translation. */\r\n    offsetY = 0;\r\n\r\n    /** An offset added to the constrained bone scaleX. */\r\n    offsetScaleX = 0;\r\n\r\n    /** An offset added to the constrained bone scaleY. */\r\n    offsetScaleY = 0;\r\n\r\n    /** An offset added to the constrained bone shearY. */\r\n    offsetShearY = 0;\r\n\r\n    relative = false;\r\n    local = false;\r\n\r\n    constructor (name: string) {\r\n        super(name, 0, false);\r\n    }\r\n}\r\n","import {Attachment, MeshAttachment} from './attachments';\r\nimport {BoneData} from \"./BoneData\";\r\nimport {ConstraintData} from \"./ConstraintData\";\r\nimport {Skeleton} from \"./Skeleton\";\r\n\r\nimport type {Map, ISkin} from '@pixi-spine/base';\r\n\r\n/** Stores an entry in the skin consisting of the slot index, name, and attachment\r\n * @public\r\n * **/\r\nexport class SkinEntry {\r\n    constructor(public slotIndex: number, public name: string, public attachment: Attachment) { }\r\n}\r\n\r\n/** Stores attachments by slot index and attachment name.\r\n *\r\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\r\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\r\n * @public\r\n * */\r\nexport class Skin implements ISkin {\r\n    /** The skin's name, which is unique across all skins in the skeleton. */\r\n    name: string;\r\n\r\n    attachments = new Array<Map<Attachment>>();\r\n    bones = Array<BoneData>();\r\n    constraints = new Array<ConstraintData>();\r\n\r\n    constructor (name: string) {\r\n        if (!name) throw new Error(\"name cannot be null.\");\r\n        this.name = name;\r\n    }\r\n\r\n    /** Adds an attachment to the skin for the specified slot index and name. */\r\n    setAttachment (slotIndex: number, name: string, attachment: Attachment) {\r\n        if (!attachment) throw new Error(\"attachment cannot be null.\");\r\n        let attachments = this.attachments;\r\n        if (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\r\n        if (!attachments[slotIndex]) attachments[slotIndex] = { };\r\n        attachments[slotIndex][name] = attachment;\r\n    }\r\n\r\n    /** Adds all attachments, bones, and constraints from the specified skin to this skin. */\r\n    addSkin (skin: Skin) {\r\n        for(let i = 0; i < skin.bones.length; i++) {\r\n            let bone = skin.bones[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.bones.length; ii++) {\r\n                if (this.bones[ii] == bone) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.bones.push(bone);\r\n        }\r\n\r\n        for(let i = 0; i < skin.constraints.length; i++) {\r\n            let constraint = skin.constraints[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.constraints.length; ii++) {\r\n                if (this.constraints[ii] == constraint) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.constraints.push(constraint);\r\n        }\r\n\r\n        let attachments = skin.getAttachments();\r\n        for (let i = 0; i < attachments.length; i++) {\r\n            var attachment = attachments[i];\r\n            this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n        }\r\n    }\r\n\r\n    /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\r\n     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\r\n    copySkin (skin: Skin) {\r\n        for(let i = 0; i < skin.bones.length; i++) {\r\n            let bone = skin.bones[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.bones.length; ii++) {\r\n                if (this.bones[ii] == bone) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.bones.push(bone);\r\n        }\r\n\r\n        for(let i = 0; i < skin.constraints.length; i++) {\r\n            let constraint = skin.constraints[i];\r\n            let contained = false;\r\n            for (let ii = 0; ii < this.constraints.length; ii++) {\r\n                if (this.constraints[ii] == constraint) {\r\n                    contained = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contained) this.constraints.push(constraint);\r\n        }\r\n\r\n        let attachments = skin.getAttachments();\r\n        for (let i = 0; i < attachments.length; i++) {\r\n            var attachment = attachments[i];\r\n            if (!attachment.attachment) continue;\r\n            if (attachment.attachment instanceof MeshAttachment) {\r\n                attachment.attachment = attachment.attachment.newLinkedMesh();\r\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n            } else {\r\n                attachment.attachment = attachment.attachment.copy();\r\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns the attachment for the specified slot index and name, or null. */\r\n    getAttachment (slotIndex: number, name: string): Attachment {\r\n        let dictionary = this.attachments[slotIndex];\r\n        return dictionary ? dictionary[name] : null;\r\n    }\r\n\r\n    /** Removes the attachment in the skin for the specified slot index and name, if any. */\r\n    removeAttachment (slotIndex: number, name: string) {\r\n        let dictionary = this.attachments[slotIndex];\r\n        if (dictionary) dictionary[name] = null;\r\n    }\r\n\r\n    /** Returns all attachments in this skin. */\r\n    getAttachments (): Array<SkinEntry> {\r\n        let entries = new Array<SkinEntry>();\r\n        for (var i = 0; i < this.attachments.length; i++) {\r\n            let slotAttachments = this.attachments[i];\r\n            if (slotAttachments) {\r\n                for (let name in slotAttachments) {\r\n                    let attachment = slotAttachments[name];\r\n                    if (attachment) entries.push(new SkinEntry(i, name, attachment));\r\n                }\r\n            }\r\n        }\r\n        return entries;\r\n    }\r\n\r\n    /** Returns all attachments in this skin for the specified slot index. */\r\n    getAttachmentsForSlot (slotIndex: number, attachments: Array<SkinEntry>) {\r\n        let slotAttachments = this.attachments[slotIndex];\r\n        if (slotAttachments) {\r\n            for (let name in slotAttachments) {\r\n                let attachment = slotAttachments[name];\r\n                if (attachment) attachments.push(new SkinEntry(slotIndex, name, attachment));\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Clears all attachments, bones, and constraints. */\r\n    clear () {\r\n        this.attachments.length = 0;\r\n        this.bones.length = 0;\r\n        this.constraints.length = 0;\r\n    }\r\n\r\n    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\r\n    attachAll (skeleton: Skeleton, oldSkin: Skin) {\r\n        let slotIndex = 0;\r\n        for (let i = 0; i < skeleton.slots.length; i++) {\r\n            let slot = skeleton.slots[i];\r\n            let slotAttachment = slot.getAttachment();\r\n            if (slotAttachment && slotIndex < oldSkin.attachments.length) {\r\n                let dictionary = oldSkin.attachments[slotIndex];\r\n                for (let key in dictionary) {\r\n                    let skinAttachment:Attachment = dictionary[key];\r\n                    if (slotAttachment == skinAttachment) {\r\n                        let attachment = this.getAttachment(slotIndex, key);\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            slotIndex++;\r\n        }\r\n    }\r\n}\r\n","import type {Attachment, AttachmentLoader, MeshAttachment, VertexAttachment} from './attachments';\r\nimport {\r\n    AlphaTimeline, Animation,\r\n    AttachmentTimeline, CurveTimeline, CurveTimeline1, CurveTimeline2, DeformTimeline, DrawOrderTimeline, EventTimeline,\r\n    IkConstraintTimeline,\r\n    PathConstraintMixTimeline,\r\n    PathConstraintPositionTimeline,\r\n    PathConstraintSpacingTimeline, RGB2Timeline, RGBA2Timeline, RGBATimeline, RGBTimeline,\r\n    RotateTimeline,\r\n    ScaleTimeline, ScaleXTimeline, ScaleYTimeline,\r\n    ShearTimeline, ShearXTimeline, ShearYTimeline,\r\n    Timeline,\r\n    TransformConstraintTimeline,\r\n    TranslateTimeline, TranslateXTimeline, TranslateYTimeline\r\n} from './Animation';\r\nimport {Event} from './Event';\r\nimport {SkeletonData} from './SkeletonData';\r\nimport {SlotData} from './SlotData';\r\nimport {BoneData} from './BoneData';\r\nimport {IkConstraintData} from './IkConstraintData';\r\nimport {TransformConstraintData} from './TransformConstraintData';\r\nimport {PathConstraintData, SpacingMode} from './PathConstraintData';\r\nimport {Skin} from './Skin';\r\nimport {EventData} from './EventData';\r\nimport {AttachmentType, BinaryInput, Color, PositionMode, Utils} from '@pixi-spine/base';\r\nimport {BLEND_MODES} from '@pixi/constants';\r\n\r\n/** Loads skeleton data in the Spine binary format.\r\n *\r\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\r\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\r\n * Runtimes Guide.\r\n * @public\r\n * */\r\nexport class SkeletonBinary {\r\n    static BlendModeValues = [ BLEND_MODES.NORMAL, BLEND_MODES.ADD, BLEND_MODES.MULTIPLY, BLEND_MODES.SCREEN];\r\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\r\n     * runtime than were used in Spine.\r\n     *\r\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\r\n    scale = 1;\r\n\r\n    attachmentLoader: AttachmentLoader = null;\r\n    private linkedMeshes = new Array<LinkedMesh>();\r\n\r\n    constructor (attachmentLoader: AttachmentLoader) {\r\n        this.attachmentLoader = attachmentLoader;\r\n    }\r\n\r\n    readSkeletonData (binary: Uint8Array): SkeletonData {\r\n        let scale = this.scale;\r\n\r\n        let skeletonData = new SkeletonData();\r\n        skeletonData.name = \"\"; // BOZO\r\n\r\n        let input = new BinaryInput(binary);\r\n\r\n        let lowHash = input.readInt32();\r\n        let highHash = input.readInt32();\r\n        skeletonData.hash = highHash == 0 && lowHash == 0 ? null : highHash.toString(16) + lowHash.toString(16);\r\n        skeletonData.version = input.readString();\r\n        if (skeletonData.version.substr(0, 3) !== '4.0')\r\n        {\r\n            let error = `Spine 4.0 loader cant load version ${skeletonData.version}. Please configure your pixi-spine bundle`;\r\n            console.error(error);\r\n        }\r\n        skeletonData.x = input.readFloat();\r\n        skeletonData.y = input.readFloat();\r\n        skeletonData.width = input.readFloat();\r\n        skeletonData.height = input.readFloat();\r\n\r\n        let nonessential = input.readBoolean();\r\n        if (nonessential) {\r\n            skeletonData.fps = input.readFloat();\r\n\r\n            skeletonData.imagesPath = input.readString();\r\n            skeletonData.audioPath = input.readString();\r\n        }\r\n\r\n        let n = 0;\r\n        // Strings.\r\n        n = input.readInt(true)\r\n        for (let i = 0; i < n; i++)\r\n            input.strings.push(input.readString());\r\n\r\n        // Bones.\r\n        n = input.readInt(true)\r\n        for (let i = 0; i < n; i++) {\r\n            let name = input.readString();\r\n            let parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\r\n            let data = new BoneData(i, name, parent);\r\n            data.rotation = input.readFloat();\r\n            data.x = input.readFloat() * scale;\r\n            data.y = input.readFloat() * scale;\r\n            data.scaleX = input.readFloat();\r\n            data.scaleY = input.readFloat();\r\n            data.shearX = input.readFloat();\r\n            data.shearY = input.readFloat();\r\n            data.length = input.readFloat() * scale;\r\n            data.transformMode = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            if (nonessential) Color.rgba8888ToColor(data.color, input.readInt32());\r\n            skeletonData.bones.push(data);\r\n        }\r\n\r\n        // Slots.\r\n        n = input.readInt(true);\r\n        for (let i = 0; i < n; i++) {\r\n            let slotName = input.readString();\r\n            let boneData = skeletonData.bones[input.readInt(true)];\r\n            let data = new SlotData(i, slotName, boneData);\r\n            Color.rgba8888ToColor(data.color, input.readInt32());\r\n\r\n            let darkColor = input.readInt32();\r\n            if (darkColor != -1) Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\r\n\r\n            data.attachmentName = input.readStringRef();\r\n            data.blendMode = SkeletonBinary.BlendModeValues[input.readInt(true)];\r\n            skeletonData.slots.push(data);\r\n        }\r\n\r\n        // IK constraints.\r\n        n = input.readInt(true);\r\n        for (let i = 0, nn; i < n; i++) {\r\n            let data = new IkConstraintData(input.readString());\r\n            data.order = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            nn = input.readInt(true);\r\n            for (let ii = 0; ii < nn; ii++)\r\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\r\n            data.target = skeletonData.bones[input.readInt(true)];\r\n            data.mix = input.readFloat();\r\n            data.softness = input.readFloat() * scale;\r\n            data.bendDirection = input.readByte();\r\n            data.compress = input.readBoolean();\r\n            data.stretch = input.readBoolean();\r\n            data.uniform = input.readBoolean();\r\n            skeletonData.ikConstraints.push(data);\r\n        }\r\n\r\n        // Transform constraints.\r\n        n = input.readInt(true);\r\n        for (let i = 0, nn; i < n; i++) {\r\n            let data = new TransformConstraintData(input.readString());\r\n            data.order = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            nn = input.readInt(true);\r\n            for (let ii = 0; ii < nn; ii++)\r\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\r\n            data.target = skeletonData.bones[input.readInt(true)];\r\n            data.local = input.readBoolean();\r\n            data.relative = input.readBoolean();\r\n            data.offsetRotation = input.readFloat();\r\n            data.offsetX = input.readFloat() * scale;\r\n            data.offsetY = input.readFloat() * scale;\r\n            data.offsetScaleX = input.readFloat();\r\n            data.offsetScaleY = input.readFloat();\r\n            data.offsetShearY = input.readFloat();\r\n            data.mixRotate = input.readFloat();\r\n            data.mixX = input.readFloat();\r\n            data.mixY = input.readFloat();\r\n            data.mixScaleX = input.readFloat();\r\n            data.mixScaleY = input.readFloat();\r\n            data.mixShearY = input.readFloat();\r\n            skeletonData.transformConstraints.push(data);\r\n        }\r\n\r\n        // Path constraints.\r\n        n = input.readInt(true);\r\n        for (let i = 0, nn; i < n; i++) {\r\n            let data = new PathConstraintData(input.readString());\r\n            data.order = input.readInt(true);\r\n            data.skinRequired = input.readBoolean();\r\n            nn = input.readInt(true);\r\n            for (let ii = 0; ii < nn; ii++)\r\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\r\n            data.target = skeletonData.slots[input.readInt(true)];\r\n            data.positionMode = input.readInt(true);\r\n            data.spacingMode = input.readInt(true);\r\n            data.rotateMode = input.readInt(true);\r\n            data.offsetRotation = input.readFloat();\r\n            data.position = input.readFloat();\r\n            if (data.positionMode == PositionMode.Fixed) data.position *= scale;\r\n            data.spacing = input.readFloat();\r\n            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\r\n            data.mixRotate = input.readFloat();\r\n            data.mixX = input.readFloat();\r\n            data.mixY = input.readFloat();\r\n            skeletonData.pathConstraints.push(data);\r\n        }\r\n\r\n        // Default skin.\r\n        let defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\r\n        if (defaultSkin) {\r\n            skeletonData.defaultSkin = defaultSkin;\r\n            skeletonData.skins.push(defaultSkin);\r\n        }\r\n\r\n        // Skins.\r\n        {\r\n            let i = skeletonData.skins.length;\r\n            Utils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\r\n            for (; i < n; i++)\r\n                skeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);\r\n        }\r\n\r\n        // Linked meshes.\r\n        n = this.linkedMeshes.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let linkedMesh = this.linkedMeshes[i];\r\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\r\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\r\n            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent as VertexAttachment : linkedMesh.mesh;\r\n            linkedMesh.mesh.setParentMesh(parent as MeshAttachment);\r\n            // linkedMesh.mesh.updateUVs();\r\n        }\r\n        this.linkedMeshes.length = 0;\r\n\r\n        // Events.\r\n        n = input.readInt(true);\r\n        for (let i = 0; i < n; i++) {\r\n            let data = new EventData(input.readStringRef());\r\n            data.intValue = input.readInt(false);\r\n            data.floatValue = input.readFloat();\r\n            data.stringValue = input.readString();\r\n            data.audioPath = input.readString();\r\n            if (data.audioPath) {\r\n                data.volume = input.readFloat();\r\n                data.balance = input.readFloat();\r\n            }\r\n            skeletonData.events.push(data);\r\n        }\r\n\r\n        // Animations.\r\n        n = input.readInt(true);\r\n        for (let i = 0; i < n; i++)\r\n            skeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));\r\n        return skeletonData;\r\n    }\r\n\r\n    private readSkin (input: BinaryInput, skeletonData: SkeletonData, defaultSkin: boolean, nonessential: boolean): Skin {\r\n        let skin = null;\r\n        let slotCount = 0;\r\n\r\n        if (defaultSkin) {\r\n            slotCount = input.readInt(true)\r\n            if (slotCount == 0) return null;\r\n            skin = new Skin(\"default\");\r\n        } else {\r\n            skin = new Skin(input.readStringRef());\r\n            skin.bones.length = input.readInt(true);\r\n            for (let i = 0, n = skin.bones.length; i < n; i++)\r\n                skin.bones[i] = skeletonData.bones[input.readInt(true)];\r\n\r\n            for (let i = 0, n = input.readInt(true); i < n; i++)\r\n                skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\r\n            for (let i = 0, n = input.readInt(true); i < n; i++)\r\n                skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\r\n            for (let i = 0, n = input.readInt(true); i < n; i++)\r\n                skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\r\n\r\n            slotCount = input.readInt(true);\r\n        }\r\n\r\n        for (let i = 0; i < slotCount; i++) {\r\n            let slotIndex = input.readInt(true);\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let name = input.readStringRef();\r\n                let attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\r\n                if (attachment) skin.setAttachment(slotIndex, name, attachment);\r\n            }\r\n        }\r\n        return skin;\r\n    }\r\n\r\n    private readAttachment (input: BinaryInput, skeletonData: SkeletonData, skin: Skin, slotIndex: number, attachmentName: string, nonessential: boolean): Attachment {\r\n        let scale = this.scale;\r\n\r\n        let name = input.readStringRef();\r\n        if (!name) name = attachmentName;\r\n\r\n        switch (input.readByte()) {\r\n            case AttachmentType.Region: {\r\n                let path = input.readStringRef();\r\n                let rotation = input.readFloat();\r\n                let x = input.readFloat();\r\n                let y = input.readFloat();\r\n                let scaleX = input.readFloat();\r\n                let scaleY = input.readFloat();\r\n                let width = input.readFloat();\r\n                let height = input.readFloat();\r\n                let color = input.readInt32();\r\n\r\n                if (!path) path = name;\r\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n                if (!region) return null;\r\n                region.path = path;\r\n                region.x = x * scale;\r\n                region.y = y * scale;\r\n                region.scaleX = scaleX;\r\n                region.scaleY = scaleY;\r\n                region.rotation = rotation;\r\n                region.width = width * scale;\r\n                region.height = height * scale;\r\n                Color.rgba8888ToColor(region.color, color);\r\n                // region.updateOffset();\r\n                return region;\r\n            }\r\n            case AttachmentType.BoundingBox: {\r\n                let vertexCount = input.readInt(true);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n                if (!box) return null;\r\n                box.worldVerticesLength = vertexCount << 1;\r\n                box.vertices = vertices.vertices;\r\n                box.bones = vertices.bones;\r\n                if (nonessential) Color.rgba8888ToColor(box.color, color);\r\n                return box;\r\n            }\r\n            case AttachmentType.Mesh: {\r\n                let path = input.readStringRef();\r\n                let color = input.readInt32();\r\n                let vertexCount = input.readInt(true);\r\n                let uvs = this.readFloatArray(input, vertexCount << 1, 1);\r\n                let triangles = this.readShortArray(input);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let hullLength = input.readInt(true);\r\n                let edges = null;\r\n                let width = 0, height = 0;\r\n                if (nonessential) {\r\n                    edges = this.readShortArray(input);\r\n                    width = input.readFloat();\r\n                    height = input.readFloat();\r\n                }\r\n\r\n                if (!path) path = name;\r\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n                if (!mesh) return null;\r\n                mesh.path = path;\r\n                Color.rgba8888ToColor(mesh.color, color);\r\n                mesh.bones = vertices.bones;\r\n                mesh.vertices = vertices.vertices;\r\n                mesh.worldVerticesLength = vertexCount << 1;\r\n                mesh.triangles = triangles;\r\n                mesh.regionUVs = new Float32Array(uvs);\r\n                // mesh.updateUVs();\r\n                mesh.hullLength = hullLength << 1;\r\n                if (nonessential) {\r\n                    mesh.edges = edges;\r\n                    mesh.width = width * scale;\r\n                    mesh.height = height * scale;\r\n                }\r\n                return mesh;\r\n            }\r\n            case AttachmentType.LinkedMesh: {\r\n                let path = input.readStringRef();\r\n                let color = input.readInt32();\r\n                let skinName = input.readStringRef();\r\n                let parent = input.readStringRef();\r\n                let inheritDeform = input.readBoolean();\r\n                let width = 0, height = 0;\r\n                if (nonessential) {\r\n                    width = input.readFloat();\r\n                    height = input.readFloat();\r\n                }\r\n\r\n                if (!path) path = name;\r\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n                if (!mesh) return null;\r\n                mesh.path = path;\r\n                Color.rgba8888ToColor(mesh.color, color);\r\n                if (nonessential) {\r\n                    mesh.width = width * scale;\r\n                    mesh.height = height * scale;\r\n                }\r\n                this.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform));\r\n                return mesh;\r\n            }\r\n            case AttachmentType.Path: {\r\n                let closed = input.readBoolean();\r\n                let constantSpeed = input.readBoolean();\r\n                let vertexCount = input.readInt(true);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let lengths = Utils.newArray(vertexCount / 3, 0);\r\n                for (let i = 0, n = lengths.length; i < n; i++)\r\n                    lengths[i] = input.readFloat() * scale;\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\r\n                if (!path) return null;\r\n                path.closed = closed;\r\n                path.constantSpeed = constantSpeed;\r\n                path.worldVerticesLength = vertexCount << 1;\r\n                path.vertices = vertices.vertices;\r\n                path.bones = vertices.bones;\r\n                path.lengths = lengths;\r\n                if (nonessential) Color.rgba8888ToColor(path.color, color);\r\n                return path;\r\n            }\r\n            case AttachmentType.Point: {\r\n                let rotation = input.readFloat();\r\n                let x = input.readFloat();\r\n                let y = input.readFloat();\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\r\n                if (!point) return null;\r\n                point.x = x * scale;\r\n                point.y = y * scale;\r\n                point.rotation = rotation;\r\n                if (nonessential) Color.rgba8888ToColor(point.color, color);\r\n                return point;\r\n            }\r\n            case AttachmentType.Clipping: {\r\n                let endSlotIndex = input.readInt(true);\r\n                let vertexCount = input.readInt(true);\r\n                let vertices = this.readVertices(input, vertexCount);\r\n                let color = nonessential ? input.readInt32() : 0;\r\n\r\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\r\n                if (!clip) return null;\r\n                clip.endSlot = skeletonData.slots[endSlotIndex];\r\n                clip.worldVerticesLength = vertexCount << 1;\r\n                clip.vertices = vertices.vertices;\r\n                clip.bones = vertices.bones;\r\n                if (nonessential) Color.rgba8888ToColor(clip.color, color);\r\n                return clip;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private readVertices (input: BinaryInput, vertexCount: number): Vertices {\r\n        let scale = this.scale;\r\n        let verticesLength = vertexCount << 1;\r\n        let vertices = new Vertices();\r\n        if (!input.readBoolean()) {\r\n            vertices.vertices = this.readFloatArray(input, verticesLength, scale);\r\n            return vertices;\r\n        }\r\n        let weights = new Array<number>();\r\n        let bonesArray = new Array<number>();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            let boneCount = input.readInt(true);\r\n            bonesArray.push(boneCount);\r\n            for (let ii = 0; ii < boneCount; ii++) {\r\n                bonesArray.push(input.readInt(true));\r\n                weights.push(input.readFloat() * scale);\r\n                weights.push(input.readFloat() * scale);\r\n                weights.push(input.readFloat());\r\n            }\r\n        }\r\n        vertices.vertices = Utils.toFloatArray(weights);\r\n        vertices.bones = bonesArray;\r\n        return vertices;\r\n    }\r\n\r\n    private readFloatArray (input: BinaryInput, n: number, scale: number): number[] {\r\n        let array = new Array<number>(n);\r\n        if (scale == 1) {\r\n            for (let i = 0; i < n; i++)\r\n                array[i] = input.readFloat();\r\n        } else {\r\n            for (let i = 0; i < n; i++)\r\n                array[i] = input.readFloat() * scale;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    private readShortArray (input: BinaryInput): number[] {\r\n        let n = input.readInt(true);\r\n        let array = new Array<number>(n);\r\n        for (let i = 0; i < n; i++)\r\n            array[i] = input.readShort();\r\n        return array;\r\n    }\r\n\r\n    private readAnimation (input: BinaryInput, name: string, skeletonData: SkeletonData): Animation {\r\n        input.readInt(true); // Number of timelines.\r\n        let timelines = new Array<Timeline>();\r\n        let scale = this.scale;\r\n\r\n        // Slot timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let slotIndex = input.readInt(true);\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let timelineType = input.readByte();\r\n                let frameCount = input.readInt(true);\r\n                let frameLast = frameCount - 1;\r\n                switch (timelineType) {\r\n                    case SLOT_ATTACHMENT: {\r\n                        let timeline = new AttachmentTimeline(frameCount, slotIndex);\r\n                        for (let frame = 0; frame < frameCount; frame++)\r\n                            timeline.setFrame(frame, input.readFloat(), input.readStringRef());\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGBA: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGBATimeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n                        let a = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b, a);\r\n                            if (frame == frameLast) break;\r\n\r\n                            let time2 = input.readFloat();\r\n                            let r2 = input.readUnsignedByte() / 255.0;\r\n                            let g2 = input.readUnsignedByte() / 255.0;\r\n                            let b2 = input.readUnsignedByte() / 255.0;\r\n                            let a2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, a2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = r2;\r\n                            g = g2;\r\n                            b = b2;\r\n                            a = a2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGB: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGBTimeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b);\r\n                            if (frame == frameLast) break;\r\n\r\n                            let time2 = input.readFloat();\r\n                            let r2 = input.readUnsignedByte() / 255.0;\r\n                            let g2 = input.readUnsignedByte() / 255.0;\r\n                            let b2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = r2;\r\n                            g = g2;\r\n                            b = b2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGBA2: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGBA2Timeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n                        let a = input.readUnsignedByte() / 255.0;\r\n                        let r2 = input.readUnsignedByte() / 255.0;\r\n                        let g2 = input.readUnsignedByte() / 255.0;\r\n                        let b2 = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b, a, r2, g2, b2);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat();\r\n                            let nr = input.readUnsignedByte() / 255.0;\r\n                            let ng = input.readUnsignedByte() / 255.0;\r\n                            let nb = input.readUnsignedByte() / 255.0;\r\n                            let na = input.readUnsignedByte() / 255.0;\r\n                            let nr2 = input.readUnsignedByte() / 255.0;\r\n                            let ng2 = input.readUnsignedByte() / 255.0;\r\n                            let nb2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, na, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, r2, nr2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, g2, ng2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 6, time, time2, b2, nb2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = nr;\r\n                            g = ng;\r\n                            b = nb;\r\n                            a = na;\r\n                            r2 = nr2;\r\n                            g2 = ng2;\r\n                            b2 = nb2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_RGB2: {\r\n                        let bezierCount = input.readInt(true);\r\n                        let timeline = new RGB2Timeline(frameCount, bezierCount, slotIndex);\r\n\r\n                        let time = input.readFloat();\r\n                        let r = input.readUnsignedByte() / 255.0;\r\n                        let g = input.readUnsignedByte() / 255.0;\r\n                        let b = input.readUnsignedByte() / 255.0;\r\n                        let r2 = input.readUnsignedByte() / 255.0;\r\n                        let g2 = input.readUnsignedByte() / 255.0;\r\n                        let b2 = input.readUnsignedByte() / 255.0;\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, r, g, b, r2, g2, b2);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat();\r\n                            let nr = input.readUnsignedByte() / 255.0;\r\n                            let ng = input.readUnsignedByte() / 255.0;\r\n                            let nb = input.readUnsignedByte() / 255.0;\r\n                            let nr2 = input.readUnsignedByte() / 255.0;\r\n                            let ng2 = input.readUnsignedByte() / 255.0;\r\n                            let nb2 = input.readUnsignedByte() / 255.0;\r\n\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, r2, nr2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, g2, ng2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, b2, nb2, 1);\r\n                            }\r\n                            time = time2;\r\n                            r = nr;\r\n                            g = ng;\r\n                            b = nb;\r\n                            r2 = nr2;\r\n                            g2 = ng2;\r\n                            b2 = nb2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                    case SLOT_ALPHA: {\r\n                        let timeline = new AlphaTimeline(frameCount, input.readInt(true), slotIndex);\r\n                        let time = input.readFloat(), a = input.readUnsignedByte() / 255;\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, a);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat();\r\n                            let a2 = input.readUnsignedByte() / 255;\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, a, a2, 1);\r\n                            }\r\n                            time = time2;\r\n                            a = a2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bone timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let boneIndex = input.readInt(true);\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let type = input.readByte(), frameCount = input.readInt(true), bezierCount = input.readInt(true);\r\n                switch (type) {\r\n                    case BONE_ROTATE:\r\n                        timelines.push(readTimeline1(input, new RotateTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_TRANSLATE:\r\n                        timelines.push(readTimeline2(input, new TranslateTimeline(frameCount, bezierCount, boneIndex), scale));\r\n                        break;\r\n                    case BONE_TRANSLATEX:\r\n                        timelines.push(readTimeline1(input, new TranslateXTimeline(frameCount, bezierCount, boneIndex), scale));\r\n                        break;\r\n                    case BONE_TRANSLATEY:\r\n                        timelines.push(readTimeline1(input, new TranslateYTimeline(frameCount, bezierCount, boneIndex), scale));\r\n                        break;\r\n                    case BONE_SCALE:\r\n                        timelines.push(readTimeline2(input, new ScaleTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SCALEX:\r\n                        timelines.push(readTimeline1(input, new ScaleXTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SCALEY:\r\n                        timelines.push(readTimeline1(input, new ScaleYTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SHEAR:\r\n                        timelines.push(readTimeline2(input, new ShearTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SHEARX:\r\n                        timelines.push(readTimeline1(input, new ShearXTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                        break;\r\n                    case BONE_SHEARY:\r\n                        timelines.push(readTimeline1(input, new ShearYTimeline(frameCount, bezierCount, boneIndex), 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        // IK constraint timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\r\n            let timeline = new IkConstraintTimeline(frameCount, input.readInt(true), index);\r\n            let time = input.readFloat(), mix = input.readFloat(), softness = input.readFloat() * scale;\r\n            for (let frame = 0, bezier = 0; ; frame++) {\r\n                timeline.setFrame(frame, time, mix, softness, input.readByte(), input.readBoolean(), input.readBoolean());\r\n                if (frame == frameLast) break;\r\n                let time2 = input.readFloat(), mix2 = input.readFloat(), softness2 = input.readFloat() * scale;\r\n                switch (input.readByte()) {\r\n                    case CURVE_STEPPED:\r\n                        timeline.setStepped(frame);\r\n                        break;\r\n                    case CURVE_BEZIER:\r\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mix, mix2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, softness, softness2, scale);\r\n                }\r\n                time = time2;\r\n                mix = mix2;\r\n                softness = softness2;\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Transform constraint timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\r\n            let timeline = new TransformConstraintTimeline(frameCount, input.readInt(true), index);\r\n            let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat(),\r\n                mixScaleX = input.readFloat(), mixScaleY = input.readFloat(), mixShearY = input.readFloat();\r\n            for (let frame = 0, bezier = 0; ; frame++) {\r\n                timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\r\n                if (frame == frameLast) break;\r\n                let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat(),\r\n                    mixScaleX2 = input.readFloat(), mixScaleY2 = input.readFloat(), mixShearY2 = input.readFloat();\r\n                switch (input.readByte()) {\r\n                    case CURVE_STEPPED:\r\n                        timeline.setStepped(frame);\r\n                        break;\r\n                    case CURVE_BEZIER:\r\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\r\n                        setBezier(input, timeline, bezier++, frame, 5, time, time2, mixShearY, mixShearY2, 1);\r\n                }\r\n                time = time2;\r\n                mixRotate = mixRotate2;\r\n                mixX = mixX2;\r\n                mixY = mixY2;\r\n                mixScaleX = mixScaleX2;\r\n                mixScaleY = mixScaleY2;\r\n                mixShearY = mixShearY2;\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Path constraint timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let index = input.readInt(true);\r\n            let data = skeletonData.pathConstraints[index];\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                switch (input.readByte()) {\r\n                    case PATH_POSITION:\r\n                        timelines\r\n                            .push(readTimeline1(input, new PathConstraintPositionTimeline(input.readInt(true), input.readInt(true), index),\r\n                                data.positionMode == PositionMode.Fixed ? scale : 1));\r\n                        break;\r\n                    case PATH_SPACING:\r\n                        timelines\r\n                            .push(readTimeline1(input, new PathConstraintSpacingTimeline(input.readInt(true), input.readInt(true), index),\r\n                                data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed ? scale : 1));\r\n                        break;\r\n                    case PATH_MIX:\r\n                        let timeline = new PathConstraintMixTimeline(input.readInt(true), input.readInt(true), index);\r\n                        let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat();\r\n                        for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\r\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\r\n                            if (frame == frameLast) break;\r\n                            let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(),\r\n                                mixY2 = input.readFloat();\r\n                            switch (input.readByte()) {\r\n                                case CURVE_STEPPED:\r\n                                    timeline.setStepped(frame);\r\n                                    break;\r\n                                case CURVE_BEZIER:\r\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\r\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\r\n                            }\r\n                            time = time2;\r\n                            mixRotate = mixRotate2;\r\n                            mixX = mixX2;\r\n                            mixY = mixY2;\r\n                        }\r\n                        timelines.push(timeline);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deform timelines.\r\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\r\n            let skin = skeletonData.skins[input.readInt(true)];\r\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n                let slotIndex = input.readInt(true);\r\n                for (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\r\n                    let attachmentName = input.readStringRef();\r\n                    let attachment = skin.getAttachment(slotIndex, attachmentName) as VertexAttachment;\r\n                    let weighted = attachment.bones;\r\n                    let vertices = attachment.vertices;\r\n                    let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\r\n\r\n                    let frameCount = input.readInt(true);\r\n                    let frameLast = frameCount - 1;\r\n                    let bezierCount = input.readInt(true);\r\n                    let timeline = new DeformTimeline(frameCount, bezierCount, slotIndex, attachment);\r\n\r\n                    let time = input.readFloat();\r\n                    for (let frame = 0, bezier = 0; ; frame++) {\r\n                        let deform;\r\n                        let end = input.readInt(true);\r\n                        if (end == 0)\r\n                            deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\r\n                        else {\r\n                            deform = Utils.newFloatArray(deformLength);\r\n                            let start = input.readInt(true);\r\n                            end += start;\r\n                            if (scale == 1) {\r\n                                for (let v = start; v < end; v++)\r\n                                    deform[v] = input.readFloat();\r\n                            } else {\r\n                                for (let v = start; v < end; v++)\r\n                                    deform[v] = input.readFloat() * scale;\r\n                            }\r\n                            if (!weighted) {\r\n                                for (let v = 0, vn = deform.length; v < vn; v++)\r\n                                    deform[v] += vertices[v];\r\n                            }\r\n                        }\r\n\r\n                        timeline.setFrame(frame, time, deform);\r\n                        if (frame == frameLast) break;\r\n                        let time2 = input.readFloat();\r\n                        switch (input.readByte()) {\r\n                            case CURVE_STEPPED:\r\n                                timeline.setStepped(frame);\r\n                                break;\r\n                            case CURVE_BEZIER:\r\n                                setBezier(input, timeline, bezier++, frame, 0, time, time2, 0, 1, 1);\r\n                        }\r\n                        time = time2;\r\n                    }\r\n                    timelines.push(timeline);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw order timeline.\r\n        let drawOrderCount = input.readInt(true);\r\n        if (drawOrderCount > 0) {\r\n            let timeline = new DrawOrderTimeline(drawOrderCount);\r\n            let slotCount = skeletonData.slots.length;\r\n            for (let i = 0; i < drawOrderCount; i++) {\r\n                let time = input.readFloat();\r\n                let offsetCount = input.readInt(true);\r\n                let drawOrder = Utils.newArray(slotCount, 0);\r\n                for (let ii = slotCount - 1; ii >= 0; ii--)\r\n                    drawOrder[ii] = -1;\r\n                let unchanged = Utils.newArray(slotCount - offsetCount, 0);\r\n                let originalIndex = 0, unchangedIndex = 0;\r\n                for (let ii = 0; ii < offsetCount; ii++) {\r\n                    let slotIndex = input.readInt(true);\r\n                    // Collect unchanged items.\r\n                    while (originalIndex != slotIndex)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Set changed items.\r\n                    drawOrder[originalIndex + input.readInt(true)] = originalIndex++;\r\n                }\r\n                // Collect remaining unchanged items.\r\n                while (originalIndex < slotCount)\r\n                    unchanged[unchangedIndex++] = originalIndex++;\r\n                // Fill in unchanged items.\r\n                for (let ii = slotCount - 1; ii >= 0; ii--)\r\n                    if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                timeline.setFrame(i, time, drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Event timeline.\r\n        let eventCount = input.readInt(true);\r\n        if (eventCount > 0) {\r\n            let timeline = new EventTimeline(eventCount);\r\n            for (let i = 0; i < eventCount; i++) {\r\n                let time = input.readFloat();\r\n                let eventData = skeletonData.events[input.readInt(true)];\r\n                let event = new Event(time, eventData);\r\n                event.intValue = input.readInt(false);\r\n                event.floatValue = input.readFloat();\r\n                event.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\r\n                if (event.data.audioPath) {\r\n                    event.volume = input.readFloat();\r\n                    event.balance = input.readFloat();\r\n                }\r\n                timeline.setFrame(i, event);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        let duration = 0;\r\n        for (let i = 0, n = timelines.length; i < n; i++)\r\n            duration = Math.max(duration, timelines[i].getDuration());\r\n        return new Animation(name, timelines, duration);\r\n    }\r\n}\r\n\r\nclass LinkedMesh {\r\n    parent: string; skin: string;\r\n    slotIndex: number;\r\n    mesh: MeshAttachment;\r\n    inheritDeform: boolean;\r\n\r\n    constructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\r\n        this.mesh = mesh;\r\n        this.skin = skin;\r\n        this.slotIndex = slotIndex;\r\n        this.parent = parent;\r\n        this.inheritDeform = inheritDeform;\r\n    }\r\n}\r\n\r\nclass Vertices {\r\n    constructor (public bones: Array<number> = null, public vertices: Array<number> | Float32Array = null) { }\r\n}\r\n\r\nfunction readTimeline1 (input: BinaryInput, timeline: CurveTimeline1, scale: number): CurveTimeline1 {\r\n    let time = input.readFloat(), value = input.readFloat() * scale;\r\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\r\n        timeline.setFrame(frame, time, value);\r\n        if (frame == frameLast) break;\r\n        let time2 = input.readFloat(), value2 = input.readFloat() * scale;\r\n        switch (input.readByte()) {\r\n            case CURVE_STEPPED:\r\n                timeline.setStepped(frame);\r\n                break;\r\n            case CURVE_BEZIER:\r\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value, value2, scale);\r\n        }\r\n        time = time2;\r\n        value = value2;\r\n    }\r\n    return timeline;\r\n}\r\n\r\nfunction readTimeline2 (input: BinaryInput, timeline: CurveTimeline2, scale: number): CurveTimeline2 {\r\n    let time = input.readFloat(), value1 = input.readFloat() * scale, value2 = input.readFloat() * scale;\r\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\r\n        timeline.setFrame(frame, time, value1, value2);\r\n        if (frame == frameLast) break;\r\n        let time2 = input.readFloat(), nvalue1 = input.readFloat() * scale, nvalue2 = input.readFloat() * scale;\r\n        switch (input.readByte()) {\r\n            case CURVE_STEPPED:\r\n                timeline.setStepped(frame);\r\n                break;\r\n            case CURVE_BEZIER:\r\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value1, nvalue1, scale);\r\n                setBezier(input, timeline, bezier++, frame, 1, time, time2, value2, nvalue2, scale);\r\n        }\r\n        time = time2;\r\n        value1 = nvalue1;\r\n        value2 = nvalue2;\r\n    }\r\n    return timeline;\r\n}\r\n\r\nfunction setBezier (input: BinaryInput, timeline: CurveTimeline, bezier: number, frame: number, value: number,\r\n                    time1: number, time2: number, value1: number, value2: number, scale: number) {\r\n    timeline.setBezier(bezier, frame, value, time1, value1, input.readFloat(), input.readFloat() * scale, input.readFloat(), input.readFloat() * scale, time2, value2);\r\n}\r\n\r\nconst BONE_ROTATE = 0;\r\nconst BONE_TRANSLATE = 1;\r\nconst BONE_TRANSLATEX = 2;\r\nconst BONE_TRANSLATEY = 3;\r\nconst BONE_SCALE = 4;\r\nconst BONE_SCALEX = 5;\r\nconst BONE_SCALEY = 6;\r\nconst BONE_SHEAR = 7;\r\nconst BONE_SHEARX = 8;\r\nconst BONE_SHEARY = 9;\r\n\r\nconst SLOT_ATTACHMENT = 0;\r\nconst SLOT_RGBA = 1;\r\nconst SLOT_RGB = 2;\r\nconst SLOT_RGBA2 = 3;\r\nconst SLOT_RGB2 = 4;\r\nconst SLOT_ALPHA = 5;\r\n\r\nconst PATH_POSITION = 0;\r\nconst PATH_SPACING = 1;\r\nconst PATH_MIX = 2;\r\n\r\n// @ts-ignore\r\nconst  CURVE_LINEAR = 0;\r\nconst  CURVE_STEPPED = 1;\r\nconst  CURVE_BEZIER = 2;\r\n","import {BoundingBoxAttachment} from \"./attachments\";\r\nimport {Pool, Utils} from \"@pixi-spine/base\";\r\nimport type {Skeleton} from \"./Skeleton\";\r\n\r\n/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\r\n * provided along with convenience methods for doing hit detection.\r\n * @public\r\n * */\r\nexport class SkeletonBounds {\r\n\r\n    /** The left edge of the axis aligned bounding box. */\r\n    minX = 0;\r\n\r\n    /** The bottom edge of the axis aligned bounding box. */\r\n    minY = 0;\r\n\r\n    /** The right edge of the axis aligned bounding box. */\r\n    maxX = 0;\r\n\r\n    /** The top edge of the axis aligned bounding box. */\r\n    maxY = 0;\r\n\r\n    /** The visible bounding boxes. */\r\n    boundingBoxes = new Array<BoundingBoxAttachment>();\r\n\r\n    /** The world vertices for the bounding box polygons. */\r\n    polygons = new Array<ArrayLike<number>>();\r\n\r\n    private polygonPool = new Pool<ArrayLike<number>>(() => {\r\n        return Utils.newFloatArray(16);\r\n    });\r\n\r\n    /** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\r\n     * box's polygon.\r\n     * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\r\n     *           SkeletonBounds AABB methods will always return true. */\r\n    update (skeleton: Skeleton, updateAabb: boolean) {\r\n        if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\r\n        let boundingBoxes = this.boundingBoxes;\r\n        let polygons = this.polygons;\r\n        let polygonPool = this.polygonPool;\r\n        let slots = skeleton.slots;\r\n        let slotCount = slots.length;\r\n\r\n        boundingBoxes.length = 0;\r\n        polygonPool.freeAll(polygons);\r\n        polygons.length = 0;\r\n\r\n        for (let i = 0; i < slotCount; i++) {\r\n            let slot = slots[i];\r\n            if (!slot.bone.active) continue;\r\n            let attachment = slot.getAttachment();\r\n            if (attachment instanceof BoundingBoxAttachment) {\r\n                let boundingBox = attachment as BoundingBoxAttachment;\r\n                boundingBoxes.push(boundingBox);\r\n\r\n                let polygon = polygonPool.obtain();\r\n                if (polygon.length != boundingBox.worldVerticesLength) {\r\n                    polygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\r\n                }\r\n                polygons.push(polygon);\r\n                boundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);\r\n            }\r\n        }\r\n\r\n        if (updateAabb) {\r\n            this.aabbCompute();\r\n        } else {\r\n            this.minX = Number.POSITIVE_INFINITY;\r\n            this.minY = Number.POSITIVE_INFINITY;\r\n            this.maxX = Number.NEGATIVE_INFINITY;\r\n            this.maxY = Number.NEGATIVE_INFINITY;\r\n        }\r\n    }\r\n\r\n    aabbCompute () {\r\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\r\n        let polygons = this.polygons;\r\n        for (let i = 0, n = polygons.length; i < n; i++) {\r\n            let polygon = polygons[i];\r\n            let vertices = polygon;\r\n            for (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\r\n                let x = vertices[ii];\r\n                let y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    }\r\n\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint (x: number, y: number) {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    }\r\n\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment (x1: number, y1: number, x2: number, y2: number) {\r\n        let minX = this.minX;\r\n        let minY = this.minY;\r\n        let maxX = this.maxX;\r\n        let maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        let m = (y2 - y1) / (x2 - x1);\r\n        let y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        let x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    }\r\n\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton (bounds: SkeletonBounds) {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    }\r\n\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint (x: number, y: number): BoundingBoxAttachment {\r\n        let polygons = this.polygons;\r\n        for (let i = 0, n = polygons.length; i < n; i++)\r\n            if (this.containsPointPolygon(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    }\r\n\r\n    /** Returns true if the polygon contains the point. */\r\n    containsPointPolygon (polygon: ArrayLike<number>, x: number, y: number) {\r\n        let vertices = polygon;\r\n        let nn = polygon.length;\r\n\r\n        let prevIndex = nn - 2;\r\n        let inside = false;\r\n        for (let ii = 0; ii < nn; ii += 2) {\r\n            let vertexY = vertices[ii + 1];\r\n            let prevY = vertices[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\r\n                let vertexX = vertices[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    }\r\n\r\n    /** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\r\n     * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\r\n     * true. */\r\n    intersectsSegment (x1: number, y1: number, x2: number, y2: number) {\r\n        let polygons = this.polygons;\r\n        for (let i = 0, n = polygons.length; i < n; i++)\r\n            if (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    }\r\n\r\n    /** Returns true if the polygon contains any part of the line segment. */\r\n    intersectsSegmentPolygon (polygon: ArrayLike<number>, x1: number, y1: number, x2: number, y2: number) {\r\n        let vertices = polygon;\r\n        let nn = polygon.length;\r\n\r\n        let width12 = x1 - x2, height12 = y1 - y2;\r\n        let det1 = x1 * y2 - y1 * x2;\r\n        let x3 = vertices[nn - 2], y3 = vertices[nn - 1];\r\n        for (let ii = 0; ii < nn; ii += 2) {\r\n            let x4 = vertices[ii], y4 = vertices[ii + 1];\r\n            let det2 = x3 * y4 - y3 * x4;\r\n            let width34 = x3 - x4, height34 = y3 - y4;\r\n            let det3 = width12 * height34 - height12 * width34;\r\n            let x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\r\n                let y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Returns the polygon for the specified bounding box, or null. */\r\n    getPolygon (boundingBox: BoundingBoxAttachment) {\r\n        if (boundingBox == null) throw new Error(\"boundingBox cannot be null.\");\r\n        let index = this.boundingBoxes.indexOf(boundingBox);\r\n        return index == -1 ? null : this.polygons[index];\r\n    }\r\n\r\n    /** The width of the axis aligned bounding box. */\r\n    getWidth () {\r\n        return this.maxX - this.minX;\r\n    }\r\n\r\n    /** The height of the axis aligned bounding box. */\r\n    getHeight () {\r\n        return this.maxY - this.minY;\r\n    }\r\n}\r\n","import type {Attachment, AttachmentLoader, MeshAttachment, VertexAttachment} from './attachments';\r\nimport {\r\n    AlphaTimeline, Animation,\r\n    AttachmentTimeline, CurveTimeline, CurveTimeline1, CurveTimeline2, DeformTimeline, DrawOrderTimeline, EventTimeline,\r\n    IkConstraintTimeline,\r\n    PathConstraintMixTimeline,\r\n    PathConstraintPositionTimeline,\r\n    PathConstraintSpacingTimeline, RGB2Timeline, RGBA2Timeline, RGBATimeline, RGBTimeline,\r\n    RotateTimeline,\r\n    ScaleTimeline, ScaleXTimeline, ScaleYTimeline,\r\n    ShearTimeline, ShearXTimeline, ShearYTimeline,\r\n    Timeline,\r\n    TransformConstraintTimeline,\r\n    TranslateTimeline, TranslateXTimeline, TranslateYTimeline\r\n} from './Animation';\r\nimport {Event} from './Event';\r\nimport {SkeletonData} from './SkeletonData';\r\nimport {SlotData} from './SlotData';\r\nimport {BoneData} from './BoneData';\r\nimport {IkConstraintData} from './IkConstraintData';\r\nimport {TransformConstraintData} from './TransformConstraintData';\r\nimport {PathConstraintData, SpacingMode} from './PathConstraintData';\r\nimport {Skin} from './Skin';\r\nimport {EventData} from './EventData';\r\nimport {NumberArrayLike, Color, PositionMode, RotateMode, TransformMode, Utils, settings} from '@pixi-spine/base';\r\nimport {BLEND_MODES} from '@pixi/constants';\r\n\r\n/** Loads skeleton data in the Spine JSON format.\r\n *\r\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\r\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\r\n * Runtimes Guide.\r\n * @public\r\n * */\r\nexport class SkeletonJson {\r\n    attachmentLoader: AttachmentLoader = null;\r\n\r\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\r\n     * runtime than were used in Spine.\r\n     *\r\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\r\n    scale = 1;\r\n    private linkedMeshes = new Array<LinkedMesh>();\r\n\r\n    constructor (attachmentLoader: AttachmentLoader) {\r\n        this.attachmentLoader = attachmentLoader;\r\n    }\r\n\r\n    readSkeletonData (json: string | any): SkeletonData {\r\n        let scale = this.scale;\r\n        let skeletonData = new SkeletonData();\r\n        let root = typeof (json) === \"string\" ? JSON.parse(json) : json;\r\n\r\n        // Skeleton\r\n        let skeletonMap = root.skeleton;\r\n        if (skeletonMap) {\r\n            skeletonData.hash = skeletonMap.hash;\r\n            skeletonData.version = skeletonMap.spine;\r\n            if (skeletonData.version.substr(0, 3) !== '4.0') {\r\n                let error = `Spine 4.0 loader cant load version ${skeletonMap.spine}. Please configure your pixi-spine bundle`;\r\n                console.error(error);\r\n            }\r\n            skeletonData.x = skeletonMap.x;\r\n            skeletonData.y = skeletonMap.y;\r\n            skeletonData.width = skeletonMap.width;\r\n            skeletonData.height = skeletonMap.height;\r\n            skeletonData.fps = skeletonMap.fps;\r\n            skeletonData.imagesPath = skeletonMap.images;\r\n        }\r\n\r\n        // Bones\r\n        if (root.bones) {\r\n            for (let i = 0; i < root.bones.length; i++) {\r\n                let boneMap = root.bones[i];\r\n\r\n                let parent: BoneData = null;\r\n                let parentName: string = getValue(boneMap, \"parent\", null);\r\n                if (parentName != null) {\r\n                    parent = skeletonData.findBone(parentName);\r\n                    if (parent == null) throw new Error(\"Parent bone not found: \" + parentName);\r\n                }\r\n                let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\r\n                data.length = getValue(boneMap, \"length\", 0) * scale;\r\n                data.x = getValue(boneMap, \"x\", 0) * scale;\r\n                data.y = getValue(boneMap, \"y\", 0) * scale;\r\n                data.rotation = getValue(boneMap, \"rotation\", 0);\r\n                data.scaleX = getValue(boneMap, \"scaleX\", 1);\r\n                data.scaleY = getValue(boneMap, \"scaleY\", 1);\r\n                data.shearX = getValue(boneMap, \"shearX\", 0);\r\n                data.shearY = getValue(boneMap, \"shearY\", 0);\r\n                data.transformMode = Utils.enumValue(TransformMode, getValue(boneMap, \"transform\", \"Normal\"));\r\n                data.skinRequired = getValue(boneMap, \"skin\", false);\r\n\r\n                let color = getValue(boneMap, \"color\", null);\r\n                if (color) data.color.setFromString(color);\r\n\r\n                skeletonData.bones.push(data);\r\n            }\r\n        }\r\n\r\n        // Slots.\r\n        if (root.slots) {\r\n            for (let i = 0; i < root.slots.length; i++) {\r\n                let slotMap = root.slots[i];\r\n                let boneData = skeletonData.findBone(slotMap.bone);\r\n                let data = new SlotData(skeletonData.slots.length, slotMap.name, boneData);\r\n\r\n                let color: string = getValue(slotMap, \"color\", null);\r\n                if (color) data.color.setFromString(color);\r\n\r\n                let dark: string = getValue(slotMap, \"dark\", null);\r\n                if (dark) data.darkColor = Color.fromString(dark);\r\n\r\n                data.attachmentName = getValue(slotMap, \"attachment\", null);\r\n                data.blendMode = SkeletonJson.blendModeFromString(getValue(slotMap, \"blend\", \"normal\"));\r\n                skeletonData.slots.push(data);\r\n            }\r\n        }\r\n\r\n        // IK constraints\r\n        if (root.ik) {\r\n            for (let i = 0; i < root.ik.length; i++) {\r\n                let constraintMap = root.ik[i];\r\n                let data = new IkConstraintData(constraintMap.name);\r\n                data.order = getValue(constraintMap, \"order\", 0);\r\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n                    let boneName = constraintMap.bones[ii];\r\n                    let bone = skeletonData.findBone(boneName);\r\n                    if (bone == null) throw new Error(\"IK bone not found: \" + boneName);\r\n                    data.bones.push(bone);\r\n                }\r\n\r\n                data.target = skeletonData.findBone(constraintMap.target);\r\n\r\n                data.mix = getValue(constraintMap, \"mix\", 1);\r\n                data.softness = getValue(constraintMap, \"softness\", 0) * scale;\r\n                data.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\r\n                data.compress = getValue(constraintMap, \"compress\", false);\r\n                data.stretch = getValue(constraintMap, \"stretch\", false);\r\n                data.uniform = getValue(constraintMap, \"uniform\", false);\r\n\r\n                skeletonData.ikConstraints.push(data);\r\n            }\r\n        }\r\n\r\n        // Transform constraints.\r\n        if (root.transform) {\r\n            for (let i = 0; i < root.transform.length; i++) {\r\n                let constraintMap = root.transform[i];\r\n                let data = new TransformConstraintData(constraintMap.name);\r\n                data.order = getValue(constraintMap, \"order\", 0);\r\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n                    let boneName = constraintMap.bones[ii];\r\n                    let bone = skeletonData.findBone(boneName);\r\n                    if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\r\n                    data.bones.push(bone);\r\n                }\r\n\r\n                let targetName: string = constraintMap.target;\r\n                data.target = skeletonData.findBone(targetName);\r\n                if (data.target == null) throw new Error(\"Transform constraint target bone not found: \" + targetName);\r\n\r\n                data.local = getValue(constraintMap, \"local\", false);\r\n                data.relative = getValue(constraintMap, \"relative\", false);\r\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\r\n                data.offsetX = getValue(constraintMap, \"x\", 0) * scale;\r\n                data.offsetY = getValue(constraintMap, \"y\", 0) * scale;\r\n                data.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\r\n                data.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\r\n                data.offsetShearY = getValue(constraintMap, \"shearY\", 0);\r\n\r\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\r\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\r\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\r\n                data.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\r\n                data.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\r\n                data.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\r\n\r\n                skeletonData.transformConstraints.push(data);\r\n            }\r\n        }\r\n\r\n        // Path constraints.\r\n        if (root.path) {\r\n            for (let i = 0; i < root.path.length; i++) {\r\n                let constraintMap = root.path[i];\r\n                let data = new PathConstraintData(constraintMap.name);\r\n                data.order = getValue(constraintMap, \"order\", 0);\r\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n                    let boneName = constraintMap.bones[ii];\r\n                    let bone = skeletonData.findBone(boneName);\r\n                    if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\r\n                    data.bones.push(bone);\r\n                }\r\n\r\n                let targetName: string = constraintMap.target;\r\n                data.target = skeletonData.findSlot(targetName);\r\n                if (data.target == null) throw new Error(\"Path target slot not found: \" + targetName);\r\n\r\n                data.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\r\n                data.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\r\n                data.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\r\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\r\n                data.position = getValue(constraintMap, \"position\", 0);\r\n                if (data.positionMode == PositionMode.Fixed) data.position *= scale;\r\n                data.spacing = getValue(constraintMap, \"spacing\", 0);\r\n                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\r\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\r\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\r\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\r\n\r\n                skeletonData.pathConstraints.push(data);\r\n            }\r\n        }\r\n\r\n        // Skins.\r\n        if (root.skins) {\r\n            for (let i = 0; i < root.skins.length; i++) {\r\n                let skinMap = root.skins[i]\r\n                let skin = new Skin(skinMap.name);\r\n\r\n                if (skinMap.bones) {\r\n                    for (let ii = 0; ii < skinMap.bones.length; ii++) {\r\n                        let bone = skeletonData.findBone(skinMap.bones[ii]);\r\n                        if (bone == null) throw new Error(\"Skin bone not found: \" + skinMap.bones[i]);\r\n                        skin.bones.push(bone);\r\n                    }\r\n                }\r\n\r\n                if (skinMap.ik) {\r\n                    for (let ii = 0; ii < skinMap.ik.length; ii++) {\r\n                        let constraint = skeletonData.findIkConstraint(skinMap.ik[ii]);\r\n                        if (constraint == null) throw new Error(\"Skin IK constraint not found: \" + skinMap.ik[i]);\r\n                        skin.constraints.push(constraint);\r\n                    }\r\n                }\r\n\r\n                if (skinMap.transform) {\r\n                    for (let ii = 0; ii < skinMap.transform.length; ii++) {\r\n                        let constraint = skeletonData.findTransformConstraint(skinMap.transform[ii]);\r\n                        if (constraint == null) throw new Error(\"Skin transform constraint not found: \" + skinMap.transform[i]);\r\n                        skin.constraints.push(constraint);\r\n                    }\r\n                }\r\n\r\n                if (skinMap.path) {\r\n                    for (let ii = 0; ii < skinMap.path.length; ii++) {\r\n                        let constraint = skeletonData.findPathConstraint(skinMap.path[ii]);\r\n                        if (constraint == null) throw new Error(\"Skin path constraint not found: \" + skinMap.path[i]);\r\n                        skin.constraints.push(constraint);\r\n                    }\r\n                }\r\n\r\n                for (let slotName in skinMap.attachments) {\r\n                    let slot = skeletonData.findSlot(slotName);\r\n                    if (slot == null) throw new Error(\"Slot not found: \" + slotName);\r\n                    let slotMap = skinMap.attachments[slotName];\r\n                    for (let entryName in slotMap) {\r\n                        let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\r\n                        if (attachment) skin.setAttachment(slot.index, entryName, attachment);\r\n                    }\r\n                }\r\n                skeletonData.skins.push(skin);\r\n                if (skin.name == \"default\") skeletonData.defaultSkin = skin;\r\n            }\r\n        }\r\n\r\n        // Linked meshes.\r\n        for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\r\n            let linkedMesh = this.linkedMeshes[i];\r\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\r\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\r\n            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? <VertexAttachment>parent : <VertexAttachment>linkedMesh.mesh;\r\n            linkedMesh.mesh.setParentMesh(<MeshAttachment> parent);\r\n            // linkedMesh.mesh.updateUVs();\r\n        }\r\n        this.linkedMeshes.length = 0;\r\n\r\n        // Events.\r\n        if (root.events) {\r\n            for (let eventName in root.events) {\r\n                let eventMap = root.events[eventName];\r\n                let data = new EventData(eventName);\r\n                data.intValue = getValue(eventMap, \"int\", 0);\r\n                data.floatValue = getValue(eventMap, \"float\", 0);\r\n                data.stringValue = getValue(eventMap, \"string\", \"\");\r\n                data.audioPath = getValue(eventMap, \"audio\", null);\r\n                if (data.audioPath) {\r\n                    data.volume = getValue(eventMap, \"volume\", 1);\r\n                    data.balance = getValue(eventMap, \"balance\", 0);\r\n                }\r\n                skeletonData.events.push(data);\r\n            }\r\n        }\r\n\r\n        // Animations.\r\n        if (root.animations) {\r\n            for (let animationName in root.animations) {\r\n                let animationMap = root.animations[animationName];\r\n                this.readAnimation(animationMap, animationName, skeletonData);\r\n            }\r\n        }\r\n\r\n        return skeletonData;\r\n    }\r\n\r\n    readAttachment (map: any, skin: Skin, slotIndex: number, name: string, skeletonData: SkeletonData): Attachment {\r\n        let scale = this.scale;\r\n        name = getValue(map, \"name\", name);\r\n\r\n        switch (getValue(map, \"type\", \"region\")) {\r\n            case \"region\": {\r\n                let path = getValue(map, \"path\", name);\r\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n                if (!region) return null;\r\n                region.path = path;\r\n                region.x = getValue(map, \"x\", 0) * scale;\r\n                region.y = getValue(map, \"y\", 0) * scale;\r\n                region.scaleX = getValue(map, \"scaleX\", 1);\r\n                region.scaleY = getValue(map, \"scaleY\", 1);\r\n                region.rotation = getValue(map, \"rotation\", 0);\r\n                region.width = map.width * scale;\r\n                region.height = map.height * scale;\r\n\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) region.color.setFromString(color);\r\n\r\n                // region.updateOffset();\r\n                return region;\r\n            }\r\n            case \"boundingbox\": {\r\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n                if (!box) return null;\r\n                this.readVertices(map, box, map.vertexCount << 1);\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) box.color.setFromString(color);\r\n                return box;\r\n            }\r\n            case \"mesh\":\r\n            case \"linkedmesh\": {\r\n                let path = getValue(map, \"path\", name);\r\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n                if (!mesh) return null;\r\n                mesh.path = path;\r\n\r\n                let color = getValue(map, \"color\", null);\r\n                if (color) mesh.color.setFromString(color);\r\n\r\n                mesh.width = getValue(map, \"width\", 0) * scale;\r\n                mesh.height = getValue(map, \"height\", 0) * scale;\r\n\r\n                let parent: string = getValue(map, \"parent\", null);\r\n                if (parent) {\r\n                    this.linkedMeshes.push(new LinkedMesh(mesh, <string>getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"deform\", true)));\r\n                    return mesh;\r\n                }\r\n\r\n                let uvs: Array<number> = map.uvs;\r\n                this.readVertices(map, mesh, uvs.length);\r\n                mesh.triangles = map.triangles;\r\n                mesh.regionUVs = new Float32Array(uvs);\r\n                // mesh.updateUVs();\r\n\r\n                mesh.edges = getValue(map, \"edges\", null);\r\n                mesh.hullLength = getValue(map, \"hull\", 0) * 2;\r\n                return mesh;\r\n            }\r\n            case \"path\": {\r\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\r\n                if (!path) return null;\r\n                path.closed = getValue(map, \"closed\", false);\r\n                path.constantSpeed = getValue(map, \"constantSpeed\", true);\r\n\r\n                let vertexCount = map.vertexCount;\r\n                this.readVertices(map, path, vertexCount << 1);\r\n\r\n                let lengths: Array<number> = Utils.newArray(vertexCount / 3, 0);\r\n                for (let i = 0; i < map.lengths.length; i++)\r\n                    lengths[i] = map.lengths[i] * scale;\r\n                path.lengths = lengths;\r\n\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) path.color.setFromString(color);\r\n                return path;\r\n            }\r\n            case \"point\": {\r\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\r\n                if (!point) return null;\r\n                point.x = getValue(map, \"x\", 0) * scale;\r\n                point.y = getValue(map, \"y\", 0) * scale;\r\n                point.rotation = getValue(map, \"rotation\", 0);\r\n\r\n                let color = getValue(map, \"color\", null);\r\n                if (color) point.color.setFromString(color);\r\n                return point;\r\n            }\r\n            case \"clipping\": {\r\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\r\n                if (!clip) return null;\r\n\r\n                let end = getValue(map, \"end\", null);\r\n                if (end != null) {\r\n                    let slot = skeletonData.findSlot(end);\r\n                    if (slot == null) throw new Error(\"Clipping end slot not found: \" + end);\r\n                    clip.endSlot = slot;\r\n                }\r\n\r\n                let vertexCount = map.vertexCount;\r\n                this.readVertices(map, clip, vertexCount << 1);\r\n\r\n                let color: string = getValue(map, \"color\", null);\r\n                if (color) clip.color.setFromString(color);\r\n                return clip;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    readVertices (map: any, attachment: VertexAttachment, verticesLength: number) {\r\n        let scale = this.scale;\r\n        attachment.worldVerticesLength = verticesLength;\r\n        let vertices: Array<number> = map.vertices;\r\n        if (verticesLength == vertices.length) {\r\n            let scaledVertices = Utils.toFloatArray(vertices);\r\n            if (scale != 1) {\r\n                for (let i = 0, n = vertices.length; i < n; i++)\r\n                    scaledVertices[i] *= scale;\r\n            }\r\n            attachment.vertices = scaledVertices;\r\n            return;\r\n        }\r\n        let weights = new Array<number>();\r\n        let bones = new Array<number>();\r\n        for (let i = 0, n = vertices.length; i < n;) {\r\n            let boneCount = vertices[i++];\r\n            bones.push(boneCount);\r\n            for (let nn = i + boneCount * 4; i < nn; i += 4) {\r\n                bones.push(vertices[i]);\r\n                weights.push(vertices[i + 1] * scale);\r\n                weights.push(vertices[i + 2] * scale);\r\n                weights.push(vertices[i + 3]);\r\n            }\r\n        }\r\n        attachment.bones = bones;\r\n        attachment.vertices = Utils.toFloatArray(weights);\r\n    }\r\n\r\n    readAnimation (map: any, name: string, skeletonData: SkeletonData) {\r\n        let scale = this.scale;\r\n        let timelines = new Array<Timeline>();\r\n\r\n        // Slot timelines.\r\n        if (map.slots) {\r\n            for (let slotName in map.slots) {\r\n                let slotMap = map.slots[slotName];\r\n                let slotIndex = skeletonData.findSlot(slotName).index;\r\n                if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotName);\r\n                for (let timelineName in slotMap) {\r\n                    let timelineMap = slotMap[timelineName];\r\n                    if (!timelineMap) continue;\r\n                    let frames = timelineMap.length;\r\n                    if (timelineName == \"attachment\") {\r\n                        let timeline = new AttachmentTimeline(frames, slotIndex);\r\n                        for (let frame = 0; frame < frames; frame++) {\r\n                            let keyMap = timelineMap[frame];\r\n                            timeline.setFrame(frame, getValue(keyMap, \"time\", 0), keyMap.name);\r\n                        }\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"rgba\") {\r\n                        let timeline = new RGBATimeline(frames, frames << 2, slotIndex);\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.color);\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.color);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"rgb\") {\r\n                        let timeline = new RGBTimeline(frames, frames * 3, slotIndex);\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.color);\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.color);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"alpha\") {\r\n                        timelines.push(readTimeline1(timelineMap, new AlphaTimeline(frames, frames, slotIndex), 0, 1));\r\n                    } else if (timelineName == \"rgba2\") {\r\n                        let timeline = new RGBA2Timeline(frames, frames * 7, slotIndex);\r\n\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.light);\r\n                        let color2 = Color.fromString(keyMap.dark);\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.light);\r\n                            let newColor2 = Color.fromString(nextMap.dark);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            color2 = newColor2;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n\r\n                    } else if (timelineName == \"rgb2\") {\r\n                        let timeline = new RGB2Timeline(frames, frames * 6, slotIndex);\r\n\r\n                        let keyMap = timelineMap[0];\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let color = Color.fromString(keyMap.light);\r\n                        let color2 = Color.fromString(keyMap.dark);\r\n\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let newColor = Color.fromString(nextMap.light);\r\n                            let newColor2 = Color.fromString(nextMap.dark);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\r\n                            }\r\n                            time = time2;\r\n                            color = newColor;\r\n                            color2 = newColor2;\r\n                            keyMap = nextMap;\r\n                        }\r\n\r\n                        timelines.push(timeline);\r\n                    } else\r\n                        throw new Error(\"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bone timelines.\r\n        if (map.bones) {\r\n            for (let boneName in map.bones) {\r\n                let boneMap = map.bones[boneName];\r\n                let boneIndex = skeletonData.findBone(boneName).index;\r\n                if (boneIndex == -1) throw new Error(\"Bone not found: \" + boneName);\r\n                for (let timelineName in boneMap) {\r\n                    let timelineMap = boneMap[timelineName];\r\n                    let frames = timelineMap.length;\r\n                    if (frames == 0) continue;\r\n\r\n                    if (timelineName === \"rotate\") {\r\n                        timelines.push(readTimeline1(timelineMap, new RotateTimeline(frames, frames, boneIndex), 0, 1));\r\n                    } else if (timelineName === \"translate\") {\r\n                        let timeline = new TranslateTimeline(frames, frames << 1, boneIndex);\r\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\r\n                    } else if (timelineName === \"translatex\") {\r\n                        let timeline = new TranslateXTimeline(frames, frames, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\r\n                    } else if (timelineName === \"translatey\") {\r\n                        let timeline = new TranslateYTimeline(frames, frames, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\r\n                    } else if (timelineName === \"scale\") {\r\n                        let timeline = new ScaleTimeline(frames, frames << 1, boneIndex);\r\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\r\n                    } else if (timelineName === \"scalex\") {\r\n                        let timeline = new ScaleXTimeline(frames, frames, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\r\n                    } else if (timelineName === \"scaley\") {\r\n                        let timeline = new ScaleYTimeline(frames, frames, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\r\n                    } else if (timelineName === \"shear\") {\r\n                        let timeline = new ShearTimeline(frames, frames << 1, boneIndex);\r\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\r\n                    } else if (timelineName === \"shearx\") {\r\n                        let timeline = new ShearXTimeline(frames, frames, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\r\n                    } else if (timelineName === \"sheary\") {\r\n                        let timeline = new ShearYTimeline(frames, frames, boneIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // IK constraint timelines.\r\n        if (map.ik) {\r\n            for (let constraintName in map.ik) {\r\n                let constraintMap = map.ik[constraintName];\r\n                let keyMap = constraintMap[0];\r\n                if (!keyMap) continue;\r\n\r\n                let constraint = skeletonData.findIkConstraint(constraintName);\r\n                let constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\r\n                let timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\r\n\r\n                let time = getValue(keyMap, \"time\", 0);\r\n                let mix = getValue(keyMap, \"mix\", 1);\r\n                let softness = getValue(keyMap, \"softness\", 0) * scale;\r\n\r\n                for (let frame = 0, bezier = 0; ; frame++) {\r\n                    timeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\r\n                    let nextMap = constraintMap[frame + 1];\r\n                    if (!nextMap) {\r\n                        timeline.shrink(bezier);\r\n                        break;\r\n                    }\r\n\r\n                    let time2 = getValue(nextMap, \"time\", 0);\r\n                    let mix2 = getValue(nextMap, \"mix\", 1);\r\n                    let softness2 = getValue(nextMap, \"softness\", 0) * scale;\r\n                    let curve = keyMap.curve;\r\n                    if (curve) {\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\r\n                    }\r\n\r\n                    time = time2;\r\n                    mix = mix2;\r\n                    softness = softness2;\r\n                    keyMap = nextMap;\r\n                }\r\n                timelines.push(timeline);\r\n            }\r\n        }\r\n\r\n        // Transform constraint timelines.\r\n        if (map.transform) {\r\n            for (let constraintName in map.transform) {\r\n                let timelineMap = map.transform[constraintName];\r\n                let keyMap = timelineMap[0];\r\n                if (!keyMap) continue;\r\n\r\n                let constraint = skeletonData.findTransformConstraint(constraintName);\r\n                let constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\r\n                let timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length * 6, constraintIndex);\r\n\r\n                let time = getValue(keyMap, \"time\", 0);\r\n                let mixRotate = getValue(keyMap, \"mixRotate\", 1);\r\n                let mixX = getValue(keyMap, \"mixX\", 1);\r\n                let mixY = getValue(keyMap, \"mixY\", mixX);\r\n                let mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\r\n                let mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\r\n                let mixShearY = getValue(keyMap, \"mixShearY\", 1);\r\n\r\n                for (let frame = 0, bezier = 0; ; frame++) {\r\n                    timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\r\n                    let nextMap = timelineMap[frame + 1];\r\n                    if (!nextMap) {\r\n                        timeline.shrink(bezier);\r\n                        break;\r\n                    }\r\n\r\n                    let time2 = getValue(nextMap, \"time\", 0);\r\n                    let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\r\n                    let mixX2 = getValue(nextMap, \"mixX\", 1);\r\n                    let mixY2 = getValue(nextMap, \"mixY\", mixX2);\r\n                    let mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\r\n                    let mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\r\n                    let mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\r\n                    let curve = keyMap.curve;\r\n                    if (curve) {\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\r\n                        bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\r\n                    }\r\n\r\n                    time = time2;\r\n                    mixRotate = mixRotate2;\r\n                    mixX = mixX2;\r\n                    mixY = mixY2;\r\n                    mixScaleX = mixScaleX2;\r\n                    mixScaleY = mixScaleY2;\r\n                    mixScaleX = mixScaleX2;\r\n                    keyMap = nextMap;\r\n                }\r\n                timelines.push(timeline);\r\n            }\r\n        }\r\n\r\n        // Path constraint timelines.\r\n        if (map.path) {\r\n            for (let constraintName in map.path) {\r\n                let constraintMap = map.path[constraintName];\r\n                let constraintIndex = skeletonData.findPathConstraintIndex(constraintName);\r\n                if (constraintIndex == -1) throw new Error(\"Path constraint not found: \" + constraintName);\r\n                let constraint = skeletonData.pathConstraints[constraintIndex];\r\n                for (let timelineName in constraintMap) {\r\n                    let timelineMap = constraintMap[timelineName];\r\n                    let keyMap = timelineMap[0];\r\n                    if (!keyMap) continue;\r\n\r\n                    let frames = timelineMap.length;\r\n                    if (timelineName === \"position\") {\r\n                        let timeline = new PathConstraintPositionTimeline(frames, frames, constraintIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\r\n                    } else if (timelineName === \"spacing\") {\r\n                        let timeline = new PathConstraintSpacingTimeline(frames, frames, constraintIndex);\r\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\r\n                    } else if (timelineName === \"mix\") {\r\n                        let timeline = new PathConstraintMixTimeline(frames, frames * 3, constraintIndex);\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        let mixRotate = getValue(keyMap, \"mixRotate\", 1);\r\n                        let mixX = getValue(keyMap, \"mixX\", 1);\r\n                        let mixY = getValue(keyMap, \"mixY\", mixX);\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\r\n                            let mixX2 = getValue(nextMap, \"mixX\", 1);\r\n                            let mixY2 = getValue(nextMap, \"mixY\", mixX2);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) {\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\r\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\r\n                            }\r\n                            time = time2;\r\n                            mixRotate = mixRotate2;\r\n                            mixX = mixX2;\r\n                            mixY = mixY2;\r\n                            keyMap = nextMap;\r\n                        }\r\n                        timelines.push(timeline);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deform timelines.\r\n        if (map.deform) {\r\n            for (let deformName in map.deform) {\r\n                let deformMap = map.deform[deformName];\r\n                let skin = skeletonData.findSkin(deformName);\r\n                if (skin == null) {\r\n                   if (settings.FAIL_ON_NON_EXISTING_SKIN) {\r\n                       throw new Error(\"Skin not found: \" + deformName);\r\n                   } else {\r\n                       continue;\r\n                   }\r\n                }\r\n                for (let slotName in deformMap) {\r\n                    let slotMap = deformMap[slotName];\r\n                    let slotIndex = skeletonData.findSlot(slotName).index;\r\n                    for (let timelineName in slotMap) {\r\n                        let timelineMap = slotMap[timelineName];\r\n                        let keyMap = timelineMap[0];\r\n                        if (!keyMap) continue;\r\n\r\n                        let attachment = <VertexAttachment>skin.getAttachment(slotIndex, timelineName);\r\n                        let weighted = attachment.bones;\r\n                        let vertices = attachment.vertices;\r\n                        let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\r\n\r\n                        let timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\r\n                        let time = getValue(keyMap, \"time\", 0);\r\n                        for (let frame = 0, bezier = 0; ; frame++) {\r\n                            let deform: NumberArrayLike;\r\n                            let verticesValue: Array<Number> = getValue(keyMap, \"vertices\", null);\r\n                            if (!verticesValue)\r\n                                deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\r\n                            else {\r\n                                deform = Utils.newFloatArray(deformLength);\r\n                                let start = <number>getValue(keyMap, \"offset\", 0);\r\n                                Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\r\n                                if (scale != 1) {\r\n                                    for (let i = start, n = i + verticesValue.length; i < n; i++)\r\n                                        deform[i] *= scale;\r\n                                }\r\n                                if (!weighted) {\r\n                                    for (let i = 0; i < deformLength; i++)\r\n                                        deform[i] += vertices[i];\r\n                                }\r\n                            }\r\n\r\n                            timeline.setFrame(frame, time, deform);\r\n                            let nextMap = timelineMap[frame + 1];\r\n                            if (!nextMap) {\r\n                                timeline.shrink(bezier);\r\n                                break;\r\n                            }\r\n                            let time2 = getValue(nextMap, \"time\", 0);\r\n                            let curve = keyMap.curve;\r\n                            if (curve) bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\r\n                            time = time2;\r\n                            keyMap = nextMap;\r\n                        }\r\n                        timelines.push(timeline);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Draw order timelines.\r\n        if (map.drawOrder) {\r\n            let timeline = new DrawOrderTimeline(map.drawOrder.length);\r\n            let slotCount = skeletonData.slots.length;\r\n            let frame = 0;\r\n            for (let i = 0; i < map.drawOrder.length; i++, frame++) {\r\n                let drawOrderMap = map.drawOrder[i];\r\n                let drawOrder: Array<number> = null;\r\n                let offsets = getValue(drawOrderMap, \"offsets\", null);\r\n                if (offsets) {\r\n                    drawOrder = Utils.newArray<number>(slotCount, -1);\r\n                    let unchanged = Utils.newArray<number>(slotCount - offsets.length, 0);\r\n                    let originalIndex = 0, unchangedIndex = 0;\r\n                    for (let ii = 0; ii < offsets.length; ii++) {\r\n                        let offsetMap = offsets[ii];\r\n                        let slotIndex = skeletonData.findSlot(offsetMap.slot).index;\r\n                        // Collect unchanged items.\r\n                        while (originalIndex != slotIndex)\r\n                            unchanged[unchangedIndex++] = originalIndex++;\r\n                        // Set changed items.\r\n                        drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\r\n                    }\r\n                    // Collect remaining unchanged items.\r\n                    while (originalIndex < slotCount)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Fill in unchanged items.\r\n                    for (let ii = slotCount - 1; ii >= 0; ii--)\r\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                }\r\n                timeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        // Event timelines.\r\n        if (map.events) {\r\n            let timeline = new EventTimeline(map.events.length);\r\n            let frame = 0;\r\n            for (let i = 0; i < map.events.length; i++, frame++) {\r\n                let eventMap = map.events[i];\r\n                let eventData = skeletonData.findEvent(eventMap.name);\r\n                let event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\r\n                event.intValue = getValue(eventMap, \"int\", eventData.intValue);\r\n                event.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\r\n                event.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\r\n                if (event.data.audioPath) {\r\n                    event.volume = getValue(eventMap, \"volume\", 1);\r\n                    event.balance = getValue(eventMap, \"balance\", 0);\r\n                }\r\n                timeline.setFrame(frame, event);\r\n            }\r\n            timelines.push(timeline);\r\n        }\r\n\r\n        let duration = 0;\r\n        for (let i = 0, n = timelines.length; i < n; i++)\r\n            duration = Math.max(duration, timelines[i].getDuration());\r\n        if (isNaN(duration)) {\r\n            throw new Error(\"Error while parsing animation, duration is NaN\");\r\n        }\r\n\r\n        skeletonData.animations.push(new Animation(name, timelines, duration));\r\n    }\r\n    static blendModeFromString (str: string) {\r\n        str = str.toLowerCase();\r\n        if (str == \"normal\") return BLEND_MODES.NORMAL;\r\n        if (str == \"additive\") return BLEND_MODES.ADD;\r\n        if (str == \"multiply\") return BLEND_MODES.MULTIPLY;\r\n        if (str == \"screen\") return BLEND_MODES.SCREEN;\r\n        throw new Error(`Unknown blend mode: ${str}`);\r\n    }\r\n}\r\n\r\nclass LinkedMesh {\r\n    parent: string; skin: string;\r\n    slotIndex: number;\r\n    mesh: MeshAttachment;\r\n    inheritDeform: boolean;\r\n\r\n    constructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\r\n        this.mesh = mesh;\r\n        this.skin = skin;\r\n        this.slotIndex = slotIndex;\r\n        this.parent = parent;\r\n        this.inheritDeform = inheritDeform;\r\n    }\r\n}\r\n\r\nfunction readTimeline1 (keys: any[], timeline: CurveTimeline1, defaultValue: number, scale: number) {\r\n    let keyMap = keys[0];\r\n    let time = getValue(keyMap, \"time\", 0);\r\n    let value = getValue(keyMap, \"value\", defaultValue) * scale;\r\n    let bezier = 0;\r\n    for (let frame = 0; ; frame++) {\r\n        timeline.setFrame(frame, time, value);\r\n        let nextMap = keys[frame + 1];\r\n        if (!nextMap) {\r\n            timeline.shrink(bezier);\r\n            return timeline;\r\n        }\r\n        let time2 = getValue(nextMap, \"time\", 0);\r\n        let value2 = getValue(nextMap, \"value\", defaultValue) * scale;\r\n        if (keyMap.curve) bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\r\n        time = time2;\r\n        value = value2;\r\n        keyMap = nextMap;\r\n    }\r\n}\r\n\r\nfunction readTimeline2 (keys: any[], timeline: CurveTimeline2, name1: string, name2: string, defaultValue: number, scale: number) {\r\n    let keyMap = keys[0];\r\n    let time = getValue(keyMap, \"time\", 0);\r\n    let value1 = getValue(keyMap, name1, defaultValue) * scale;\r\n    let value2 = getValue(keyMap, name2, defaultValue) * scale;\r\n    let bezier = 0;\r\n    for (let frame = 0; ; frame++) {\r\n        timeline.setFrame(frame, time, value1, value2);\r\n        let nextMap = keys[frame + 1];\r\n        if (!nextMap) {\r\n            timeline.shrink(bezier);\r\n            return timeline;\r\n        }\r\n        let time2 = getValue(nextMap, \"time\", 0);\r\n        let nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\r\n        let nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\r\n        let curve = keyMap.curve;\r\n        if (curve) {\r\n            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\r\n            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\r\n        }\r\n        time = time2;\r\n        value1 = nvalue1;\r\n        value2 = nvalue2;\r\n        keyMap = nextMap;\r\n    }\r\n}\r\n\r\nfunction readCurve (curve: any, timeline: CurveTimeline, bezier: number, frame: number, value: number, time1: number, time2: number,\r\n                    value1: number, value2: number, scale: number) {\r\n    if (curve == \"stepped\") {\r\n        timeline.setStepped(frame);\r\n        return bezier;\r\n    }\r\n    let i = value << 2;\r\n    let cx1 = curve[i];\r\n    let cy1 = curve[i + 1] * scale;\r\n    let cx2 = curve[i + 2];\r\n    let cy2 = curve[i + 3] * scale;\r\n    timeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\r\n    return bezier + 1;\r\n}\r\n\r\nfunction getValue (map: any, property: string, defaultValue: any) {\r\n    return map[property] !== undefined ? map[property] : defaultValue;\r\n}\r\n","import {SpineBase} from '@pixi-spine/base';\r\nimport {Skeleton} from \"./core/Skeleton\";\r\nimport {SkeletonData} from \"./core/SkeletonData\";\r\nimport {AnimationState} from \"./core/AnimationState\";\r\nimport {AnimationStateData} from \"./core/AnimationStateData\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Spine extends SpineBase<Skeleton, SkeletonData, AnimationState, AnimationStateData> {\r\n    createSkeleton(spineData: SkeletonData) {\r\n        this.skeleton = new Skeleton(spineData);\r\n        this.skeleton.updateWorldTransform();\r\n        this.stateData = new AnimationStateData(spineData);\r\n        this.state = new AnimationState(this.stateData);\r\n    }\r\n}\r\n"],"names":["Utils","AttachmentType","Color","MathUtils","PowOut","StringSet","MixBlend","MixDirection","Pool","EventType","Matrix","settings","TransformMode","SpacingMode","RotateMode","PositionMode","Vector2","BinaryInput","LinkedMesh","readTimeline1","readTimeline2","BLEND_MODES","SpineBase"],"mappings":"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"}