{"version":3,"file":"loader-base.js","sources":["../src/loaders.ts","../src/index.ts"],"sourcesContent":["import {IResourceMetadata, Loader, LoaderResource} from \"@pixi/loaders\";\r\nimport {BaseTexture, Texture} from \"@pixi/core\";\r\nimport {ISkeletonParser, TextureAtlas} from \"@pixi-spine/base\";\r\nimport {ALPHA_MODES} from \"@pixi/constants\";\r\n\r\nfunction isJson(resource: LoaderResource) {\r\n    return resource.type === LoaderResource.TYPE.JSON;\r\n}\r\n\r\nfunction isBuffer(resource: LoaderResource) {\r\n    return resource.xhrType === (LoaderResource as any).XHR_RESPONSE_TYPE.BUFFER;\r\n}\r\n\r\nLoaderResource.setExtensionXhrType('skel', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\r\n\r\n/**\r\n * @public\r\n */\r\nexport abstract class AbstractSpineParser {\r\n    abstract createJsonParser(): ISkeletonParser;\r\n\r\n    abstract createBinaryParser(): ISkeletonParser;\r\n\r\n    abstract parseData(resource: LoaderResource, parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): void;\r\n\r\n    genMiddleware() {\r\n        const self = this;\r\n\r\n        return {\r\n            use(this: Loader, resource: LoaderResource, next: () => any) {\r\n                // skip if no data, its not json, or it isn't atlas data\r\n                if (!resource.data) {\r\n                    return next();\r\n                }\r\n\r\n                const isJsonSpineModel = isJson(resource) && resource.data.bones;\r\n                const isBinarySpineModel = isBuffer(resource) && (resource.extension === 'skel' || resource.metadata\r\n                    && (resource.metadata as any).spineMetadata);\r\n\r\n                if (!isJsonSpineModel && !isBinarySpineModel) {\r\n                    return next();\r\n                }\r\n\r\n                let parser: ISkeletonParser = null;\r\n                let dataToParse = resource.data;\r\n\r\n                if (isJsonSpineModel) {\r\n                    parser = self.createJsonParser();\r\n                } else {\r\n                    parser = self.createBinaryParser();\r\n                    if (resource.data instanceof ArrayBuffer) {\r\n                        dataToParse = new Uint8Array(resource.data);\r\n                    }\r\n                }\r\n\r\n                const metadata = (resource.metadata || {}) as IResourceMetadata;\r\n                const metadataSkeletonScale = metadata ? (metadata as any).spineSkeletonScale : null;\r\n\r\n                if (metadataSkeletonScale) {\r\n                    parser.scale = metadataSkeletonScale;\r\n                }\r\n\r\n                const metadataAtlas = metadata.spineAtlas;\r\n                if (metadataAtlas === false) {\r\n                    return next();\r\n                }\r\n                if (metadataAtlas && metadataAtlas.pages) {\r\n                    self.parseData(resource, parser, metadataAtlas, dataToParse);\r\n                    return next();\r\n                }\r\n\r\n                const metadataAtlasSuffix = metadata.spineAtlasSuffix || '.atlas';\r\n\r\n                /**\r\n                 * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\r\n                 * that correspond to the spine file are in the same base URL and that the .json and .atlas files\r\n                 * have the same name\r\n                 */\r\n                let atlasPath = resource.url;\r\n                let queryStringPos = atlasPath.indexOf('?');\r\n                if (queryStringPos > 0) {\r\n                    //remove querystring\r\n                    atlasPath = atlasPath.substr(0, queryStringPos)\r\n                }\r\n                atlasPath = atlasPath.substr(0, atlasPath.lastIndexOf('.')) + metadataAtlasSuffix;\r\n// use atlas path as a params. (no need to use same atlas file name with json file name)\r\n                if (metadata.spineAtlasFile) {\r\n                    atlasPath = metadata.spineAtlasFile;\r\n                }\r\n\r\n//remove the baseUrl\r\n                atlasPath = atlasPath.replace(this.baseUrl, '');\r\n\r\n                const atlasOptions = {\r\n                    crossOrigin: resource.crossOrigin,\r\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.TEXT,\r\n                    metadata: metadata.spineMetadata || null,\r\n                    parentResource: resource\r\n                };\r\n                const imageOptions = {\r\n                    crossOrigin: resource.crossOrigin,\r\n                    metadata: metadata.imageMetadata || null,\r\n                    parentResource: resource\r\n                };\r\n                let baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\r\n//remove the baseUrl\r\n                baseUrl = baseUrl.replace(this.baseUrl, '');\r\n\r\n                const namePrefix = metadata.imageNamePrefix || (resource.name + '_atlas_page_');\r\n\r\n                const adapter = metadata.images ? staticImageLoader(metadata.images)\r\n                    : metadata.image ? staticImageLoader({'default': metadata.image})\r\n                        : metadata.imageLoader ? metadata.imageLoader(this, namePrefix, baseUrl, imageOptions)\r\n                            : imageLoaderAdapter(this, namePrefix, baseUrl, imageOptions);\r\n\r\n                function createSkeletonWithRawAtlas(rawData: string) {\r\n                    new TextureAtlas(rawData, adapter, function(spineAtlas) {\r\n                        if (spineAtlas) {\r\n                            self.parseData(resource, parser, spineAtlas, dataToParse);\r\n                        }\r\n                        next();\r\n                    });\r\n                }\r\n\r\n                if (metadata.atlasRawData) {\r\n                    createSkeletonWithRawAtlas(metadata.atlasRawData)\r\n                } else {\r\n                    this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (atlasResource: any) {\r\n                        if (!atlasResource.error) {\r\n                            createSkeletonWithRawAtlas(atlasResource.data);\r\n                        } else {\r\n                            next();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function imageLoaderAdapter(loader: any, namePrefix: any, baseUrl: any, imageOptions: any) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\r\n        baseUrl += '/';\r\n    }\r\n    return function (line: string, callback: (baseTexture: BaseTexture) => any) {\r\n        const name = namePrefix + line;\r\n        const url = baseUrl + line;\r\n\r\n        const cachedResource = loader.resources[name];\r\n        if (cachedResource) {\r\n            const done = () => {\r\n                callback(cachedResource.texture.baseTexture)\r\n            }\r\n            if (cachedResource.texture) {\r\n                done();\r\n            } else {\r\n                cachedResource.onAfterMiddleware.add(done);\r\n            }\r\n        } else {\r\n            loader.add(name, url, imageOptions, (resource: LoaderResource) => {\r\n                if (!resource.error) {\r\n                    if (line.indexOf('-pma.') >= 0) {\r\n                        resource.texture.baseTexture.alphaMode = ALPHA_MODES.PMA;\r\n                    }\r\n\r\n                    callback(resource.texture.baseTexture);\r\n                } else {\r\n                    callback(null);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function syncImageLoaderAdapter(baseUrl: any, crossOrigin: any) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\r\n        baseUrl += '/';\r\n    }\r\n    return function (line: any, callback: any) {\r\n        callback(BaseTexture.from(line, crossOrigin));\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function staticImageLoader(pages: { [key: string]: (BaseTexture | Texture) }) {\r\n    return function (line: any, callback: any) {\r\n        let page = pages[line] || pages['default'] as any;\r\n        if (page && page.baseTexture)\r\n            callback(page.baseTexture);\r\n        else\r\n            callback(page);\r\n    }\r\n}\r\n","/// <reference path=\"../global.d.ts\" />\r\nexport * from './loaders';\r\n"],"names":["LoaderResource","TextureAtlas","ALPHA_MODES","BaseTexture"],"mappings":"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"}